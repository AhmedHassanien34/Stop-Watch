
Stop_Watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00003cb6  00003d4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003b  00800072  00800072  00003d5c  2**0
                  ALLOC
  3 .stab         00003318  00000000  00000000  00003d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001576  00000000  00000000  00007074  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000085ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000874a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000088d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a91e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000ba1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c9a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000cb24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000cde6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d674  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6d 0d 	jmp	0x1ada	; 0x1ada <__vector_1>
       8:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__vector_2>
       c:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__vector_3>
      10:	0c 94 83 12 	jmp	0x2506	; 0x2506 <__vector_4>
      14:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__vector_5>
      18:	0c 94 1b 19 	jmp	0x3236	; 0x3236 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__vector_10>
      2c:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <__vector_18>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3a       	cpi	r26, 0xAD	; 173
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4e 19 	call	0x329c	; 0x329c <main>
      8a:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 22 1e 	jmp	0x3c44	; 0x3c44 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3e 1e 	jmp	0x3c7c	; 0x3c7c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2e 1e 	jmp	0x3c5c	; 0x3c5c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4a 1e 	jmp	0x3c94	; 0x3c94 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2e 1e 	jmp	0x3c5c	; 0x3c5c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4a 1e 	jmp	0x3c94	; 0x3c94 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 22 1e 	jmp	0x3c44	; 0x3c44 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3e 1e 	jmp	0x3c7c	; 0x3c7c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2a 1e 	jmp	0x3c54	; 0x3c54 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 46 1e 	jmp	0x3c8c	; 0x3c8c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2e 1e 	jmp	0x3c5c	; 0x3c5c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4a 1e 	jmp	0x3c94	; 0x3c94 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2e 1e 	jmp	0x3c5c	; 0x3c5c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4a 1e 	jmp	0x3c94	; 0x3c94 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2e 1e 	jmp	0x3c5c	; 0x3c5c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4a 1e 	jmp	0x3c94	; 0x3c94 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 32 1e 	jmp	0x3c64	; 0x3c64 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 4e 1e 	jmp	0x3c9c	; 0x3c9c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_u8SetPinDirection>:
#include "DIO_register.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	2a 97       	sbiw	r28, 0x0a	; 10
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	8a 83       	std	Y+2, r24	; 0x02
     cb4:	6b 83       	std	Y+3, r22	; 0x03
     cb6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     cb8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	88 30       	cpi	r24, 0x08	; 8
     cbe:	08 f0       	brcs	.+2      	; 0xcc2 <DIO_u8SetPinDirection+0x24>
     cc0:	b9 c1       	rjmp	.+882    	; 0x1034 <DIO_u8SetPinDirection+0x396>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	88 23       	and	r24, r24
     cc6:	09 f0       	breq	.+2      	; 0xcca <DIO_u8SetPinDirection+0x2c>
     cc8:	77 c0       	rjmp	.+238    	; 0xdb8 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	3a 87       	std	Y+10, r19	; 0x0a
     cd2:	29 87       	std	Y+9, r18	; 0x09
     cd4:	89 85       	ldd	r24, Y+9	; 0x09
     cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	91 05       	cpc	r25, r1
     cdc:	59 f1       	breq	.+86     	; 0xd34 <DIO_u8SetPinDirection+0x96>
     cde:	29 85       	ldd	r18, Y+9	; 0x09
     ce0:	3a 85       	ldd	r19, Y+10	; 0x0a
     ce2:	22 30       	cpi	r18, 0x02	; 2
     ce4:	31 05       	cpc	r19, r1
     ce6:	2c f4       	brge	.+10     	; 0xcf2 <DIO_u8SetPinDirection+0x54>
     ce8:	89 85       	ldd	r24, Y+9	; 0x09
     cea:	9a 85       	ldd	r25, Y+10	; 0x0a
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	69 f0       	breq	.+26     	; 0xd0a <DIO_u8SetPinDirection+0x6c>
     cf0:	60 c0       	rjmp	.+192    	; 0xdb2 <DIO_u8SetPinDirection+0x114>
     cf2:	29 85       	ldd	r18, Y+9	; 0x09
     cf4:	3a 85       	ldd	r19, Y+10	; 0x0a
     cf6:	22 30       	cpi	r18, 0x02	; 2
     cf8:	31 05       	cpc	r19, r1
     cfa:	89 f1       	breq	.+98     	; 0xd5e <DIO_u8SetPinDirection+0xc0>
     cfc:	89 85       	ldd	r24, Y+9	; 0x09
     cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     d00:	83 30       	cpi	r24, 0x03	; 3
     d02:	91 05       	cpc	r25, r1
     d04:	09 f4       	brne	.+2      	; 0xd08 <DIO_u8SetPinDirection+0x6a>
     d06:	40 c0       	rjmp	.+128    	; 0xd88 <DIO_u8SetPinDirection+0xea>
     d08:	54 c0       	rjmp	.+168    	; 0xdb2 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
     d0a:	aa e3       	ldi	r26, 0x3A	; 58
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	ea e3       	ldi	r30, 0x3A	; 58
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	48 2f       	mov	r20, r24
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	02 2e       	mov	r0, r18
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <DIO_u8SetPinDirection+0x8a>
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	0a 94       	dec	r0
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <DIO_u8SetPinDirection+0x86>
     d2c:	80 95       	com	r24
     d2e:	84 23       	and	r24, r20
     d30:	8c 93       	st	X, r24
     d32:	82 c1       	rjmp	.+772    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
     d34:	a7 e3       	ldi	r26, 0x37	; 55
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e7 e3       	ldi	r30, 0x37	; 55
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 2e       	mov	r0, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <DIO_u8SetPinDirection+0xb4>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <DIO_u8SetPinDirection+0xb0>
     d56:	80 95       	com	r24
     d58:	84 23       	and	r24, r20
     d5a:	8c 93       	st	X, r24
     d5c:	6d c1       	rjmp	.+730    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
     d5e:	a4 e3       	ldi	r26, 0x34	; 52
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e4 e3       	ldi	r30, 0x34	; 52
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_u8SetPinDirection+0xde>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_u8SetPinDirection+0xda>
     d80:	80 95       	com	r24
     d82:	84 23       	and	r24, r20
     d84:	8c 93       	st	X, r24
     d86:	58 c1       	rjmp	.+688    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
     d88:	a1 e3       	ldi	r26, 0x31	; 49
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	e1 e3       	ldi	r30, 0x31	; 49
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	48 2f       	mov	r20, r24
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 2e       	mov	r0, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <DIO_u8SetPinDirection+0x108>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <DIO_u8SetPinDirection+0x104>
     daa:	80 95       	com	r24
     dac:	84 23       	and	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	43 c1       	rjmp	.+646    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	89 83       	std	Y+1, r24	; 0x01
     db6:	40 c1       	rjmp	.+640    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
     db8:	8c 81       	ldd	r24, Y+4	; 0x04
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <DIO_u8SetPinDirection+0x122>
     dbe:	72 c0       	rjmp	.+228    	; 0xea4 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	38 87       	std	Y+8, r19	; 0x08
     dc8:	2f 83       	std	Y+7, r18	; 0x07
     dca:	8f 81       	ldd	r24, Y+7	; 0x07
     dcc:	98 85       	ldd	r25, Y+8	; 0x08
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	91 05       	cpc	r25, r1
     dd2:	49 f1       	breq	.+82     	; 0xe26 <DIO_u8SetPinDirection+0x188>
     dd4:	2f 81       	ldd	r18, Y+7	; 0x07
     dd6:	38 85       	ldd	r19, Y+8	; 0x08
     dd8:	22 30       	cpi	r18, 0x02	; 2
     dda:	31 05       	cpc	r19, r1
     ddc:	2c f4       	brge	.+10     	; 0xde8 <DIO_u8SetPinDirection+0x14a>
     dde:	8f 81       	ldd	r24, Y+7	; 0x07
     de0:	98 85       	ldd	r25, Y+8	; 0x08
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	61 f0       	breq	.+24     	; 0xdfe <DIO_u8SetPinDirection+0x160>
     de6:	5b c0       	rjmp	.+182    	; 0xe9e <DIO_u8SetPinDirection+0x200>
     de8:	2f 81       	ldd	r18, Y+7	; 0x07
     dea:	38 85       	ldd	r19, Y+8	; 0x08
     dec:	22 30       	cpi	r18, 0x02	; 2
     dee:	31 05       	cpc	r19, r1
     df0:	71 f1       	breq	.+92     	; 0xe4e <DIO_u8SetPinDirection+0x1b0>
     df2:	8f 81       	ldd	r24, Y+7	; 0x07
     df4:	98 85       	ldd	r25, Y+8	; 0x08
     df6:	83 30       	cpi	r24, 0x03	; 3
     df8:	91 05       	cpc	r25, r1
     dfa:	e9 f1       	breq	.+122    	; 0xe76 <DIO_u8SetPinDirection+0x1d8>
     dfc:	50 c0       	rjmp	.+160    	; 0xe9e <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
     dfe:	aa e3       	ldi	r26, 0x3A	; 58
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	ea e3       	ldi	r30, 0x3A	; 58
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 2e       	mov	r0, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <DIO_u8SetPinDirection+0x17e>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <DIO_u8SetPinDirection+0x17a>
     e20:	84 2b       	or	r24, r20
     e22:	8c 93       	st	X, r24
     e24:	09 c1       	rjmp	.+530    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
     e26:	a7 e3       	ldi	r26, 0x37	; 55
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e7 e3       	ldi	r30, 0x37	; 55
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 2e       	mov	r0, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_u8SetPinDirection+0x1a6>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_u8SetPinDirection+0x1a2>
     e48:	84 2b       	or	r24, r20
     e4a:	8c 93       	st	X, r24
     e4c:	f5 c0       	rjmp	.+490    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
     e4e:	a4 e3       	ldi	r26, 0x34	; 52
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e4 e3       	ldi	r30, 0x34	; 52
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 2e       	mov	r0, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_u8SetPinDirection+0x1ce>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	0a 94       	dec	r0
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_u8SetPinDirection+0x1ca>
     e70:	84 2b       	or	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	e1 c0       	rjmp	.+450    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
     e76:	a1 e3       	ldi	r26, 0x31	; 49
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e1 e3       	ldi	r30, 0x31	; 49
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_u8SetPinDirection+0x1f6>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_u8SetPinDirection+0x1f2>
     e98:	84 2b       	or	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	cd c0       	rjmp	.+410    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	ca c0       	rjmp	.+404    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_INPULLUP)
     ea4:	8c 81       	ldd	r24, Y+4	; 0x04
     ea6:	82 30       	cpi	r24, 0x02	; 2
     ea8:	09 f0       	breq	.+2      	; 0xeac <DIO_u8SetPinDirection+0x20e>
     eaa:	c1 c0       	rjmp	.+386    	; 0x102e <DIO_u8SetPinDirection+0x390>
			{
				switch(Copy_u8Port)
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	3e 83       	std	Y+6, r19	; 0x06
     eb4:	2d 83       	std	Y+5, r18	; 0x05
     eb6:	8d 81       	ldd	r24, Y+5	; 0x05
     eb8:	9e 81       	ldd	r25, Y+6	; 0x06
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	91 05       	cpc	r25, r1
     ebe:	09 f4       	brne	.+2      	; 0xec2 <DIO_u8SetPinDirection+0x224>
     ec0:	3e c0       	rjmp	.+124    	; 0xf3e <DIO_u8SetPinDirection+0x2a0>
     ec2:	2d 81       	ldd	r18, Y+5	; 0x05
     ec4:	3e 81       	ldd	r19, Y+6	; 0x06
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	2c f4       	brge	.+10     	; 0xed6 <DIO_u8SetPinDirection+0x238>
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	71 f0       	breq	.+28     	; 0xef0 <DIO_u8SetPinDirection+0x252>
     ed4:	a9 c0       	rjmp	.+338    	; 0x1028 <DIO_u8SetPinDirection+0x38a>
     ed6:	2d 81       	ldd	r18, Y+5	; 0x05
     ed8:	3e 81       	ldd	r19, Y+6	; 0x06
     eda:	22 30       	cpi	r18, 0x02	; 2
     edc:	31 05       	cpc	r19, r1
     ede:	09 f4       	brne	.+2      	; 0xee2 <DIO_u8SetPinDirection+0x244>
     ee0:	55 c0       	rjmp	.+170    	; 0xf8c <DIO_u8SetPinDirection+0x2ee>
     ee2:	8d 81       	ldd	r24, Y+5	; 0x05
     ee4:	9e 81       	ldd	r25, Y+6	; 0x06
     ee6:	83 30       	cpi	r24, 0x03	; 3
     ee8:	91 05       	cpc	r25, r1
     eea:	09 f4       	brne	.+2      	; 0xeee <DIO_u8SetPinDirection+0x250>
     eec:	76 c0       	rjmp	.+236    	; 0xfda <DIO_u8SetPinDirection+0x33c>
     eee:	9c c0       	rjmp	.+312    	; 0x1028 <DIO_u8SetPinDirection+0x38a>
				{
				case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); SET_BIT(PORTA,Copy_u8Pin); break;
     ef0:	aa e3       	ldi	r26, 0x3A	; 58
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	ea e3       	ldi	r30, 0x3A	; 58
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	48 2f       	mov	r20, r24
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_u8SetPinDirection+0x26e>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	2a 95       	dec	r18
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_u8SetPinDirection+0x26a>
     f10:	80 95       	com	r24
     f12:	84 23       	and	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	ab e3       	ldi	r26, 0x3B	; 59
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	eb e3       	ldi	r30, 0x3B	; 59
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_u8SetPinDirection+0x296>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_u8SetPinDirection+0x292>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	7d c0       	rjmp	.+250    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
				case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); SET_BIT(PORTB,Copy_u8Pin); break;
     f3e:	a7 e3       	ldi	r26, 0x37	; 55
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e7 e3       	ldi	r30, 0x37	; 55
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_u8SetPinDirection+0x2bc>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	2a 95       	dec	r18
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_u8SetPinDirection+0x2b8>
     f5e:	80 95       	com	r24
     f60:	84 23       	and	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	a8 e3       	ldi	r26, 0x38	; 56
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e8 e3       	ldi	r30, 0x38	; 56
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <DIO_u8SetPinDirection+0x2e4>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <DIO_u8SetPinDirection+0x2e0>
     f86:	84 2b       	or	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	56 c0       	rjmp	.+172    	; 0x1038 <DIO_u8SetPinDirection+0x39a>
				case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); SET_BIT(PORTC,Copy_u8Pin); break;
     f8c:	a4 e3       	ldi	r26, 0x34	; 52
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e4 e3       	ldi	r30, 0x34	; 52
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <DIO_u8SetPinDirection+0x30a>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	2a 95       	dec	r18
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <DIO_u8SetPinDirection+0x306>
     fac:	80 95       	com	r24
     fae:	84 23       	and	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	a5 e3       	ldi	r26, 0x35	; 53
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e5 e3       	ldi	r30, 0x35	; 53
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <DIO_u8SetPinDirection+0x332>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <DIO_u8SetPinDirection+0x32e>
     fd4:	84 2b       	or	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	2f c0       	rjmp	.+94     	; 0x1038 <DIO_u8SetPinDirection+0x39a>
				case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); SET_BIT(PORTD,Copy_u8Pin); break;
     fda:	a1 e3       	ldi	r26, 0x31	; 49
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e1 e3       	ldi	r30, 0x31	; 49
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_u8SetPinDirection+0x358>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	2a 95       	dec	r18
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_u8SetPinDirection+0x354>
     ffa:	80 95       	com	r24
     ffc:	84 23       	and	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	a2 e3       	ldi	r26, 0x32	; 50
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e2 e3       	ldi	r30, 0x32	; 50
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_u8SetPinDirection+0x380>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_u8SetPinDirection+0x37c>
    1022:	84 2b       	or	r24, r20
    1024:	8c 93       	st	X, r24
    1026:	08 c0       	rjmp	.+16     	; 0x1038 <DIO_u8SetPinDirection+0x39a>
				default: Local_u8ErrorState=1; break;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	05 c0       	rjmp	.+10     	; 0x1038 <DIO_u8SetPinDirection+0x39a>
				}
			}
		else
		{
			Local_u8ErrorState=1;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_u8SetPinDirection+0x39a>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1038:	89 81       	ldd	r24, Y+1	; 0x01
}
    103a:	2a 96       	adiw	r28, 0x0a	; 10
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	00 d0       	rcall	.+0      	; 0x1052 <DIO_u8SetPortDirection+0x6>
    1052:	00 d0       	rcall	.+0      	; 0x1054 <DIO_u8SetPortDirection+0x8>
    1054:	0f 92       	push	r0
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	8a 83       	std	Y+2, r24	; 0x02
    105c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    105e:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	3d 83       	std	Y+5, r19	; 0x05
    1068:	2c 83       	std	Y+4, r18	; 0x04
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	9d 81       	ldd	r25, Y+5	; 0x05
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	91 05       	cpc	r25, r1
    1072:	d1 f0       	breq	.+52     	; 0x10a8 <DIO_u8SetPortDirection+0x5c>
    1074:	2c 81       	ldd	r18, Y+4	; 0x04
    1076:	3d 81       	ldd	r19, Y+5	; 0x05
    1078:	22 30       	cpi	r18, 0x02	; 2
    107a:	31 05       	cpc	r19, r1
    107c:	2c f4       	brge	.+10     	; 0x1088 <DIO_u8SetPortDirection+0x3c>
    107e:	8c 81       	ldd	r24, Y+4	; 0x04
    1080:	9d 81       	ldd	r25, Y+5	; 0x05
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	61 f0       	breq	.+24     	; 0x109e <DIO_u8SetPortDirection+0x52>
    1086:	1f c0       	rjmp	.+62     	; 0x10c6 <DIO_u8SetPortDirection+0x7a>
    1088:	2c 81       	ldd	r18, Y+4	; 0x04
    108a:	3d 81       	ldd	r19, Y+5	; 0x05
    108c:	22 30       	cpi	r18, 0x02	; 2
    108e:	31 05       	cpc	r19, r1
    1090:	81 f0       	breq	.+32     	; 0x10b2 <DIO_u8SetPortDirection+0x66>
    1092:	8c 81       	ldd	r24, Y+4	; 0x04
    1094:	9d 81       	ldd	r25, Y+5	; 0x05
    1096:	83 30       	cpi	r24, 0x03	; 3
    1098:	91 05       	cpc	r25, r1
    109a:	81 f0       	breq	.+32     	; 0x10bc <DIO_u8SetPortDirection+0x70>
    109c:	14 c0       	rjmp	.+40     	; 0x10c6 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    109e:	ea e3       	ldi	r30, 0x3A	; 58
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	80 83       	st	Z, r24
    10a6:	11 c0       	rjmp	.+34     	; 0x10ca <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    10a8:	e7 e3       	ldi	r30, 0x37	; 55
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	80 83       	st	Z, r24
    10b0:	0c c0       	rjmp	.+24     	; 0x10ca <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    10b2:	e4 e3       	ldi	r30, 0x34	; 52
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	80 83       	st	Z, r24
    10ba:	07 c0       	rjmp	.+14     	; 0x10ca <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    10bc:	e1 e3       	ldi	r30, 0x31	; 49
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	80 83       	st	Z, r24
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	28 97       	sbiw	r28, 0x08	; 8
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	8a 83       	std	Y+2, r24	; 0x02
    10f2:	6b 83       	std	Y+3, r22	; 0x03
    10f4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    10f6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	88 30       	cpi	r24, 0x08	; 8
    10fc:	08 f0       	brcs	.+2      	; 0x1100 <DIO_u8SetPinValue+0x24>
    10fe:	f4 c0       	rjmp	.+488    	; 0x12e8 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	88 23       	and	r24, r24
    1104:	09 f0       	breq	.+2      	; 0x1108 <DIO_u8SetPinValue+0x2c>
    1106:	77 c0       	rjmp	.+238    	; 0x11f6 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	38 87       	std	Y+8, r19	; 0x08
    1110:	2f 83       	std	Y+7, r18	; 0x07
    1112:	8f 81       	ldd	r24, Y+7	; 0x07
    1114:	98 85       	ldd	r25, Y+8	; 0x08
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	91 05       	cpc	r25, r1
    111a:	59 f1       	breq	.+86     	; 0x1172 <DIO_u8SetPinValue+0x96>
    111c:	2f 81       	ldd	r18, Y+7	; 0x07
    111e:	38 85       	ldd	r19, Y+8	; 0x08
    1120:	22 30       	cpi	r18, 0x02	; 2
    1122:	31 05       	cpc	r19, r1
    1124:	2c f4       	brge	.+10     	; 0x1130 <DIO_u8SetPinValue+0x54>
    1126:	8f 81       	ldd	r24, Y+7	; 0x07
    1128:	98 85       	ldd	r25, Y+8	; 0x08
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	69 f0       	breq	.+26     	; 0x1148 <DIO_u8SetPinValue+0x6c>
    112e:	60 c0       	rjmp	.+192    	; 0x11f0 <DIO_u8SetPinValue+0x114>
    1130:	2f 81       	ldd	r18, Y+7	; 0x07
    1132:	38 85       	ldd	r19, Y+8	; 0x08
    1134:	22 30       	cpi	r18, 0x02	; 2
    1136:	31 05       	cpc	r19, r1
    1138:	89 f1       	breq	.+98     	; 0x119c <DIO_u8SetPinValue+0xc0>
    113a:	8f 81       	ldd	r24, Y+7	; 0x07
    113c:	98 85       	ldd	r25, Y+8	; 0x08
    113e:	83 30       	cpi	r24, 0x03	; 3
    1140:	91 05       	cpc	r25, r1
    1142:	09 f4       	brne	.+2      	; 0x1146 <DIO_u8SetPinValue+0x6a>
    1144:	40 c0       	rjmp	.+128    	; 0x11c6 <DIO_u8SetPinValue+0xea>
    1146:	54 c0       	rjmp	.+168    	; 0x11f0 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1148:	ab e3       	ldi	r26, 0x3B	; 59
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	eb e3       	ldi	r30, 0x3B	; 59
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_u8SetPinValue+0x8a>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_u8SetPinValue+0x86>
    116a:	80 95       	com	r24
    116c:	84 23       	and	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	bd c0       	rjmp	.+378    	; 0x12ec <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1172:	a8 e3       	ldi	r26, 0x38	; 56
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e8 e3       	ldi	r30, 0x38	; 56
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_u8SetPinValue+0xb4>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_u8SetPinValue+0xb0>
    1194:	80 95       	com	r24
    1196:	84 23       	and	r24, r20
    1198:	8c 93       	st	X, r24
    119a:	a8 c0       	rjmp	.+336    	; 0x12ec <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    119c:	a5 e3       	ldi	r26, 0x35	; 53
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e5 e3       	ldi	r30, 0x35	; 53
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_u8SetPinValue+0xde>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <DIO_u8SetPinValue+0xda>
    11be:	80 95       	com	r24
    11c0:	84 23       	and	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	93 c0       	rjmp	.+294    	; 0x12ec <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    11c6:	a2 e3       	ldi	r26, 0x32	; 50
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e2 e3       	ldi	r30, 0x32	; 50
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <DIO_u8SetPinValue+0x108>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <DIO_u8SetPinValue+0x104>
    11e8:	80 95       	com	r24
    11ea:	84 23       	and	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	7e c0       	rjmp	.+252    	; 0x12ec <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	7b c0       	rjmp	.+246    	; 0x12ec <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	09 f0       	breq	.+2      	; 0x11fe <DIO_u8SetPinValue+0x122>
    11fc:	72 c0       	rjmp	.+228    	; 0x12e2 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3e 83       	std	Y+6, r19	; 0x06
    1206:	2d 83       	std	Y+5, r18	; 0x05
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
    120a:	9e 81       	ldd	r25, Y+6	; 0x06
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	91 05       	cpc	r25, r1
    1210:	49 f1       	breq	.+82     	; 0x1264 <DIO_u8SetPinValue+0x188>
    1212:	2d 81       	ldd	r18, Y+5	; 0x05
    1214:	3e 81       	ldd	r19, Y+6	; 0x06
    1216:	22 30       	cpi	r18, 0x02	; 2
    1218:	31 05       	cpc	r19, r1
    121a:	2c f4       	brge	.+10     	; 0x1226 <DIO_u8SetPinValue+0x14a>
    121c:	8d 81       	ldd	r24, Y+5	; 0x05
    121e:	9e 81       	ldd	r25, Y+6	; 0x06
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	61 f0       	breq	.+24     	; 0x123c <DIO_u8SetPinValue+0x160>
    1224:	5b c0       	rjmp	.+182    	; 0x12dc <DIO_u8SetPinValue+0x200>
    1226:	2d 81       	ldd	r18, Y+5	; 0x05
    1228:	3e 81       	ldd	r19, Y+6	; 0x06
    122a:	22 30       	cpi	r18, 0x02	; 2
    122c:	31 05       	cpc	r19, r1
    122e:	71 f1       	breq	.+92     	; 0x128c <DIO_u8SetPinValue+0x1b0>
    1230:	8d 81       	ldd	r24, Y+5	; 0x05
    1232:	9e 81       	ldd	r25, Y+6	; 0x06
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	e9 f1       	breq	.+122    	; 0x12b4 <DIO_u8SetPinValue+0x1d8>
    123a:	50 c0       	rjmp	.+160    	; 0x12dc <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    123c:	ab e3       	ldi	r26, 0x3B	; 59
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	eb e3       	ldi	r30, 0x3B	; 59
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <DIO_u8SetPinValue+0x17e>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <DIO_u8SetPinValue+0x17a>
    125e:	84 2b       	or	r24, r20
    1260:	8c 93       	st	X, r24
    1262:	44 c0       	rjmp	.+136    	; 0x12ec <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1264:	a8 e3       	ldi	r26, 0x38	; 56
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e8 e3       	ldi	r30, 0x38	; 56
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 2e       	mov	r0, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <DIO_u8SetPinValue+0x1a6>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <DIO_u8SetPinValue+0x1a2>
    1286:	84 2b       	or	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	30 c0       	rjmp	.+96     	; 0x12ec <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    128c:	a5 e3       	ldi	r26, 0x35	; 53
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e5 e3       	ldi	r30, 0x35	; 53
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_u8SetPinValue+0x1ce>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_u8SetPinValue+0x1ca>
    12ae:	84 2b       	or	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	1c c0       	rjmp	.+56     	; 0x12ec <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    12b4:	a2 e3       	ldi	r26, 0x32	; 50
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e2 e3       	ldi	r30, 0x32	; 50
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_u8SetPinValue+0x1f6>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_u8SetPinValue+0x1f2>
    12d6:	84 2b       	or	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	08 c0       	rjmp	.+16     	; 0x12ec <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	05 c0       	rjmp	.+10     	; 0x12ec <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ee:	28 96       	adiw	r28, 0x08	; 8
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	00 d0       	rcall	.+0      	; 0x1306 <DIO_u8SetPortValue+0x6>
    1306:	00 d0       	rcall	.+0      	; 0x1308 <DIO_u8SetPortValue+0x8>
    1308:	0f 92       	push	r0
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	8a 83       	std	Y+2, r24	; 0x02
    1310:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1312:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	3d 83       	std	Y+5, r19	; 0x05
    131c:	2c 83       	std	Y+4, r18	; 0x04
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	9d 81       	ldd	r25, Y+5	; 0x05
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	91 05       	cpc	r25, r1
    1326:	d1 f0       	breq	.+52     	; 0x135c <DIO_u8SetPortValue+0x5c>
    1328:	2c 81       	ldd	r18, Y+4	; 0x04
    132a:	3d 81       	ldd	r19, Y+5	; 0x05
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	2c f4       	brge	.+10     	; 0x133c <DIO_u8SetPortValue+0x3c>
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	9d 81       	ldd	r25, Y+5	; 0x05
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	61 f0       	breq	.+24     	; 0x1352 <DIO_u8SetPortValue+0x52>
    133a:	1f c0       	rjmp	.+62     	; 0x137a <DIO_u8SetPortValue+0x7a>
    133c:	2c 81       	ldd	r18, Y+4	; 0x04
    133e:	3d 81       	ldd	r19, Y+5	; 0x05
    1340:	22 30       	cpi	r18, 0x02	; 2
    1342:	31 05       	cpc	r19, r1
    1344:	81 f0       	breq	.+32     	; 0x1366 <DIO_u8SetPortValue+0x66>
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	83 30       	cpi	r24, 0x03	; 3
    134c:	91 05       	cpc	r25, r1
    134e:	81 f0       	breq	.+32     	; 0x1370 <DIO_u8SetPortValue+0x70>
    1350:	14 c0       	rjmp	.+40     	; 0x137a <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    1352:	eb e3       	ldi	r30, 0x3B	; 59
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	80 83       	st	Z, r24
    135a:	11 c0       	rjmp	.+34     	; 0x137e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    135c:	e8 e3       	ldi	r30, 0x38	; 56
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	80 83       	st	Z, r24
    1364:	0c c0       	rjmp	.+24     	; 0x137e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    1366:	e5 e3       	ldi	r30, 0x35	; 53
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	80 83       	st	Z, r24
    136e:	07 c0       	rjmp	.+14     	; 0x137e <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    1370:	e2 e3       	ldi	r30, 0x32	; 50
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	80 83       	st	Z, r24
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    137e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <DIO_u8TogglePinValue>:

u8 DIO_u8TogglePinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	00 d0       	rcall	.+0      	; 0x1396 <DIO_u8TogglePinValue+0x6>
    1396:	00 d0       	rcall	.+0      	; 0x1398 <DIO_u8TogglePinValue+0x8>
    1398:	0f 92       	push	r0
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	8a 83       	std	Y+2, r24	; 0x02
    13a0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    13a2:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	3d 83       	std	Y+5, r19	; 0x05
    13ac:	2c 83       	std	Y+4, r18	; 0x04
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	9d 81       	ldd	r25, Y+5	; 0x05
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	91 05       	cpc	r25, r1
    13b6:	49 f1       	breq	.+82     	; 0x140a <DIO_u8TogglePinValue+0x7a>
    13b8:	2c 81       	ldd	r18, Y+4	; 0x04
    13ba:	3d 81       	ldd	r19, Y+5	; 0x05
    13bc:	22 30       	cpi	r18, 0x02	; 2
    13be:	31 05       	cpc	r19, r1
    13c0:	2c f4       	brge	.+10     	; 0x13cc <DIO_u8TogglePinValue+0x3c>
    13c2:	8c 81       	ldd	r24, Y+4	; 0x04
    13c4:	9d 81       	ldd	r25, Y+5	; 0x05
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	61 f0       	breq	.+24     	; 0x13e2 <DIO_u8TogglePinValue+0x52>
    13ca:	5b c0       	rjmp	.+182    	; 0x1482 <DIO_u8TogglePinValue+0xf2>
    13cc:	2c 81       	ldd	r18, Y+4	; 0x04
    13ce:	3d 81       	ldd	r19, Y+5	; 0x05
    13d0:	22 30       	cpi	r18, 0x02	; 2
    13d2:	31 05       	cpc	r19, r1
    13d4:	71 f1       	breq	.+92     	; 0x1432 <DIO_u8TogglePinValue+0xa2>
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
    13d8:	9d 81       	ldd	r25, Y+5	; 0x05
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	91 05       	cpc	r25, r1
    13de:	e9 f1       	breq	.+122    	; 0x145a <DIO_u8TogglePinValue+0xca>
    13e0:	50 c0       	rjmp	.+160    	; 0x1482 <DIO_u8TogglePinValue+0xf2>
	{
	case DIO_u8PORTA: TOOGLE_BIT(PORTA,Copy_u8Pin); break;
    13e2:	ab e3       	ldi	r26, 0x3B	; 59
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	eb e3       	ldi	r30, 0x3B	; 59
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_u8TogglePinValue+0x70>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_u8TogglePinValue+0x6c>
    1404:	84 27       	eor	r24, r20
    1406:	8c 93       	st	X, r24
    1408:	3e c0       	rjmp	.+124    	; 0x1486 <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTB: TOOGLE_BIT(PORTB,Copy_u8Pin); break;
    140a:	a8 e3       	ldi	r26, 0x38	; 56
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e8 e3       	ldi	r30, 0x38	; 56
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_u8TogglePinValue+0x98>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <DIO_u8TogglePinValue+0x94>
    142c:	84 27       	eor	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	2a c0       	rjmp	.+84     	; 0x1486 <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTC: TOOGLE_BIT(PORTC,Copy_u8Pin); break;
    1432:	a5 e3       	ldi	r26, 0x35	; 53
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e5 e3       	ldi	r30, 0x35	; 53
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	48 2f       	mov	r20, r24
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	02 2e       	mov	r0, r18
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <DIO_u8TogglePinValue+0xc0>
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	0a 94       	dec	r0
    1452:	e2 f7       	brpl	.-8      	; 0x144c <DIO_u8TogglePinValue+0xbc>
    1454:	84 27       	eor	r24, r20
    1456:	8c 93       	st	X, r24
    1458:	16 c0       	rjmp	.+44     	; 0x1486 <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTD: TOOGLE_BIT(PORTD,Copy_u8Pin); break;
    145a:	a2 e3       	ldi	r26, 0x32	; 50
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e2 e3       	ldi	r30, 0x32	; 50
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <DIO_u8TogglePinValue+0xe8>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <DIO_u8TogglePinValue+0xe4>
    147c:	84 27       	eor	r24, r20
    147e:	8c 93       	st	X, r24
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_u8TogglePinValue+0xf6>
	default: Local_u8ErrorState=1;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1486:	89 81       	ldd	r24, Y+1	; 0x01
}
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	27 97       	sbiw	r28, 0x07	; 7
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	8a 83       	std	Y+2, r24	; 0x02
    14ae:	6b 83       	std	Y+3, r22	; 0x03
    14b0:	5d 83       	std	Y+5, r21	; 0x05
    14b2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    14b4:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<= DIO_u8PIN7))
    14b6:	8c 81       	ldd	r24, Y+4	; 0x04
    14b8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <DIO_u8GetPinValue+0x28>
    14be:	78 c0       	rjmp	.+240    	; 0x15b0 <DIO_u8GetPinValue+0x118>
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	88 30       	cpi	r24, 0x08	; 8
    14c4:	08 f0       	brcs	.+2      	; 0x14c8 <DIO_u8GetPinValue+0x30>
    14c6:	74 c0       	rjmp	.+232    	; 0x15b0 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	3f 83       	std	Y+7, r19	; 0x07
    14d0:	2e 83       	std	Y+6, r18	; 0x06
    14d2:	4e 81       	ldd	r20, Y+6	; 0x06
    14d4:	5f 81       	ldd	r21, Y+7	; 0x07
    14d6:	41 30       	cpi	r20, 0x01	; 1
    14d8:	51 05       	cpc	r21, r1
    14da:	59 f1       	breq	.+86     	; 0x1532 <DIO_u8GetPinValue+0x9a>
    14dc:	8e 81       	ldd	r24, Y+6	; 0x06
    14de:	9f 81       	ldd	r25, Y+7	; 0x07
    14e0:	82 30       	cpi	r24, 0x02	; 2
    14e2:	91 05       	cpc	r25, r1
    14e4:	34 f4       	brge	.+12     	; 0x14f2 <DIO_u8GetPinValue+0x5a>
    14e6:	2e 81       	ldd	r18, Y+6	; 0x06
    14e8:	3f 81       	ldd	r19, Y+7	; 0x07
    14ea:	21 15       	cp	r18, r1
    14ec:	31 05       	cpc	r19, r1
    14ee:	69 f0       	breq	.+26     	; 0x150a <DIO_u8GetPinValue+0x72>
    14f0:	5c c0       	rjmp	.+184    	; 0x15aa <DIO_u8GetPinValue+0x112>
    14f2:	4e 81       	ldd	r20, Y+6	; 0x06
    14f4:	5f 81       	ldd	r21, Y+7	; 0x07
    14f6:	42 30       	cpi	r20, 0x02	; 2
    14f8:	51 05       	cpc	r21, r1
    14fa:	79 f1       	breq	.+94     	; 0x155a <DIO_u8GetPinValue+0xc2>
    14fc:	8e 81       	ldd	r24, Y+6	; 0x06
    14fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1500:	83 30       	cpi	r24, 0x03	; 3
    1502:	91 05       	cpc	r25, r1
    1504:	09 f4       	brne	.+2      	; 0x1508 <DIO_u8GetPinValue+0x70>
    1506:	3d c0       	rjmp	.+122    	; 0x1582 <DIO_u8GetPinValue+0xea>
    1508:	50 c0       	rjmp	.+160    	; 0x15aa <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA : *Copy_pu8Value= GET_BIT(PINA , Copy_u8Pin); break;
    150a:	e9 e3       	ldi	r30, 0x39	; 57
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	88 2f       	mov	r24, r24
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	a9 01       	movw	r20, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <DIO_u8GetPinValue+0x8a>
    151e:	55 95       	asr	r21
    1520:	47 95       	ror	r20
    1522:	8a 95       	dec	r24
    1524:	e2 f7       	brpl	.-8      	; 0x151e <DIO_u8GetPinValue+0x86>
    1526:	ca 01       	movw	r24, r20
    1528:	81 70       	andi	r24, 0x01	; 1
    152a:	ec 81       	ldd	r30, Y+4	; 0x04
    152c:	fd 81       	ldd	r31, Y+5	; 0x05
    152e:	80 83       	st	Z, r24
    1530:	41 c0       	rjmp	.+130    	; 0x15b4 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB : *Copy_pu8Value= GET_BIT(PINB , Copy_u8Pin); break;
    1532:	e6 e3       	ldi	r30, 0x36	; 54
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	a9 01       	movw	r20, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <DIO_u8GetPinValue+0xb2>
    1546:	55 95       	asr	r21
    1548:	47 95       	ror	r20
    154a:	8a 95       	dec	r24
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <DIO_u8GetPinValue+0xae>
    154e:	ca 01       	movw	r24, r20
    1550:	81 70       	andi	r24, 0x01	; 1
    1552:	ec 81       	ldd	r30, Y+4	; 0x04
    1554:	fd 81       	ldd	r31, Y+5	; 0x05
    1556:	80 83       	st	Z, r24
    1558:	2d c0       	rjmp	.+90     	; 0x15b4 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC : *Copy_pu8Value= GET_BIT(PINC , Copy_u8Pin); break;
    155a:	e3 e3       	ldi	r30, 0x33	; 51
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	88 2f       	mov	r24, r24
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	a9 01       	movw	r20, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <DIO_u8GetPinValue+0xda>
    156e:	55 95       	asr	r21
    1570:	47 95       	ror	r20
    1572:	8a 95       	dec	r24
    1574:	e2 f7       	brpl	.-8      	; 0x156e <DIO_u8GetPinValue+0xd6>
    1576:	ca 01       	movw	r24, r20
    1578:	81 70       	andi	r24, 0x01	; 1
    157a:	ec 81       	ldd	r30, Y+4	; 0x04
    157c:	fd 81       	ldd	r31, Y+5	; 0x05
    157e:	80 83       	st	Z, r24
    1580:	19 c0       	rjmp	.+50     	; 0x15b4 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD : *Copy_pu8Value= GET_BIT(PIND , Copy_u8Pin); break;
    1582:	e0 e3       	ldi	r30, 0x30	; 48
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	88 2f       	mov	r24, r24
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	a9 01       	movw	r20, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <DIO_u8GetPinValue+0x102>
    1596:	55 95       	asr	r21
    1598:	47 95       	ror	r20
    159a:	8a 95       	dec	r24
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <DIO_u8GetPinValue+0xfe>
    159e:	ca 01       	movw	r24, r20
    15a0:	81 70       	andi	r24, 0x01	; 1
    15a2:	ec 81       	ldd	r30, Y+4	; 0x04
    15a4:	fd 81       	ldd	r31, Y+5	; 0x05
    15a6:	80 83       	st	Z, r24
    15a8:	05 c0       	rjmp	.+10     	; 0x15b4 <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=1;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b6:	27 96       	adiw	r28, 0x07	; 7
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port , u8* Copy_pu8Value)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	27 97       	sbiw	r28, 0x07	; 7
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
    15dc:	8b 83       	std	Y+3, r24	; 0x03
    15de:	7d 83       	std	Y+5, r23	; 0x05
    15e0:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = 0;
    15e2:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter;
	if(Copy_pu8Value != NULL)
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	9d 81       	ldd	r25, Y+5	; 0x05
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	09 f4       	brne	.+2      	; 0x15ee <DIO_u8GetPortValue+0x26>
    15ec:	3e c0       	rjmp	.+124    	; 0x166a <DIO_u8GetPortValue+0xa2>
	{
		switch(Copy_u8Port)
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	3f 83       	std	Y+7, r19	; 0x07
    15f6:	2e 83       	std	Y+6, r18	; 0x06
    15f8:	8e 81       	ldd	r24, Y+6	; 0x06
    15fa:	9f 81       	ldd	r25, Y+7	; 0x07
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	91 05       	cpc	r25, r1
    1600:	e1 f0       	breq	.+56     	; 0x163a <DIO_u8GetPortValue+0x72>
    1602:	2e 81       	ldd	r18, Y+6	; 0x06
    1604:	3f 81       	ldd	r19, Y+7	; 0x07
    1606:	22 30       	cpi	r18, 0x02	; 2
    1608:	31 05       	cpc	r19, r1
    160a:	2c f4       	brge	.+10     	; 0x1616 <DIO_u8GetPortValue+0x4e>
    160c:	8e 81       	ldd	r24, Y+6	; 0x06
    160e:	9f 81       	ldd	r25, Y+7	; 0x07
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	61 f0       	breq	.+24     	; 0x162c <DIO_u8GetPortValue+0x64>
    1614:	27 c0       	rjmp	.+78     	; 0x1664 <DIO_u8GetPortValue+0x9c>
    1616:	2e 81       	ldd	r18, Y+6	; 0x06
    1618:	3f 81       	ldd	r19, Y+7	; 0x07
    161a:	22 30       	cpi	r18, 0x02	; 2
    161c:	31 05       	cpc	r19, r1
    161e:	a1 f0       	breq	.+40     	; 0x1648 <DIO_u8GetPortValue+0x80>
    1620:	8e 81       	ldd	r24, Y+6	; 0x06
    1622:	9f 81       	ldd	r25, Y+7	; 0x07
    1624:	83 30       	cpi	r24, 0x03	; 3
    1626:	91 05       	cpc	r25, r1
    1628:	b1 f0       	breq	.+44     	; 0x1656 <DIO_u8GetPortValue+0x8e>
    162a:	1c c0       	rjmp	.+56     	; 0x1664 <DIO_u8GetPortValue+0x9c>
		{
		case DIO_u8PORTA: *Copy_pu8Value = PINA; break;
    162c:	e9 e3       	ldi	r30, 0x39	; 57
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	ec 81       	ldd	r30, Y+4	; 0x04
    1634:	fd 81       	ldd	r31, Y+5	; 0x05
    1636:	80 83       	st	Z, r24
    1638:	1a c0       	rjmp	.+52     	; 0x166e <DIO_u8GetPortValue+0xa6>
		case DIO_u8PORTB: *Copy_pu8Value = PINB; break;
    163a:	e6 e3       	ldi	r30, 0x36	; 54
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	ec 81       	ldd	r30, Y+4	; 0x04
    1642:	fd 81       	ldd	r31, Y+5	; 0x05
    1644:	80 83       	st	Z, r24
    1646:	13 c0       	rjmp	.+38     	; 0x166e <DIO_u8GetPortValue+0xa6>
		case DIO_u8PORTC: *Copy_pu8Value = PINC; break;
    1648:	e3 e3       	ldi	r30, 0x33	; 51
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	ec 81       	ldd	r30, Y+4	; 0x04
    1650:	fd 81       	ldd	r31, Y+5	; 0x05
    1652:	80 83       	st	Z, r24
    1654:	0c c0       	rjmp	.+24     	; 0x166e <DIO_u8GetPortValue+0xa6>
		case DIO_u8PORTD: *Copy_pu8Value = PIND; break;
    1656:	e0 e3       	ldi	r30, 0x30	; 48
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	ec 81       	ldd	r30, Y+4	; 0x04
    165e:	fd 81       	ldd	r31, Y+5	; 0x05
    1660:	80 83       	st	Z, r24
    1662:	05 c0       	rjmp	.+10     	; 0x166e <DIO_u8GetPortValue+0xa6>
		default: Local_u8ErrorState = 1; break;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	8a 83       	std	Y+2, r24	; 0x02
    1668:	02 c0       	rjmp	.+4      	; 0x166e <DIO_u8GetPortValue+0xa6>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1670:	27 96       	adiw	r28, 0x07	; 7
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	08 95       	ret

00001682 <EXTI_voidInt0Init>:
void (*EXTI_pvInt1Func)(void)=NULL;
void (*EXTI_pvInt2Func)(void)=NULL;


void EXTI_voidInt0Init(void)
{
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
#elif INT0_SENSE== ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);

#elif INT0_SENSE== FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
    168a:	a5 e5       	ldi	r26, 0x55	; 85
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e5 e5       	ldi	r30, 0x55	; 85
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	8e 7f       	andi	r24, 0xFE	; 254
    1696:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
    1698:	a5 e5       	ldi	r26, 0x55	; 85
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e5 e5       	ldi	r30, 0x55	; 85
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	82 60       	ori	r24, 0x02	; 2
    16a4:	8c 93       	st	X, r24
#error "Wrong INT0_SENSE configuration option"
#endif

	/*Check peripheral interrupt enable initial state*/
#if INT0_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
    16a6:	ab e5       	ldi	r26, 0x5B	; 91
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	eb e5       	ldi	r30, 0x5B	; 91
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	80 64       	ori	r24, 0x40	; 64
    16b2:	8c 93       	st	X, r24
#elif INT0_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT0);
#else
#error " Wrong INT0_INITIAL_STATE configuration option"
#endif
}
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <EXTI_voidInt1Init>:


void EXTI_voidInt1Init(void)
{
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
#elif INT1_SENSE == FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
	SET_BIT(MCUCR,MCUCR_ISC11);

#elif INT1_SENSE == RISING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC10);
    16c2:	a5 e5       	ldi	r26, 0x55	; 85
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e5 e5       	ldi	r30, 0x55	; 85
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	84 60       	ori	r24, 0x04	; 4
    16ce:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
    16d0:	a5 e5       	ldi	r26, 0x55	; 85
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e5 e5       	ldi	r30, 0x55	; 85
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	88 60       	ori	r24, 0x08	; 8
    16dc:	8c 93       	st	X, r24
#else
#error "Wrong INT1_SENSE configuration option"
#endif

#if INT1_INITIAL_STATE  == ENABLED
	SET_BIT(GICR,GICR_INT1);
    16de:	ab e5       	ldi	r26, 0x5B	; 91
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	eb e5       	ldi	r30, 0x5B	; 91
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	80 68       	ori	r24, 0x80	; 128
    16ea:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT1);

#else
#error " Wrong INT1_INITIAL_STATE configuration option"
#endif
}
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <EXTI_voidInt2Init>:

void EXTI_voidInt2Init(void)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
#if INT2_SENSE == FALLING_EDGE
	CLR_BIT(MCUCSR,MCUCSR_INT2);
    16fa:	a4 e5       	ldi	r26, 0x54	; 84
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e4 e5       	ldi	r30, 0x54	; 84
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	8f 7b       	andi	r24, 0xBF	; 191
    1706:	8c 93       	st	X, r24
#else
#error "Wrong INT2_SENSE configuration option"
#endif

#if INT2_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT2);
    1708:	ab e5       	ldi	r26, 0x5B	; 91
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	eb e5       	ldi	r30, 0x5B	; 91
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	80 62       	ori	r24, 0x20	; 32
    1714:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT2);

#else
#error " Wrong INT2_INITIAL_STATE configuration option"
#endif
}
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <EXTI_u8Int0SetSenseControl>:


u8 EXTI_u8Int0SetSenseControl(u8 Copy_u8Sense)
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	00 d0       	rcall	.+0      	; 0x1722 <EXTI_u8Int0SetSenseControl+0x6>
    1722:	00 d0       	rcall	.+0      	; 0x1724 <EXTI_u8Int0SetSenseControl+0x8>
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState= OK;
    172a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Sense)
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	3c 83       	std	Y+4, r19	; 0x04
    1734:	2b 83       	std	Y+3, r18	; 0x03
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	9c 81       	ldd	r25, Y+4	; 0x04
    173a:	82 30       	cpi	r24, 0x02	; 2
    173c:	91 05       	cpc	r25, r1
    173e:	29 f1       	breq	.+74     	; 0x178a <EXTI_u8Int0SetSenseControl+0x6e>
    1740:	2b 81       	ldd	r18, Y+3	; 0x03
    1742:	3c 81       	ldd	r19, Y+4	; 0x04
    1744:	23 30       	cpi	r18, 0x03	; 3
    1746:	31 05       	cpc	r19, r1
    1748:	34 f4       	brge	.+12     	; 0x1756 <EXTI_u8Int0SetSenseControl+0x3a>
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	9c 81       	ldd	r25, Y+4	; 0x04
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	91 05       	cpc	r25, r1
    1752:	61 f0       	breq	.+24     	; 0x176c <EXTI_u8Int0SetSenseControl+0x50>
    1754:	47 c0       	rjmp	.+142    	; 0x17e4 <EXTI_u8Int0SetSenseControl+0xc8>
    1756:	2b 81       	ldd	r18, Y+3	; 0x03
    1758:	3c 81       	ldd	r19, Y+4	; 0x04
    175a:	23 30       	cpi	r18, 0x03	; 3
    175c:	31 05       	cpc	r19, r1
    175e:	21 f1       	breq	.+72     	; 0x17a8 <EXTI_u8Int0SetSenseControl+0x8c>
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	9c 81       	ldd	r25, Y+4	; 0x04
    1764:	84 30       	cpi	r24, 0x04	; 4
    1766:	91 05       	cpc	r25, r1
    1768:	71 f1       	breq	.+92     	; 0x17c6 <EXTI_u8Int0SetSenseControl+0xaa>
    176a:	3c c0       	rjmp	.+120    	; 0x17e4 <EXTI_u8Int0SetSenseControl+0xc8>
	{
	case LOW_LEVEL: CLR_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
    176c:	a5 e5       	ldi	r26, 0x55	; 85
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e5 e5       	ldi	r30, 0x55	; 85
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	8e 7f       	andi	r24, 0xFE	; 254
    1778:	8c 93       	st	X, r24
    177a:	a5 e5       	ldi	r26, 0x55	; 85
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e5 e5       	ldi	r30, 0x55	; 85
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	8d 7f       	andi	r24, 0xFD	; 253
    1786:	8c 93       	st	X, r24
    1788:	2f c0       	rjmp	.+94     	; 0x17e8 <EXTI_u8Int0SetSenseControl+0xcc>
	case ON_CHANGE:  SET_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
    178a:	a5 e5       	ldi	r26, 0x55	; 85
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e5 e5       	ldi	r30, 0x55	; 85
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	81 60       	ori	r24, 0x01	; 1
    1796:	8c 93       	st	X, r24
    1798:	a5 e5       	ldi	r26, 0x55	; 85
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e5 e5       	ldi	r30, 0x55	; 85
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	8d 7f       	andi	r24, 0xFD	; 253
    17a4:	8c 93       	st	X, r24
    17a6:	20 c0       	rjmp	.+64     	; 0x17e8 <EXTI_u8Int0SetSenseControl+0xcc>
	case FALLING_EDGE: CLR_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
    17a8:	a5 e5       	ldi	r26, 0x55	; 85
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e5 e5       	ldi	r30, 0x55	; 85
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	8e 7f       	andi	r24, 0xFE	; 254
    17b4:	8c 93       	st	X, r24
    17b6:	a5 e5       	ldi	r26, 0x55	; 85
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e5 e5       	ldi	r30, 0x55	; 85
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	82 60       	ori	r24, 0x02	; 2
    17c2:	8c 93       	st	X, r24
    17c4:	11 c0       	rjmp	.+34     	; 0x17e8 <EXTI_u8Int0SetSenseControl+0xcc>
	case RISING_EDGE: SET_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
    17c6:	a5 e5       	ldi	r26, 0x55	; 85
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e5 e5       	ldi	r30, 0x55	; 85
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	81 60       	ori	r24, 0x01	; 1
    17d2:	8c 93       	st	X, r24
    17d4:	a5 e5       	ldi	r26, 0x55	; 85
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e5 e5       	ldi	r30, 0x55	; 85
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	82 60       	ori	r24, 0x02	; 2
    17e0:	8c 93       	st	X, r24
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <EXTI_u8Int0SetSenseControl+0xcc>
	default: Local_u8ErrorState=NOK;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <EXTI_u8Int1SetSenseControl>:

u8 EXTI_u8Int1SetSenseControl(u8 Copy_u8Sense)
{
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <EXTI_u8Int1SetSenseControl+0x6>
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <EXTI_u8Int1SetSenseControl+0x8>
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState= OK;
    1806:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Sense)
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	3c 83       	std	Y+4, r19	; 0x04
    1810:	2b 83       	std	Y+3, r18	; 0x03
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	9c 81       	ldd	r25, Y+4	; 0x04
    1816:	82 30       	cpi	r24, 0x02	; 2
    1818:	91 05       	cpc	r25, r1
    181a:	29 f1       	breq	.+74     	; 0x1866 <EXTI_u8Int1SetSenseControl+0x6e>
    181c:	2b 81       	ldd	r18, Y+3	; 0x03
    181e:	3c 81       	ldd	r19, Y+4	; 0x04
    1820:	23 30       	cpi	r18, 0x03	; 3
    1822:	31 05       	cpc	r19, r1
    1824:	34 f4       	brge	.+12     	; 0x1832 <EXTI_u8Int1SetSenseControl+0x3a>
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	81 30       	cpi	r24, 0x01	; 1
    182c:	91 05       	cpc	r25, r1
    182e:	61 f0       	breq	.+24     	; 0x1848 <EXTI_u8Int1SetSenseControl+0x50>
    1830:	47 c0       	rjmp	.+142    	; 0x18c0 <EXTI_u8Int1SetSenseControl+0xc8>
    1832:	2b 81       	ldd	r18, Y+3	; 0x03
    1834:	3c 81       	ldd	r19, Y+4	; 0x04
    1836:	23 30       	cpi	r18, 0x03	; 3
    1838:	31 05       	cpc	r19, r1
    183a:	21 f1       	breq	.+72     	; 0x1884 <EXTI_u8Int1SetSenseControl+0x8c>
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	84 30       	cpi	r24, 0x04	; 4
    1842:	91 05       	cpc	r25, r1
    1844:	71 f1       	breq	.+92     	; 0x18a2 <EXTI_u8Int1SetSenseControl+0xaa>
    1846:	3c c0       	rjmp	.+120    	; 0x18c0 <EXTI_u8Int1SetSenseControl+0xc8>
	{
	case LOW_LEVEL: CLR_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11); break;
    1848:	a5 e5       	ldi	r26, 0x55	; 85
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e5 e5       	ldi	r30, 0x55	; 85
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	8b 7f       	andi	r24, 0xFB	; 251
    1854:	8c 93       	st	X, r24
    1856:	a5 e5       	ldi	r26, 0x55	; 85
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e5 e5       	ldi	r30, 0x55	; 85
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	87 7f       	andi	r24, 0xF7	; 247
    1862:	8c 93       	st	X, r24
    1864:	2f c0       	rjmp	.+94     	; 0x18c4 <EXTI_u8Int1SetSenseControl+0xcc>
	case ON_CHANGE:  SET_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11); break;
    1866:	a5 e5       	ldi	r26, 0x55	; 85
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e5 e5       	ldi	r30, 0x55	; 85
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	84 60       	ori	r24, 0x04	; 4
    1872:	8c 93       	st	X, r24
    1874:	a5 e5       	ldi	r26, 0x55	; 85
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e5 e5       	ldi	r30, 0x55	; 85
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	87 7f       	andi	r24, 0xF7	; 247
    1880:	8c 93       	st	X, r24
    1882:	20 c0       	rjmp	.+64     	; 0x18c4 <EXTI_u8Int1SetSenseControl+0xcc>
	case FALLING_EDGE: CLR_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11); break;
    1884:	a5 e5       	ldi	r26, 0x55	; 85
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e5 e5       	ldi	r30, 0x55	; 85
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	8b 7f       	andi	r24, 0xFB	; 251
    1890:	8c 93       	st	X, r24
    1892:	a5 e5       	ldi	r26, 0x55	; 85
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e5 e5       	ldi	r30, 0x55	; 85
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	88 60       	ori	r24, 0x08	; 8
    189e:	8c 93       	st	X, r24
    18a0:	11 c0       	rjmp	.+34     	; 0x18c4 <EXTI_u8Int1SetSenseControl+0xcc>
	case RISING_EDGE: SET_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11); break;
    18a2:	a5 e5       	ldi	r26, 0x55	; 85
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e5 e5       	ldi	r30, 0x55	; 85
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	84 60       	ori	r24, 0x04	; 4
    18ae:	8c 93       	st	X, r24
    18b0:	a5 e5       	ldi	r26, 0x55	; 85
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e5 e5       	ldi	r30, 0x55	; 85
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	88 60       	ori	r24, 0x08	; 8
    18bc:	8c 93       	st	X, r24
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <EXTI_u8Int1SetSenseControl+0xcc>
	default: Local_u8ErrorState=NOK;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <EXTI_u8Int2SetSenseControl>:

u8 EXTI_u8Int2SetSenseControl(u8 Copy_u8Sense)
{
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	00 d0       	rcall	.+0      	; 0x18da <EXTI_u8Int2SetSenseControl+0x6>
    18da:	00 d0       	rcall	.+0      	; 0x18dc <EXTI_u8Int2SetSenseControl+0x8>
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    18e2:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Sense)
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	3c 83       	std	Y+4, r19	; 0x04
    18ec:	2b 83       	std	Y+3, r18	; 0x03
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	9c 81       	ldd	r25, Y+4	; 0x04
    18f2:	83 30       	cpi	r24, 0x03	; 3
    18f4:	91 05       	cpc	r25, r1
    18f6:	31 f0       	breq	.+12     	; 0x1904 <EXTI_u8Int2SetSenseControl+0x30>
    18f8:	2b 81       	ldd	r18, Y+3	; 0x03
    18fa:	3c 81       	ldd	r19, Y+4	; 0x04
    18fc:	24 30       	cpi	r18, 0x04	; 4
    18fe:	31 05       	cpc	r19, r1
    1900:	49 f0       	breq	.+18     	; 0x1914 <EXTI_u8Int2SetSenseControl+0x40>
    1902:	10 c0       	rjmp	.+32     	; 0x1924 <EXTI_u8Int2SetSenseControl+0x50>
	{
	case FALLING_EDGE: CLR_BIT(MCUCSR,MCUCSR_INT2); break;
    1904:	a4 e5       	ldi	r26, 0x54	; 84
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e4 e5       	ldi	r30, 0x54	; 84
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	8f 7b       	andi	r24, 0xBF	; 191
    1910:	8c 93       	st	X, r24
    1912:	0a c0       	rjmp	.+20     	; 0x1928 <EXTI_u8Int2SetSenseControl+0x54>
	case RISING_EDGE: SET_BIT(MCUCSR,MCUCSR_INT2); break;
    1914:	a4 e5       	ldi	r26, 0x54	; 84
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e4 e5       	ldi	r30, 0x54	; 84
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	80 64       	ori	r24, 0x40	; 64
    1920:	8c 93       	st	X, r24
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <EXTI_u8Int2SetSenseControl+0x54>
	default: Local_u8ErrorState	=NOK;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1928:	89 81       	ldd	r24, Y+1	; 0x01
}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <EXTI_u8IntEnable>:

u8 EXTI_u8IntEnable(u8 Copy_u8Int)
{
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	00 d0       	rcall	.+0      	; 0x193e <EXTI_u8IntEnable+0x6>
    193e:	00 d0       	rcall	.+0      	; 0x1940 <EXTI_u8IntEnable+0x8>
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    1946:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	3c 83       	std	Y+4, r19	; 0x04
    1950:	2b 83       	std	Y+3, r18	; 0x03
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	91 05       	cpc	r25, r1
    195a:	89 f0       	breq	.+34     	; 0x197e <EXTI_u8IntEnable+0x46>
    195c:	2b 81       	ldd	r18, Y+3	; 0x03
    195e:	3c 81       	ldd	r19, Y+4	; 0x04
    1960:	22 30       	cpi	r18, 0x02	; 2
    1962:	31 05       	cpc	r19, r1
    1964:	a1 f0       	breq	.+40     	; 0x198e <EXTI_u8IntEnable+0x56>
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	c1 f4       	brne	.+48     	; 0x199e <EXTI_u8IntEnable+0x66>
	{
	case INT0: SET_BIT(GICR,GICR_INT0); break;
    196e:	ab e5       	ldi	r26, 0x5B	; 91
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	eb e5       	ldi	r30, 0x5B	; 91
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	80 64       	ori	r24, 0x40	; 64
    197a:	8c 93       	st	X, r24
    197c:	12 c0       	rjmp	.+36     	; 0x19a2 <EXTI_u8IntEnable+0x6a>
	case INT1: SET_BIT(GICR,GICR_INT1); break;
    197e:	ab e5       	ldi	r26, 0x5B	; 91
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	eb e5       	ldi	r30, 0x5B	; 91
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	80 68       	ori	r24, 0x80	; 128
    198a:	8c 93       	st	X, r24
    198c:	0a c0       	rjmp	.+20     	; 0x19a2 <EXTI_u8IntEnable+0x6a>
	case INT2: SET_BIT(GICR,GICR_INT2); break;
    198e:	ab e5       	ldi	r26, 0x5B	; 91
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	eb e5       	ldi	r30, 0x5B	; 91
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	80 62       	ori	r24, 0x20	; 32
    199a:	8c 93       	st	X, r24
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <EXTI_u8IntEnable+0x6a>
	default: Local_u8ErrorState	=NOK;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <EXTI_u8IntDisable>:

u8 EXTI_u8IntDisable(u8 Copy_u8Int)
{
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <EXTI_u8IntDisable+0x6>
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <EXTI_u8IntDisable+0x8>
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    19c0:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	3c 83       	std	Y+4, r19	; 0x04
    19ca:	2b 83       	std	Y+3, r18	; 0x03
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	9c 81       	ldd	r25, Y+4	; 0x04
    19d0:	81 30       	cpi	r24, 0x01	; 1
    19d2:	91 05       	cpc	r25, r1
    19d4:	89 f0       	breq	.+34     	; 0x19f8 <EXTI_u8IntDisable+0x46>
    19d6:	2b 81       	ldd	r18, Y+3	; 0x03
    19d8:	3c 81       	ldd	r19, Y+4	; 0x04
    19da:	22 30       	cpi	r18, 0x02	; 2
    19dc:	31 05       	cpc	r19, r1
    19de:	a1 f0       	breq	.+40     	; 0x1a08 <EXTI_u8IntDisable+0x56>
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	9c 81       	ldd	r25, Y+4	; 0x04
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	c1 f4       	brne	.+48     	; 0x1a18 <EXTI_u8IntDisable+0x66>
	{
	case INT0: CLR_BIT(GICR,GICR_INT0); break;
    19e8:	ab e5       	ldi	r26, 0x5B	; 91
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	eb e5       	ldi	r30, 0x5B	; 91
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	8f 7b       	andi	r24, 0xBF	; 191
    19f4:	8c 93       	st	X, r24
    19f6:	12 c0       	rjmp	.+36     	; 0x1a1c <EXTI_u8IntDisable+0x6a>
	case INT1: CLR_BIT(GICR,GICR_INT1); break;
    19f8:	ab e5       	ldi	r26, 0x5B	; 91
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	eb e5       	ldi	r30, 0x5B	; 91
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	8f 77       	andi	r24, 0x7F	; 127
    1a04:	8c 93       	st	X, r24
    1a06:	0a c0       	rjmp	.+20     	; 0x1a1c <EXTI_u8IntDisable+0x6a>
	case INT2: CLR_BIT(GICR,GICR_INT2); break;
    1a08:	ab e5       	ldi	r26, 0x5B	; 91
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	eb e5       	ldi	r30, 0x5B	; 91
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	8f 7d       	andi	r24, 0xDF	; 223
    1a14:	8c 93       	st	X, r24
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <EXTI_u8IntDisable+0x6a>
	default: Local_u8ErrorState	=NOK;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <EXTI_u8Int0SetCallBack>:

u8 EXTI_u8Int0SetCallBack(void (*Copy_pvInt0Func)(void))
{
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <EXTI_u8Int0SetCallBack+0x6>
    1a32:	0f 92       	push	r0
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	9b 83       	std	Y+3, r25	; 0x03
    1a3a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    1a3c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt0Func != NULL)
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	9b 81       	ldd	r25, Y+3	; 0x03
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	39 f0       	breq	.+14     	; 0x1a54 <EXTI_u8Int0SetCallBack+0x28>
	{
		EXTI_pvInt0Func= Copy_pvInt0Func;
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	9b 81       	ldd	r25, Y+3	; 0x03
    1a4a:	90 93 73 00 	sts	0x0073, r25
    1a4e:	80 93 72 00 	sts	0x0072, r24
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <EXTI_u8Int0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus= NULL_POINTER;
    1a54:	82 e0       	ldi	r24, 0x02	; 2
    1a56:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <EXTI_u8Int1SetCallBack>:

u8 EXTI_u8Int1SetCallBack(void (*Copy_pvInt1Func)(void))
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <EXTI_u8Int1SetCallBack+0x6>
    1a6c:	0f 92       	push	r0
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	9b 83       	std	Y+3, r25	; 0x03
    1a74:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    1a76:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt1Func != NULL)
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a7c:	00 97       	sbiw	r24, 0x00	; 0
    1a7e:	39 f0       	breq	.+14     	; 0x1a8e <EXTI_u8Int1SetCallBack+0x28>
	{
		EXTI_pvInt1Func= Copy_pvInt1Func;
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	9b 81       	ldd	r25, Y+3	; 0x03
    1a84:	90 93 75 00 	sts	0x0075, r25
    1a88:	80 93 74 00 	sts	0x0074, r24
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <EXTI_u8Int1SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus= NULL_POINTER;
    1a8e:	82 e0       	ldi	r24, 0x02	; 2
    1a90:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <EXTI_u8Int2SetCallBack>:

u8 EXTI_u8Int2SetCallBack(void (*Copy_pvInt2Func)(void))
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <EXTI_u8Int2SetCallBack+0x6>
    1aa6:	0f 92       	push	r0
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    1aac:	9b 83       	std	Y+3, r25	; 0x03
    1aae:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    1ab0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt2Func != NULL)
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	39 f0       	breq	.+14     	; 0x1ac8 <EXTI_u8Int2SetCallBack+0x28>
	{
		EXTI_pvInt2Func= Copy_pvInt2Func;
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	9b 81       	ldd	r25, Y+3	; 0x03
    1abe:	90 93 77 00 	sts	0x0077, r25
    1ac2:	80 93 76 00 	sts	0x0076, r24
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <EXTI_u8Int2SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus= NULL_POINTER;
    1ac8:	82 e0       	ldi	r24, 0x02	; 2
    1aca:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <__vector_1>:

/*ISR of INT0*/
void __vector_1 (void)  __attribute__((signal));
void __vector_1 (void)
{
    1ada:	1f 92       	push	r1
    1adc:	0f 92       	push	r0
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	0f 92       	push	r0
    1ae2:	11 24       	eor	r1, r1
    1ae4:	2f 93       	push	r18
    1ae6:	3f 93       	push	r19
    1ae8:	4f 93       	push	r20
    1aea:	5f 93       	push	r21
    1aec:	6f 93       	push	r22
    1aee:	7f 93       	push	r23
    1af0:	8f 93       	push	r24
    1af2:	9f 93       	push	r25
    1af4:	af 93       	push	r26
    1af6:	bf 93       	push	r27
    1af8:	ef 93       	push	r30
    1afa:	ff 93       	push	r31
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0Func != NULL)
    1b04:	80 91 72 00 	lds	r24, 0x0072
    1b08:	90 91 73 00 	lds	r25, 0x0073
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	29 f0       	breq	.+10     	; 0x1b1a <__vector_1+0x40>
	{
		EXTI_pvInt0Func();
    1b10:	e0 91 72 00 	lds	r30, 0x0072
    1b14:	f0 91 73 00 	lds	r31, 0x0073
    1b18:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	ff 91       	pop	r31
    1b20:	ef 91       	pop	r30
    1b22:	bf 91       	pop	r27
    1b24:	af 91       	pop	r26
    1b26:	9f 91       	pop	r25
    1b28:	8f 91       	pop	r24
    1b2a:	7f 91       	pop	r23
    1b2c:	6f 91       	pop	r22
    1b2e:	5f 91       	pop	r21
    1b30:	4f 91       	pop	r20
    1b32:	3f 91       	pop	r19
    1b34:	2f 91       	pop	r18
    1b36:	0f 90       	pop	r0
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	0f 90       	pop	r0
    1b3c:	1f 90       	pop	r1
    1b3e:	18 95       	reti

00001b40 <__vector_2>:

/*ISR of INT1*/
void __vector_2 (void)  __attribute__((signal));
void __vector_2 (void)
{
    1b40:	1f 92       	push	r1
    1b42:	0f 92       	push	r0
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	0f 92       	push	r0
    1b48:	11 24       	eor	r1, r1
    1b4a:	2f 93       	push	r18
    1b4c:	3f 93       	push	r19
    1b4e:	4f 93       	push	r20
    1b50:	5f 93       	push	r21
    1b52:	6f 93       	push	r22
    1b54:	7f 93       	push	r23
    1b56:	8f 93       	push	r24
    1b58:	9f 93       	push	r25
    1b5a:	af 93       	push	r26
    1b5c:	bf 93       	push	r27
    1b5e:	ef 93       	push	r30
    1b60:	ff 93       	push	r31
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt1Func != NULL)
    1b6a:	80 91 74 00 	lds	r24, 0x0074
    1b6e:	90 91 75 00 	lds	r25, 0x0075
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	29 f0       	breq	.+10     	; 0x1b80 <__vector_2+0x40>
	{
		EXTI_pvInt1Func();
    1b76:	e0 91 74 00 	lds	r30, 0x0074
    1b7a:	f0 91 75 00 	lds	r31, 0x0075
    1b7e:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	ff 91       	pop	r31
    1b86:	ef 91       	pop	r30
    1b88:	bf 91       	pop	r27
    1b8a:	af 91       	pop	r26
    1b8c:	9f 91       	pop	r25
    1b8e:	8f 91       	pop	r24
    1b90:	7f 91       	pop	r23
    1b92:	6f 91       	pop	r22
    1b94:	5f 91       	pop	r21
    1b96:	4f 91       	pop	r20
    1b98:	3f 91       	pop	r19
    1b9a:	2f 91       	pop	r18
    1b9c:	0f 90       	pop	r0
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	0f 90       	pop	r0
    1ba2:	1f 90       	pop	r1
    1ba4:	18 95       	reti

00001ba6 <__vector_18>:

/*ISR of INT2*/
void __vector_18 (void)  __attribute__((signal));
void __vector_18 (void)
{
    1ba6:	1f 92       	push	r1
    1ba8:	0f 92       	push	r0
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	0f 92       	push	r0
    1bae:	11 24       	eor	r1, r1
    1bb0:	2f 93       	push	r18
    1bb2:	3f 93       	push	r19
    1bb4:	4f 93       	push	r20
    1bb6:	5f 93       	push	r21
    1bb8:	6f 93       	push	r22
    1bba:	7f 93       	push	r23
    1bbc:	8f 93       	push	r24
    1bbe:	9f 93       	push	r25
    1bc0:	af 93       	push	r26
    1bc2:	bf 93       	push	r27
    1bc4:	ef 93       	push	r30
    1bc6:	ff 93       	push	r31
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt2Func != NULL)
    1bd0:	80 91 76 00 	lds	r24, 0x0076
    1bd4:	90 91 77 00 	lds	r25, 0x0077
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	29 f0       	breq	.+10     	; 0x1be6 <__vector_18+0x40>
	{
		EXTI_pvInt2Func();
    1bdc:	e0 91 76 00 	lds	r30, 0x0076
    1be0:	f0 91 77 00 	lds	r31, 0x0077
    1be4:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    1be6:	cf 91       	pop	r28
    1be8:	df 91       	pop	r29
    1bea:	ff 91       	pop	r31
    1bec:	ef 91       	pop	r30
    1bee:	bf 91       	pop	r27
    1bf0:	af 91       	pop	r26
    1bf2:	9f 91       	pop	r25
    1bf4:	8f 91       	pop	r24
    1bf6:	7f 91       	pop	r23
    1bf8:	6f 91       	pop	r22
    1bfa:	5f 91       	pop	r21
    1bfc:	4f 91       	pop	r20
    1bfe:	3f 91       	pop	r19
    1c00:	2f 91       	pop	r18
    1c02:	0f 90       	pop	r0
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	0f 90       	pop	r0
    1c08:	1f 90       	pop	r1
    1c0a:	18 95       	reti

00001c0c <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1c14:	af e5       	ldi	r26, 0x5F	; 95
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	ef e5       	ldi	r30, 0x5F	; 95
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	80 68       	ori	r24, 0x80	; 128
    1c20:	8c 93       	st	X, r24
}
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1c30:	af e5       	ldi	r26, 0x5F	; 95
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	ef e5       	ldi	r30, 0x5F	; 95
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	8f 77       	andi	r24, 0x7F	; 127
    1c3c:	8c 93       	st	X, r24
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	08 95       	ret

00001c44 <SSD_u8SetNumber>:
#include "SSD_interface.h"
#include "SSD_private.h"
#include "SSD_config.h"

u8 SSD_u8SetNumber(u8 Copy_u8Number , SSD_t * SSD)
{
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	67 97       	sbiw	r28, 0x17	; 23
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	cd bf       	out	0x3d, r28	; 61
    1c58:	8c 87       	std	Y+12, r24	; 0x0c
    1c5a:	7e 87       	std	Y+14, r23	; 0x0e
    1c5c:	6d 87       	std	Y+13, r22	; 0x0d
	u8 Local_u8ErrorState = 0;
    1c5e:	19 82       	std	Y+1, r1	; 0x01
	/*SSD_ANODE*/
	u8 seven_seg[SSD_u8SIZE_OF_ARRAY] = {0b11000000,0b11111001,0b10100100,0b10110000,0b10011001,0b10010010,0b10000010,0b11111000,0b10000000,0b10010000};
    1c60:	9e 01       	movw	r18, r28
    1c62:	2e 5f       	subi	r18, 0xFE	; 254
    1c64:	3f 4f       	sbci	r19, 0xFF	; 255
    1c66:	3c 8b       	std	Y+20, r19	; 0x14
    1c68:	2b 8b       	std	Y+19, r18	; 0x13
    1c6a:	88 e6       	ldi	r24, 0x68	; 104
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	9e 8b       	std	Y+22, r25	; 0x16
    1c70:	8d 8b       	std	Y+21, r24	; 0x15
    1c72:	9a e0       	ldi	r25, 0x0A	; 10
    1c74:	9f 8b       	std	Y+23, r25	; 0x17
    1c76:	ed 89       	ldd	r30, Y+21	; 0x15
    1c78:	fe 89       	ldd	r31, Y+22	; 0x16
    1c7a:	00 80       	ld	r0, Z
    1c7c:	2d 89       	ldd	r18, Y+21	; 0x15
    1c7e:	3e 89       	ldd	r19, Y+22	; 0x16
    1c80:	2f 5f       	subi	r18, 0xFF	; 255
    1c82:	3f 4f       	sbci	r19, 0xFF	; 255
    1c84:	3e 8b       	std	Y+22, r19	; 0x16
    1c86:	2d 8b       	std	Y+21, r18	; 0x15
    1c88:	eb 89       	ldd	r30, Y+19	; 0x13
    1c8a:	fc 89       	ldd	r31, Y+20	; 0x14
    1c8c:	00 82       	st	Z, r0
    1c8e:	2b 89       	ldd	r18, Y+19	; 0x13
    1c90:	3c 89       	ldd	r19, Y+20	; 0x14
    1c92:	2f 5f       	subi	r18, 0xFF	; 255
    1c94:	3f 4f       	sbci	r19, 0xFF	; 255
    1c96:	3c 8b       	std	Y+20, r19	; 0x14
    1c98:	2b 8b       	std	Y+19, r18	; 0x13
    1c9a:	3f 89       	ldd	r19, Y+23	; 0x17
    1c9c:	31 50       	subi	r19, 0x01	; 1
    1c9e:	3f 8b       	std	Y+23, r19	; 0x17
    1ca0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca2:	88 23       	and	r24, r24
    1ca4:	41 f7       	brne	.-48     	; 0x1c76 <SSD_u8SetNumber+0x32>
	if((SSD -> ComType) == SSD_u8ANODE)
    1ca6:	ed 85       	ldd	r30, Y+13	; 0x0d
    1ca8:	fe 85       	ldd	r31, Y+14	; 0x0e
    1caa:	81 81       	ldd	r24, Z+1	; 0x01
    1cac:	81 30       	cpi	r24, 0x01	; 1
    1cae:	09 f0       	breq	.+2      	; 0x1cb2 <SSD_u8SetNumber+0x6e>
    1cb0:	a3 c0       	rjmp	.+326    	; 0x1df8 <SSD_u8SetNumber+0x1b4>
	{
		switch(Copy_u8Number)
    1cb2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cb4:	e8 2f       	mov	r30, r24
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	fa 8b       	std	Y+18, r31	; 0x12
    1cba:	e9 8b       	std	Y+17, r30	; 0x11
    1cbc:	29 89       	ldd	r18, Y+17	; 0x11
    1cbe:	3a 89       	ldd	r19, Y+18	; 0x12
    1cc0:	24 30       	cpi	r18, 0x04	; 4
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <SSD_u8SetNumber+0x84>
    1cc6:	65 c0       	rjmp	.+202    	; 0x1d92 <SSD_u8SetNumber+0x14e>
    1cc8:	89 89       	ldd	r24, Y+17	; 0x11
    1cca:	9a 89       	ldd	r25, Y+18	; 0x12
    1ccc:	85 30       	cpi	r24, 0x05	; 5
    1cce:	91 05       	cpc	r25, r1
    1cd0:	e4 f4       	brge	.+56     	; 0x1d0a <SSD_u8SetNumber+0xc6>
    1cd2:	e9 89       	ldd	r30, Y+17	; 0x11
    1cd4:	fa 89       	ldd	r31, Y+18	; 0x12
    1cd6:	e1 30       	cpi	r30, 0x01	; 1
    1cd8:	f1 05       	cpc	r31, r1
    1cda:	09 f4       	brne	.+2      	; 0x1cde <SSD_u8SetNumber+0x9a>
    1cdc:	42 c0       	rjmp	.+132    	; 0x1d62 <SSD_u8SetNumber+0x11e>
    1cde:	29 89       	ldd	r18, Y+17	; 0x11
    1ce0:	3a 89       	ldd	r19, Y+18	; 0x12
    1ce2:	22 30       	cpi	r18, 0x02	; 2
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	2c f4       	brge	.+10     	; 0x1cf2 <SSD_u8SetNumber+0xae>
    1ce8:	89 89       	ldd	r24, Y+17	; 0x11
    1cea:	9a 89       	ldd	r25, Y+18	; 0x12
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	89 f1       	breq	.+98     	; 0x1d52 <SSD_u8SetNumber+0x10e>
    1cf0:	80 c0       	rjmp	.+256    	; 0x1df2 <SSD_u8SetNumber+0x1ae>
    1cf2:	e9 89       	ldd	r30, Y+17	; 0x11
    1cf4:	fa 89       	ldd	r31, Y+18	; 0x12
    1cf6:	e2 30       	cpi	r30, 0x02	; 2
    1cf8:	f1 05       	cpc	r31, r1
    1cfa:	d9 f1       	breq	.+118    	; 0x1d72 <SSD_u8SetNumber+0x12e>
    1cfc:	29 89       	ldd	r18, Y+17	; 0x11
    1cfe:	3a 89       	ldd	r19, Y+18	; 0x12
    1d00:	23 30       	cpi	r18, 0x03	; 3
    1d02:	31 05       	cpc	r19, r1
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <SSD_u8SetNumber+0xc4>
    1d06:	3d c0       	rjmp	.+122    	; 0x1d82 <SSD_u8SetNumber+0x13e>
    1d08:	74 c0       	rjmp	.+232    	; 0x1df2 <SSD_u8SetNumber+0x1ae>
    1d0a:	89 89       	ldd	r24, Y+17	; 0x11
    1d0c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d0e:	87 30       	cpi	r24, 0x07	; 7
    1d10:	91 05       	cpc	r25, r1
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <SSD_u8SetNumber+0xd2>
    1d14:	56 c0       	rjmp	.+172    	; 0x1dc2 <SSD_u8SetNumber+0x17e>
    1d16:	e9 89       	ldd	r30, Y+17	; 0x11
    1d18:	fa 89       	ldd	r31, Y+18	; 0x12
    1d1a:	e8 30       	cpi	r30, 0x08	; 8
    1d1c:	f1 05       	cpc	r31, r1
    1d1e:	64 f4       	brge	.+24     	; 0x1d38 <SSD_u8SetNumber+0xf4>
    1d20:	29 89       	ldd	r18, Y+17	; 0x11
    1d22:	3a 89       	ldd	r19, Y+18	; 0x12
    1d24:	25 30       	cpi	r18, 0x05	; 5
    1d26:	31 05       	cpc	r19, r1
    1d28:	e1 f1       	breq	.+120    	; 0x1da2 <SSD_u8SetNumber+0x15e>
    1d2a:	89 89       	ldd	r24, Y+17	; 0x11
    1d2c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d2e:	86 30       	cpi	r24, 0x06	; 6
    1d30:	91 05       	cpc	r25, r1
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <SSD_u8SetNumber+0xf2>
    1d34:	3e c0       	rjmp	.+124    	; 0x1db2 <SSD_u8SetNumber+0x16e>
    1d36:	5d c0       	rjmp	.+186    	; 0x1df2 <SSD_u8SetNumber+0x1ae>
    1d38:	e9 89       	ldd	r30, Y+17	; 0x11
    1d3a:	fa 89       	ldd	r31, Y+18	; 0x12
    1d3c:	e8 30       	cpi	r30, 0x08	; 8
    1d3e:	f1 05       	cpc	r31, r1
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <SSD_u8SetNumber+0x100>
    1d42:	47 c0       	rjmp	.+142    	; 0x1dd2 <SSD_u8SetNumber+0x18e>
    1d44:	29 89       	ldd	r18, Y+17	; 0x11
    1d46:	3a 89       	ldd	r19, Y+18	; 0x12
    1d48:	29 30       	cpi	r18, 0x09	; 9
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <SSD_u8SetNumber+0x10c>
    1d4e:	49 c0       	rjmp	.+146    	; 0x1de2 <SSD_u8SetNumber+0x19e>
    1d50:	50 c0       	rjmp	.+160    	; 0x1df2 <SSD_u8SetNumber+0x1ae>
		{
		case SSD_u8NUMBER0: DIO_u8SetPortValue(SSD -> Port , seven_seg[SSD_u8NUMBER0]); break;
    1d52:	ed 85       	ldd	r30, Y+13	; 0x0d
    1d54:	fe 85       	ldd	r31, Y+14	; 0x0e
    1d56:	80 81       	ld	r24, Z
    1d58:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5a:	69 2f       	mov	r22, r25
    1d5c:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    1d60:	16 c1       	rjmp	.+556    	; 0x1f8e <SSD_u8SetNumber+0x34a>
		case SSD_u8NUMBER1: DIO_u8SetPortValue(SSD -> Port , seven_seg[SSD_u8NUMBER1]); break;
    1d62:	ed 85       	ldd	r30, Y+13	; 0x0d
    1d64:	fe 85       	ldd	r31, Y+14	; 0x0e
    1d66:	80 81       	ld	r24, Z
    1d68:	9b 81       	ldd	r25, Y+3	; 0x03
    1d6a:	69 2f       	mov	r22, r25
    1d6c:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    1d70:	0e c1       	rjmp	.+540    	; 0x1f8e <SSD_u8SetNumber+0x34a>
		case SSD_u8NUMBER2: DIO_u8SetPortValue(SSD -> Port , seven_seg[SSD_u8NUMBER2]); break;
    1d72:	ed 85       	ldd	r30, Y+13	; 0x0d
    1d74:	fe 85       	ldd	r31, Y+14	; 0x0e
    1d76:	80 81       	ld	r24, Z
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	69 2f       	mov	r22, r25
    1d7c:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    1d80:	06 c1       	rjmp	.+524    	; 0x1f8e <SSD_u8SetNumber+0x34a>
		case SSD_u8NUMBER3: DIO_u8SetPortValue(SSD -> Port , seven_seg[SSD_u8NUMBER3]); break;
    1d82:	ed 85       	ldd	r30, Y+13	; 0x0d
    1d84:	fe 85       	ldd	r31, Y+14	; 0x0e
    1d86:	80 81       	ld	r24, Z
    1d88:	9d 81       	ldd	r25, Y+5	; 0x05
    1d8a:	69 2f       	mov	r22, r25
    1d8c:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    1d90:	fe c0       	rjmp	.+508    	; 0x1f8e <SSD_u8SetNumber+0x34a>
		case SSD_u8NUMBER4: DIO_u8SetPortValue(SSD -> Port , seven_seg[SSD_u8NUMBER4]); break;
    1d92:	ed 85       	ldd	r30, Y+13	; 0x0d
    1d94:	fe 85       	ldd	r31, Y+14	; 0x0e
    1d96:	80 81       	ld	r24, Z
    1d98:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9a:	69 2f       	mov	r22, r25
    1d9c:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    1da0:	f6 c0       	rjmp	.+492    	; 0x1f8e <SSD_u8SetNumber+0x34a>
		case SSD_u8NUMBER5: DIO_u8SetPortValue(SSD -> Port , seven_seg[SSD_u8NUMBER5]); break;
    1da2:	ed 85       	ldd	r30, Y+13	; 0x0d
    1da4:	fe 85       	ldd	r31, Y+14	; 0x0e
    1da6:	80 81       	ld	r24, Z
    1da8:	9f 81       	ldd	r25, Y+7	; 0x07
    1daa:	69 2f       	mov	r22, r25
    1dac:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    1db0:	ee c0       	rjmp	.+476    	; 0x1f8e <SSD_u8SetNumber+0x34a>
		case SSD_u8NUMBER6: DIO_u8SetPortValue(SSD -> Port , seven_seg[SSD_u8NUMBER6]); break;
    1db2:	ed 85       	ldd	r30, Y+13	; 0x0d
    1db4:	fe 85       	ldd	r31, Y+14	; 0x0e
    1db6:	80 81       	ld	r24, Z
    1db8:	98 85       	ldd	r25, Y+8	; 0x08
    1dba:	69 2f       	mov	r22, r25
    1dbc:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    1dc0:	e6 c0       	rjmp	.+460    	; 0x1f8e <SSD_u8SetNumber+0x34a>
		case SSD_u8NUMBER7: DIO_u8SetPortValue(SSD -> Port , seven_seg[SSD_u8NUMBER7]); break;
    1dc2:	ed 85       	ldd	r30, Y+13	; 0x0d
    1dc4:	fe 85       	ldd	r31, Y+14	; 0x0e
    1dc6:	80 81       	ld	r24, Z
    1dc8:	99 85       	ldd	r25, Y+9	; 0x09
    1dca:	69 2f       	mov	r22, r25
    1dcc:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    1dd0:	de c0       	rjmp	.+444    	; 0x1f8e <SSD_u8SetNumber+0x34a>
		case SSD_u8NUMBER8: DIO_u8SetPortValue(SSD -> Port , seven_seg[SSD_u8NUMBER8]); break;
    1dd2:	ed 85       	ldd	r30, Y+13	; 0x0d
    1dd4:	fe 85       	ldd	r31, Y+14	; 0x0e
    1dd6:	80 81       	ld	r24, Z
    1dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dda:	69 2f       	mov	r22, r25
    1ddc:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    1de0:	d6 c0       	rjmp	.+428    	; 0x1f8e <SSD_u8SetNumber+0x34a>
		case SSD_u8NUMBER9: DIO_u8SetPortValue(SSD -> Port , seven_seg[SSD_u8NUMBER9]); break;
    1de2:	ed 85       	ldd	r30, Y+13	; 0x0d
    1de4:	fe 85       	ldd	r31, Y+14	; 0x0e
    1de6:	80 81       	ld	r24, Z
    1de8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dea:	69 2f       	mov	r22, r25
    1dec:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    1df0:	ce c0       	rjmp	.+412    	; 0x1f8e <SSD_u8SetNumber+0x34a>
		default: Local_u8ErrorState = 1; break;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	89 83       	std	Y+1, r24	; 0x01
    1df6:	cb c0       	rjmp	.+406    	; 0x1f8e <SSD_u8SetNumber+0x34a>
		}
	}
	else if((SSD -> ComType) == SSD_u8CATHODE)
    1df8:	ed 85       	ldd	r30, Y+13	; 0x0d
    1dfa:	fe 85       	ldd	r31, Y+14	; 0x0e
    1dfc:	81 81       	ldd	r24, Z+1	; 0x01
    1dfe:	88 23       	and	r24, r24
    1e00:	09 f0       	breq	.+2      	; 0x1e04 <SSD_u8SetNumber+0x1c0>
    1e02:	c3 c0       	rjmp	.+390    	; 0x1f8a <SSD_u8SetNumber+0x346>
	{
		switch(Copy_u8Number)
    1e04:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e06:	e8 2f       	mov	r30, r24
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	f8 8b       	std	Y+16, r31	; 0x10
    1e0c:	ef 87       	std	Y+15, r30	; 0x0f
    1e0e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1e10:	38 89       	ldd	r19, Y+16	; 0x10
    1e12:	24 30       	cpi	r18, 0x04	; 4
    1e14:	31 05       	cpc	r19, r1
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <SSD_u8SetNumber+0x1d6>
    1e18:	73 c0       	rjmp	.+230    	; 0x1f00 <SSD_u8SetNumber+0x2bc>
    1e1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e1c:	98 89       	ldd	r25, Y+16	; 0x10
    1e1e:	85 30       	cpi	r24, 0x05	; 5
    1e20:	91 05       	cpc	r25, r1
    1e22:	ec f4       	brge	.+58     	; 0x1e5e <SSD_u8SetNumber+0x21a>
    1e24:	ef 85       	ldd	r30, Y+15	; 0x0f
    1e26:	f8 89       	ldd	r31, Y+16	; 0x10
    1e28:	e1 30       	cpi	r30, 0x01	; 1
    1e2a:	f1 05       	cpc	r31, r1
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <SSD_u8SetNumber+0x1ec>
    1e2e:	47 c0       	rjmp	.+142    	; 0x1ebe <SSD_u8SetNumber+0x27a>
    1e30:	2f 85       	ldd	r18, Y+15	; 0x0f
    1e32:	38 89       	ldd	r19, Y+16	; 0x10
    1e34:	22 30       	cpi	r18, 0x02	; 2
    1e36:	31 05       	cpc	r19, r1
    1e38:	2c f4       	brge	.+10     	; 0x1e44 <SSD_u8SetNumber+0x200>
    1e3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e3c:	98 89       	ldd	r25, Y+16	; 0x10
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	99 f1       	breq	.+102    	; 0x1ea8 <SSD_u8SetNumber+0x264>
    1e42:	a0 c0       	rjmp	.+320    	; 0x1f84 <SSD_u8SetNumber+0x340>
    1e44:	ef 85       	ldd	r30, Y+15	; 0x0f
    1e46:	f8 89       	ldd	r31, Y+16	; 0x10
    1e48:	e2 30       	cpi	r30, 0x02	; 2
    1e4a:	f1 05       	cpc	r31, r1
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <SSD_u8SetNumber+0x20c>
    1e4e:	42 c0       	rjmp	.+132    	; 0x1ed4 <SSD_u8SetNumber+0x290>
    1e50:	2f 85       	ldd	r18, Y+15	; 0x0f
    1e52:	38 89       	ldd	r19, Y+16	; 0x10
    1e54:	23 30       	cpi	r18, 0x03	; 3
    1e56:	31 05       	cpc	r19, r1
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <SSD_u8SetNumber+0x218>
    1e5a:	47 c0       	rjmp	.+142    	; 0x1eea <SSD_u8SetNumber+0x2a6>
    1e5c:	93 c0       	rjmp	.+294    	; 0x1f84 <SSD_u8SetNumber+0x340>
    1e5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e60:	98 89       	ldd	r25, Y+16	; 0x10
    1e62:	87 30       	cpi	r24, 0x07	; 7
    1e64:	91 05       	cpc	r25, r1
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <SSD_u8SetNumber+0x226>
    1e68:	6c c0       	rjmp	.+216    	; 0x1f42 <SSD_u8SetNumber+0x2fe>
    1e6a:	ef 85       	ldd	r30, Y+15	; 0x0f
    1e6c:	f8 89       	ldd	r31, Y+16	; 0x10
    1e6e:	e8 30       	cpi	r30, 0x08	; 8
    1e70:	f1 05       	cpc	r31, r1
    1e72:	6c f4       	brge	.+26     	; 0x1e8e <SSD_u8SetNumber+0x24a>
    1e74:	2f 85       	ldd	r18, Y+15	; 0x0f
    1e76:	38 89       	ldd	r19, Y+16	; 0x10
    1e78:	25 30       	cpi	r18, 0x05	; 5
    1e7a:	31 05       	cpc	r19, r1
    1e7c:	09 f4       	brne	.+2      	; 0x1e80 <SSD_u8SetNumber+0x23c>
    1e7e:	4b c0       	rjmp	.+150    	; 0x1f16 <SSD_u8SetNumber+0x2d2>
    1e80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e82:	98 89       	ldd	r25, Y+16	; 0x10
    1e84:	86 30       	cpi	r24, 0x06	; 6
    1e86:	91 05       	cpc	r25, r1
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <SSD_u8SetNumber+0x248>
    1e8a:	50 c0       	rjmp	.+160    	; 0x1f2c <SSD_u8SetNumber+0x2e8>
    1e8c:	7b c0       	rjmp	.+246    	; 0x1f84 <SSD_u8SetNumber+0x340>
    1e8e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1e90:	f8 89       	ldd	r31, Y+16	; 0x10
    1e92:	e8 30       	cpi	r30, 0x08	; 8
    1e94:	f1 05       	cpc	r31, r1
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <SSD_u8SetNumber+0x256>
    1e98:	5f c0       	rjmp	.+190    	; 0x1f58 <SSD_u8SetNumber+0x314>
    1e9a:	2f 85       	ldd	r18, Y+15	; 0x0f
    1e9c:	38 89       	ldd	r19, Y+16	; 0x10
    1e9e:	29 30       	cpi	r18, 0x09	; 9
    1ea0:	31 05       	cpc	r19, r1
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <SSD_u8SetNumber+0x262>
    1ea4:	64 c0       	rjmp	.+200    	; 0x1f6e <SSD_u8SetNumber+0x32a>
    1ea6:	6e c0       	rjmp	.+220    	; 0x1f84 <SSD_u8SetNumber+0x340>
		{
		case SSD_u8NUMBER0: DIO_u8SetPortValue(SSD -> Port , ~seven_seg[SSD_u8NUMBER0]); break;
    1ea8:	ed 85       	ldd	r30, Y+13	; 0x0d
    1eaa:	fe 85       	ldd	r31, Y+14	; 0x0e
    1eac:	20 81       	ld	r18, Z
    1eae:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb0:	98 2f       	mov	r25, r24
    1eb2:	90 95       	com	r25
    1eb4:	82 2f       	mov	r24, r18
    1eb6:	69 2f       	mov	r22, r25
    1eb8:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    1ebc:	68 c0       	rjmp	.+208    	; 0x1f8e <SSD_u8SetNumber+0x34a>
		case SSD_u8NUMBER1: DIO_u8SetPortValue(SSD -> Port , ~seven_seg[SSD_u8NUMBER1]); break;
    1ebe:	ed 85       	ldd	r30, Y+13	; 0x0d
    1ec0:	fe 85       	ldd	r31, Y+14	; 0x0e
    1ec2:	20 81       	ld	r18, Z
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	98 2f       	mov	r25, r24
    1ec8:	90 95       	com	r25
    1eca:	82 2f       	mov	r24, r18
    1ecc:	69 2f       	mov	r22, r25
    1ece:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    1ed2:	5d c0       	rjmp	.+186    	; 0x1f8e <SSD_u8SetNumber+0x34a>
		case SSD_u8NUMBER2: DIO_u8SetPortValue(SSD -> Port , ~seven_seg[SSD_u8NUMBER2]); break;
    1ed4:	ed 85       	ldd	r30, Y+13	; 0x0d
    1ed6:	fe 85       	ldd	r31, Y+14	; 0x0e
    1ed8:	20 81       	ld	r18, Z
    1eda:	8c 81       	ldd	r24, Y+4	; 0x04
    1edc:	98 2f       	mov	r25, r24
    1ede:	90 95       	com	r25
    1ee0:	82 2f       	mov	r24, r18
    1ee2:	69 2f       	mov	r22, r25
    1ee4:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    1ee8:	52 c0       	rjmp	.+164    	; 0x1f8e <SSD_u8SetNumber+0x34a>
		case SSD_u8NUMBER3: DIO_u8SetPortValue(SSD -> Port , ~seven_seg[SSD_u8NUMBER3]); break;
    1eea:	ed 85       	ldd	r30, Y+13	; 0x0d
    1eec:	fe 85       	ldd	r31, Y+14	; 0x0e
    1eee:	20 81       	ld	r18, Z
    1ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef2:	98 2f       	mov	r25, r24
    1ef4:	90 95       	com	r25
    1ef6:	82 2f       	mov	r24, r18
    1ef8:	69 2f       	mov	r22, r25
    1efa:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    1efe:	47 c0       	rjmp	.+142    	; 0x1f8e <SSD_u8SetNumber+0x34a>
		case SSD_u8NUMBER4: DIO_u8SetPortValue(SSD -> Port , ~seven_seg[SSD_u8NUMBER4]); break;
    1f00:	ed 85       	ldd	r30, Y+13	; 0x0d
    1f02:	fe 85       	ldd	r31, Y+14	; 0x0e
    1f04:	20 81       	ld	r18, Z
    1f06:	8e 81       	ldd	r24, Y+6	; 0x06
    1f08:	98 2f       	mov	r25, r24
    1f0a:	90 95       	com	r25
    1f0c:	82 2f       	mov	r24, r18
    1f0e:	69 2f       	mov	r22, r25
    1f10:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    1f14:	3c c0       	rjmp	.+120    	; 0x1f8e <SSD_u8SetNumber+0x34a>
		case SSD_u8NUMBER5: DIO_u8SetPortValue(SSD -> Port , ~seven_seg[SSD_u8NUMBER5]); break;
    1f16:	ed 85       	ldd	r30, Y+13	; 0x0d
    1f18:	fe 85       	ldd	r31, Y+14	; 0x0e
    1f1a:	20 81       	ld	r18, Z
    1f1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f1e:	98 2f       	mov	r25, r24
    1f20:	90 95       	com	r25
    1f22:	82 2f       	mov	r24, r18
    1f24:	69 2f       	mov	r22, r25
    1f26:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    1f2a:	31 c0       	rjmp	.+98     	; 0x1f8e <SSD_u8SetNumber+0x34a>
		case SSD_u8NUMBER6: DIO_u8SetPortValue(SSD -> Port , ~seven_seg[SSD_u8NUMBER6]); break;
    1f2c:	ed 85       	ldd	r30, Y+13	; 0x0d
    1f2e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1f30:	20 81       	ld	r18, Z
    1f32:	88 85       	ldd	r24, Y+8	; 0x08
    1f34:	98 2f       	mov	r25, r24
    1f36:	90 95       	com	r25
    1f38:	82 2f       	mov	r24, r18
    1f3a:	69 2f       	mov	r22, r25
    1f3c:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    1f40:	26 c0       	rjmp	.+76     	; 0x1f8e <SSD_u8SetNumber+0x34a>
		case SSD_u8NUMBER7: DIO_u8SetPortValue(SSD -> Port , ~seven_seg[SSD_u8NUMBER7]); break;
    1f42:	ed 85       	ldd	r30, Y+13	; 0x0d
    1f44:	fe 85       	ldd	r31, Y+14	; 0x0e
    1f46:	20 81       	ld	r18, Z
    1f48:	89 85       	ldd	r24, Y+9	; 0x09
    1f4a:	98 2f       	mov	r25, r24
    1f4c:	90 95       	com	r25
    1f4e:	82 2f       	mov	r24, r18
    1f50:	69 2f       	mov	r22, r25
    1f52:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    1f56:	1b c0       	rjmp	.+54     	; 0x1f8e <SSD_u8SetNumber+0x34a>
		case SSD_u8NUMBER8: DIO_u8SetPortValue(SSD -> Port , ~seven_seg[SSD_u8NUMBER8]); break;
    1f58:	ed 85       	ldd	r30, Y+13	; 0x0d
    1f5a:	fe 85       	ldd	r31, Y+14	; 0x0e
    1f5c:	20 81       	ld	r18, Z
    1f5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f60:	98 2f       	mov	r25, r24
    1f62:	90 95       	com	r25
    1f64:	82 2f       	mov	r24, r18
    1f66:	69 2f       	mov	r22, r25
    1f68:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    1f6c:	10 c0       	rjmp	.+32     	; 0x1f8e <SSD_u8SetNumber+0x34a>
		case SSD_u8NUMBER9: DIO_u8SetPortValue(SSD -> Port , ~seven_seg[SSD_u8NUMBER9]); break;
    1f6e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1f70:	fe 85       	ldd	r31, Y+14	; 0x0e
    1f72:	20 81       	ld	r18, Z
    1f74:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f76:	98 2f       	mov	r25, r24
    1f78:	90 95       	com	r25
    1f7a:	82 2f       	mov	r24, r18
    1f7c:	69 2f       	mov	r22, r25
    1f7e:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    1f82:	05 c0       	rjmp	.+10     	; 0x1f8e <SSD_u8SetNumber+0x34a>
		default: Local_u8ErrorState = 1; break;
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	89 83       	std	Y+1, r24	; 0x01
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <SSD_u8SetNumber+0x34a>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f90:	67 96       	adiw	r28, 0x17	; 23
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <SSD_u8Enable>:

u8 SSD_u8Enable(SSD_t * SSD)
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <SSD_u8Enable+0x6>
    1fa8:	0f 92       	push	r0
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	9b 83       	std	Y+3, r25	; 0x03
    1fb0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = 0;
    1fb2:	19 82       	std	Y+1, r1	; 0x01
	if((SSD -> ComType) == SSD_u8ANODE)
    1fb4:	ea 81       	ldd	r30, Y+2	; 0x02
    1fb6:	fb 81       	ldd	r31, Y+3	; 0x03
    1fb8:	81 81       	ldd	r24, Z+1	; 0x01
    1fba:	81 30       	cpi	r24, 0x01	; 1
    1fbc:	59 f4       	brne	.+22     	; 0x1fd4 <SSD_u8Enable+0x32>
	{
		DIO_u8SetPinValue(SSD -> EnablePort , SSD -> EnablePin , DIO_u8PIN_HIGH);
    1fbe:	ea 81       	ldd	r30, Y+2	; 0x02
    1fc0:	fb 81       	ldd	r31, Y+3	; 0x03
    1fc2:	82 81       	ldd	r24, Z+2	; 0x02
    1fc4:	ea 81       	ldd	r30, Y+2	; 0x02
    1fc6:	fb 81       	ldd	r31, Y+3	; 0x03
    1fc8:	93 81       	ldd	r25, Z+3	; 0x03
    1fca:	69 2f       	mov	r22, r25
    1fcc:	41 e0       	ldi	r20, 0x01	; 1
    1fce:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
    1fd2:	12 c0       	rjmp	.+36     	; 0x1ff8 <SSD_u8Enable+0x56>
	}
	else if((SSD -> ComType) == SSD_u8CATHODE)
    1fd4:	ea 81       	ldd	r30, Y+2	; 0x02
    1fd6:	fb 81       	ldd	r31, Y+3	; 0x03
    1fd8:	81 81       	ldd	r24, Z+1	; 0x01
    1fda:	88 23       	and	r24, r24
    1fdc:	59 f4       	brne	.+22     	; 0x1ff4 <SSD_u8Enable+0x52>
	{
		DIO_u8SetPinValue(SSD -> EnablePort , SSD -> EnablePin , DIO_u8PIN_LOW);
    1fde:	ea 81       	ldd	r30, Y+2	; 0x02
    1fe0:	fb 81       	ldd	r31, Y+3	; 0x03
    1fe2:	82 81       	ldd	r24, Z+2	; 0x02
    1fe4:	ea 81       	ldd	r30, Y+2	; 0x02
    1fe6:	fb 81       	ldd	r31, Y+3	; 0x03
    1fe8:	93 81       	ldd	r25, Z+3	; 0x03
    1fea:	69 2f       	mov	r22, r25
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <SSD_u8Enable+0x56>
	}
	else
	{
		Local_u8ErrorState = 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	08 95       	ret

00002006 <SSD_u8Disable>:

u8 SSD_u8Disable(SSD_t * SSD)
{
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	00 d0       	rcall	.+0      	; 0x200c <SSD_u8Disable+0x6>
    200c:	0f 92       	push	r0
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	9b 83       	std	Y+3, r25	; 0x03
    2014:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = 0;
    2016:	19 82       	std	Y+1, r1	; 0x01
	if((SSD -> ComType) == SSD_u8ANODE)
    2018:	ea 81       	ldd	r30, Y+2	; 0x02
    201a:	fb 81       	ldd	r31, Y+3	; 0x03
    201c:	81 81       	ldd	r24, Z+1	; 0x01
    201e:	81 30       	cpi	r24, 0x01	; 1
    2020:	59 f4       	brne	.+22     	; 0x2038 <SSD_u8Disable+0x32>
	{
		DIO_u8SetPinValue(SSD -> EnablePort , SSD -> EnablePin , DIO_u8PIN_LOW);
    2022:	ea 81       	ldd	r30, Y+2	; 0x02
    2024:	fb 81       	ldd	r31, Y+3	; 0x03
    2026:	82 81       	ldd	r24, Z+2	; 0x02
    2028:	ea 81       	ldd	r30, Y+2	; 0x02
    202a:	fb 81       	ldd	r31, Y+3	; 0x03
    202c:	93 81       	ldd	r25, Z+3	; 0x03
    202e:	69 2f       	mov	r22, r25
    2030:	40 e0       	ldi	r20, 0x00	; 0
    2032:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
    2036:	12 c0       	rjmp	.+36     	; 0x205c <SSD_u8Disable+0x56>
	}
	else if((SSD -> ComType) == SSD_u8CATHODE)
    2038:	ea 81       	ldd	r30, Y+2	; 0x02
    203a:	fb 81       	ldd	r31, Y+3	; 0x03
    203c:	81 81       	ldd	r24, Z+1	; 0x01
    203e:	88 23       	and	r24, r24
    2040:	59 f4       	brne	.+22     	; 0x2058 <SSD_u8Disable+0x52>
	{
		DIO_u8SetPinValue(SSD -> EnablePort , SSD -> EnablePin , DIO_u8PIN_HIGH);
    2042:	ea 81       	ldd	r30, Y+2	; 0x02
    2044:	fb 81       	ldd	r31, Y+3	; 0x03
    2046:	82 81       	ldd	r24, Z+2	; 0x02
    2048:	ea 81       	ldd	r30, Y+2	; 0x02
    204a:	fb 81       	ldd	r31, Y+3	; 0x03
    204c:	93 81       	ldd	r25, Z+3	; 0x03
    204e:	69 2f       	mov	r22, r25
    2050:	41 e0       	ldi	r20, 0x01	; 1
    2052:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
    2056:	02 c0       	rjmp	.+4      	; 0x205c <SSD_u8Disable+0x56>
	}
	else
	{
		Local_u8ErrorState = 1;
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <SW_u8GetState>:
#include "SW_interface.h"
#include "SW_config.h"
#include "SW_private.h"

u8 SW_u8GetState(SW_t * SW , u8* Copy_pu8State)
{
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	00 d0       	rcall	.+0      	; 0x2070 <SW_u8GetState+0x6>
    2070:	00 d0       	rcall	.+0      	; 0x2072 <SW_u8GetState+0x8>
    2072:	00 d0       	rcall	.+0      	; 0x2074 <SW_u8GetState+0xa>
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	9c 83       	std	Y+4, r25	; 0x04
    207a:	8b 83       	std	Y+3, r24	; 0x03
    207c:	7e 83       	std	Y+6, r23	; 0x06
    207e:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorState = 0;
    2080:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8State = 0;
    2082:	1a 82       	std	Y+2, r1	; 0x02
	if((Copy_pu8State != NULL))
    2084:	8d 81       	ldd	r24, Y+5	; 0x05
    2086:	9e 81       	ldd	r25, Y+6	; 0x06
    2088:	00 97       	sbiw	r24, 0x00	; 0
    208a:	09 f4       	brne	.+2      	; 0x208e <SW_u8GetState+0x24>
    208c:	53 c0       	rjmp	.+166    	; 0x2134 <SW_u8GetState+0xca>
	{
		if((SW -> PullType) == SW_u8PULL_UP)
    208e:	eb 81       	ldd	r30, Y+3	; 0x03
    2090:	fc 81       	ldd	r31, Y+4	; 0x04
    2092:	82 81       	ldd	r24, Z+2	; 0x02
    2094:	88 23       	and	r24, r24
    2096:	19 f5       	brne	.+70     	; 0x20de <SW_u8GetState+0x74>
		{
			DIO_u8SetPinValue(SW -> Port , SW -> Pin , DIO_u8PIN_HIGH);
    2098:	eb 81       	ldd	r30, Y+3	; 0x03
    209a:	fc 81       	ldd	r31, Y+4	; 0x04
    209c:	80 81       	ld	r24, Z
    209e:	eb 81       	ldd	r30, Y+3	; 0x03
    20a0:	fc 81       	ldd	r31, Y+4	; 0x04
    20a2:	91 81       	ldd	r25, Z+1	; 0x01
    20a4:	69 2f       	mov	r22, r25
    20a6:	41 e0       	ldi	r20, 0x01	; 1
    20a8:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
			DIO_u8GetPinValue(SW -> Port , SW -> Pin , &Local_u8State);
    20ac:	eb 81       	ldd	r30, Y+3	; 0x03
    20ae:	fc 81       	ldd	r31, Y+4	; 0x04
    20b0:	80 81       	ld	r24, Z
    20b2:	eb 81       	ldd	r30, Y+3	; 0x03
    20b4:	fc 81       	ldd	r31, Y+4	; 0x04
    20b6:	91 81       	ldd	r25, Z+1	; 0x01
    20b8:	9e 01       	movw	r18, r28
    20ba:	2e 5f       	subi	r18, 0xFE	; 254
    20bc:	3f 4f       	sbci	r19, 0xFF	; 255
    20be:	69 2f       	mov	r22, r25
    20c0:	a9 01       	movw	r20, r18
    20c2:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_u8GetPinValue>

			if(Local_u8State == SW_u8PIN_LOW)
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	88 23       	and	r24, r24
    20ca:	29 f4       	brne	.+10     	; 0x20d6 <SW_u8GetState+0x6c>
			{
				*Copy_pu8State = SW_u8PRESSED;
    20cc:	ed 81       	ldd	r30, Y+5	; 0x05
    20ce:	fe 81       	ldd	r31, Y+6	; 0x06
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	80 83       	st	Z, r24
    20d4:	31 c0       	rjmp	.+98     	; 0x2138 <SW_u8GetState+0xce>
			}
			else
			{
				*Copy_pu8State = SW_u8NOT_PRESSED;
    20d6:	ed 81       	ldd	r30, Y+5	; 0x05
    20d8:	fe 81       	ldd	r31, Y+6	; 0x06
    20da:	10 82       	st	Z, r1
    20dc:	2d c0       	rjmp	.+90     	; 0x2138 <SW_u8GetState+0xce>
			}
		}
		else if((SW -> PullType) == SW_u8PULL_DOWN)
    20de:	eb 81       	ldd	r30, Y+3	; 0x03
    20e0:	fc 81       	ldd	r31, Y+4	; 0x04
    20e2:	82 81       	ldd	r24, Z+2	; 0x02
    20e4:	81 30       	cpi	r24, 0x01	; 1
    20e6:	19 f5       	brne	.+70     	; 0x212e <SW_u8GetState+0xc4>
		{
			DIO_u8SetPinValue(SW -> Port , SW -> Pin , DIO_u8PIN_LOW);
    20e8:	eb 81       	ldd	r30, Y+3	; 0x03
    20ea:	fc 81       	ldd	r31, Y+4	; 0x04
    20ec:	80 81       	ld	r24, Z
    20ee:	eb 81       	ldd	r30, Y+3	; 0x03
    20f0:	fc 81       	ldd	r31, Y+4	; 0x04
    20f2:	91 81       	ldd	r25, Z+1	; 0x01
    20f4:	69 2f       	mov	r22, r25
    20f6:	40 e0       	ldi	r20, 0x00	; 0
    20f8:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
			DIO_u8GetPinValue(SW -> Port , SW -> Pin , &Local_u8State);
    20fc:	eb 81       	ldd	r30, Y+3	; 0x03
    20fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2100:	80 81       	ld	r24, Z
    2102:	eb 81       	ldd	r30, Y+3	; 0x03
    2104:	fc 81       	ldd	r31, Y+4	; 0x04
    2106:	91 81       	ldd	r25, Z+1	; 0x01
    2108:	9e 01       	movw	r18, r28
    210a:	2e 5f       	subi	r18, 0xFE	; 254
    210c:	3f 4f       	sbci	r19, 0xFF	; 255
    210e:	69 2f       	mov	r22, r25
    2110:	a9 01       	movw	r20, r18
    2112:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_u8GetPinValue>

			if(Local_u8State == SW_u8PIN_HIGH)
    2116:	8a 81       	ldd	r24, Y+2	; 0x02
    2118:	81 30       	cpi	r24, 0x01	; 1
    211a:	29 f4       	brne	.+10     	; 0x2126 <SW_u8GetState+0xbc>
			{
				*Copy_pu8State = SW_u8PRESSED;
    211c:	ed 81       	ldd	r30, Y+5	; 0x05
    211e:	fe 81       	ldd	r31, Y+6	; 0x06
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	80 83       	st	Z, r24
    2124:	09 c0       	rjmp	.+18     	; 0x2138 <SW_u8GetState+0xce>
			}
			else
			{
				*Copy_pu8State = SW_u8NOT_PRESSED;
    2126:	ed 81       	ldd	r30, Y+5	; 0x05
    2128:	fe 81       	ldd	r31, Y+6	; 0x06
    212a:	10 82       	st	Z, r1
    212c:	05 c0       	rjmp	.+10     	; 0x2138 <SW_u8GetState+0xce>
			}
		}
		else
		{
			Local_u8ErrorState = 1;
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	89 83       	std	Y+1, r24	; 0x01
    2132:	02 c0       	rjmp	.+4      	; 0x2138 <SW_u8GetState+0xce>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	26 96       	adiw	r28, 0x06	; 6
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	de bf       	out	0x3e, r29	; 62
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	cd bf       	out	0x3d, r28	; 61
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	08 95       	ret

0000214c <TIMER_voidTimer0Init>:
u32 TIMER0_f32OVCounterTmp;
f32 TIMER0_u16Prescaller;
u32 TIMER0_f32CounterCTC;
/**********************************************************************************/
void TIMER_voidTimer0Init(void)
{
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE0);
	CLR_BIT(TIMSK,TIMSK_OCIE0);

	TCNT0=TIMER0_f32PreloodValue;
#elif TIMER0_MODE  == TIMER0_MODE_PWM_PHASE_CORRECT
	SET_BIT(TCCR0,TCCR0_WGM00);
    2154:	a3 e5       	ldi	r26, 0x53	; 83
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e3 e5       	ldi	r30, 0x53	; 83
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	80 64       	ori	r24, 0x40	; 64
    2160:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_WGM01);
    2162:	a3 e5       	ldi	r26, 0x53	; 83
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e3 e5       	ldi	r30, 0x53	; 83
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	87 7f       	andi	r24, 0xF7	; 247
    216e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_COM01);
#elif  TIMER0_COMPARE_OUTPUT_MODE==TIMER0_MODE_TOGGLE
	SET_BIT(TCCR0,TCCR0_COM00);
	CLR_BIT(TCCR0,TCCR0_COM01);
#elif  TIMER0_COMPARE_OUTPUT_MODE==TIMER0_MODE_CLEAR_OC0
	CLR_BIT(TCCR0,TCCR0_COM00);
    2170:	a3 e5       	ldi	r26, 0x53	; 83
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e3 e5       	ldi	r30, 0x53	; 83
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	8f 7e       	andi	r24, 0xEF	; 239
    217c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_COM01);
    217e:	a3 e5       	ldi	r26, 0x53	; 83
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e3 e5       	ldi	r30, 0x53	; 83
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	80 62       	ori	r24, 0x20	; 32
    218a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS00);
	CLR_BIT(TCCR0,TCCR0_CS01);
	SET_BIT(TCCR0,TCCR0_CS02);
	TIMER0_u16Prescaller=256;
#elif  TIMER0_CLOCK_SELECT == TIMER0_SELECT_CLK_DIV_1024
	SET_BIT(TCCR0,TCCR0_CS00);
    218c:	a3 e5       	ldi	r26, 0x53	; 83
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e3 e5       	ldi	r30, 0x53	; 83
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	81 60       	ori	r24, 0x01	; 1
    2198:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
    219a:	a3 e5       	ldi	r26, 0x53	; 83
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	e3 e5       	ldi	r30, 0x53	; 83
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	8d 7f       	andi	r24, 0xFD	; 253
    21a6:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS02);
    21a8:	a3 e5       	ldi	r26, 0x53	; 83
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	e3 e5       	ldi	r30, 0x53	; 83
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	84 60       	ori	r24, 0x04	; 4
    21b4:	8c 93       	st	X, r24
	TIMER0_u16Prescaller=1024;
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	a0 e8       	ldi	r26, 0x80	; 128
    21bc:	b4 e4       	ldi	r27, 0x44	; 68
    21be:	80 93 95 00 	sts	0x0095, r24
    21c2:	90 93 96 00 	sts	0x0096, r25
    21c6:	a0 93 97 00 	sts	0x0097, r26
    21ca:	b0 93 98 00 	sts	0x0098, r27
	SET_BIT(TCCR0,TCCR0_CS00);
	SET_BIT(TCCR0,TCCR0_CS01);
	SET_BIT(TCCR0,TCCR0_CS02);
	TIMER0_u16Prescaller=0;
#endif
}
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <TIMER_voidTimer0Delay>:
/**********************************************************************************/
void TIMER_voidTimer0Delay(u32 Copy_u32DTime,void(*Copy_pFun)(void))
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	00 d0       	rcall	.+0      	; 0x21da <TIMER_voidTimer0Delay+0x6>
    21da:	00 d0       	rcall	.+0      	; 0x21dc <TIMER_voidTimer0Delay+0x8>
    21dc:	00 d0       	rcall	.+0      	; 0x21de <TIMER_voidTimer0Delay+0xa>
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	69 83       	std	Y+1, r22	; 0x01
    21e4:	7a 83       	std	Y+2, r23	; 0x02
    21e6:	8b 83       	std	Y+3, r24	; 0x03
    21e8:	9c 83       	std	Y+4, r25	; 0x04
    21ea:	5e 83       	std	Y+6, r21	; 0x06
    21ec:	4d 83       	std	Y+5, r20	; 0x05
#elif TIMER0_MODE  == TIMER0_MODE_CTC
	f32 Local_f32TCTC=((TIMER0_CTC_OCR0_VALUE)*(TIMER0_u16Prescaller/8000UL));
	TIMER0_f32CounterCTC=((f32)Copy_u32DTime/Local_f32TCTC);
	TIMER0_pSetCallBack=Copy_pFun;
#endif
}
    21ee:	26 96       	adiw	r28, 0x06	; 6
    21f0:	0f b6       	in	r0, 0x3f	; 63
    21f2:	f8 94       	cli
    21f4:	de bf       	out	0x3e, r29	; 62
    21f6:	0f be       	out	0x3f, r0	; 63
    21f8:	cd bf       	out	0x3d, r28	; 61
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <TIMER_voidTimer0GeneratePWM>:
/**********************************************************************************/
void TIMER_voidTimer0GeneratePWM(f32 Copy_u8Intensity)
{
    2200:	0f 93       	push	r16
    2202:	1f 93       	push	r17
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
    220c:	28 97       	sbiw	r28, 0x08	; 8
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	6d 83       	std	Y+5, r22	; 0x05
    221a:	7e 83       	std	Y+6, r23	; 0x06
    221c:	8f 83       	std	Y+7, r24	; 0x07
    221e:	98 87       	std	Y+8, r25	; 0x08
#if TIMER0_MODE  == TIMER0_MODE_PWM_PHASE_CORRECT
	f32 Copy_u8OCRValue;
	Copy_u8OCRValue=(511*Copy_u8Intensity/100);
    2220:	6d 81       	ldd	r22, Y+5	; 0x05
    2222:	7e 81       	ldd	r23, Y+6	; 0x06
    2224:	8f 81       	ldd	r24, Y+7	; 0x07
    2226:	98 85       	ldd	r25, Y+8	; 0x08
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e8       	ldi	r19, 0x80	; 128
    222c:	4f ef       	ldi	r20, 0xFF	; 255
    222e:	53 e4       	ldi	r21, 0x43	; 67
    2230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	bc 01       	movw	r22, r24
    223a:	cd 01       	movw	r24, r26
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	48 ec       	ldi	r20, 0xC8	; 200
    2242:	52 e4       	ldi	r21, 0x42	; 66
    2244:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	89 83       	std	Y+1, r24	; 0x01
    224e:	9a 83       	std	Y+2, r25	; 0x02
    2250:	ab 83       	std	Y+3, r26	; 0x03
    2252:	bc 83       	std	Y+4, r27	; 0x04
	OCR0=Copy_u8OCRValue;
    2254:	0c e5       	ldi	r16, 0x5C	; 92
    2256:	10 e0       	ldi	r17, 0x00	; 0
    2258:	69 81       	ldd	r22, Y+1	; 0x01
    225a:	7a 81       	ldd	r23, Y+2	; 0x02
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	9c 81       	ldd	r25, Y+4	; 0x04
    2260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	f8 01       	movw	r30, r16
    226a:	80 83       	st	Z, r24
#elif TIMER0_MODE  == TIMER0_MODE_FAST_PWM
	f32 Copy_u8OCRValue;
	Copy_u8OCRValue=(256*Copy_u8Intensity/100);
	OCR0=Copy_u8OCRValue;
#endif
}
    226c:	28 96       	adiw	r28, 0x08	; 8
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	de bf       	out	0x3e, r29	; 62
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	cd bf       	out	0x3d, r28	; 61
    2278:	cf 91       	pop	r28
    227a:	df 91       	pop	r29
    227c:	1f 91       	pop	r17
    227e:	0f 91       	pop	r16
    2280:	08 95       	ret

00002282 <__vector_11>:
/**********************************************************************************/
void __vector_11 (void)
{
    2282:	1f 92       	push	r1
    2284:	0f 92       	push	r0
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	0f 92       	push	r0
    228a:	11 24       	eor	r1, r1
    228c:	2f 93       	push	r18
    228e:	3f 93       	push	r19
    2290:	4f 93       	push	r20
    2292:	5f 93       	push	r21
    2294:	6f 93       	push	r22
    2296:	7f 93       	push	r23
    2298:	8f 93       	push	r24
    229a:	9f 93       	push	r25
    229c:	af 93       	push	r26
    229e:	bf 93       	push	r27
    22a0:	ef 93       	push	r30
    22a2:	ff 93       	push	r31
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter=0;
	Local_u16Counter++;
    22ac:	80 91 78 00 	lds	r24, 0x0078
    22b0:	90 91 79 00 	lds	r25, 0x0079
    22b4:	01 96       	adiw	r24, 0x01	; 1
    22b6:	90 93 79 00 	sts	0x0079, r25
    22ba:	80 93 78 00 	sts	0x0078, r24
	if(TIMER0_f32OVCounterTmp==Local_u16Counter)
    22be:	80 91 78 00 	lds	r24, 0x0078
    22c2:	90 91 79 00 	lds	r25, 0x0079
    22c6:	9c 01       	movw	r18, r24
    22c8:	40 e0       	ldi	r20, 0x00	; 0
    22ca:	50 e0       	ldi	r21, 0x00	; 0
    22cc:	80 91 91 00 	lds	r24, 0x0091
    22d0:	90 91 92 00 	lds	r25, 0x0092
    22d4:	a0 91 93 00 	lds	r26, 0x0093
    22d8:	b0 91 94 00 	lds	r27, 0x0094
    22dc:	28 17       	cp	r18, r24
    22de:	39 07       	cpc	r19, r25
    22e0:	4a 07       	cpc	r20, r26
    22e2:	5b 07       	cpc	r21, r27
    22e4:	a1 f4       	brne	.+40     	; 0x230e <__vector_11+0x8c>
	{
		TCNT0=TIMER0_f32PreloodValue;
    22e6:	e2 e5       	ldi	r30, 0x52	; 82
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 91 8d 00 	lds	r24, 0x008D
    22ee:	90 91 8e 00 	lds	r25, 0x008E
    22f2:	a0 91 8f 00 	lds	r26, 0x008F
    22f6:	b0 91 90 00 	lds	r27, 0x0090
    22fa:	80 83       	st	Z, r24
		TIMER0_pSetCallBack();
    22fc:	e0 91 80 00 	lds	r30, 0x0080
    2300:	f0 91 81 00 	lds	r31, 0x0081
    2304:	09 95       	icall
		Local_u16Counter=0;
    2306:	10 92 79 00 	sts	0x0079, r1
    230a:	10 92 78 00 	sts	0x0078, r1
	}
}
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	ff 91       	pop	r31
    2314:	ef 91       	pop	r30
    2316:	bf 91       	pop	r27
    2318:	af 91       	pop	r26
    231a:	9f 91       	pop	r25
    231c:	8f 91       	pop	r24
    231e:	7f 91       	pop	r23
    2320:	6f 91       	pop	r22
    2322:	5f 91       	pop	r21
    2324:	4f 91       	pop	r20
    2326:	3f 91       	pop	r19
    2328:	2f 91       	pop	r18
    232a:	0f 90       	pop	r0
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	0f 90       	pop	r0
    2330:	1f 90       	pop	r1
    2332:	18 95       	reti

00002334 <__vector_10>:
void __vector_10 (void)
{
    2334:	1f 92       	push	r1
    2336:	0f 92       	push	r0
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	0f 92       	push	r0
    233c:	11 24       	eor	r1, r1
    233e:	2f 93       	push	r18
    2340:	3f 93       	push	r19
    2342:	4f 93       	push	r20
    2344:	5f 93       	push	r21
    2346:	6f 93       	push	r22
    2348:	7f 93       	push	r23
    234a:	8f 93       	push	r24
    234c:	9f 93       	push	r25
    234e:	af 93       	push	r26
    2350:	bf 93       	push	r27
    2352:	ef 93       	push	r30
    2354:	ff 93       	push	r31
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u8Counter=0;
	Local_u8Counter++;
    235e:	80 91 7a 00 	lds	r24, 0x007A
    2362:	90 91 7b 00 	lds	r25, 0x007B
    2366:	01 96       	adiw	r24, 0x01	; 1
    2368:	90 93 7b 00 	sts	0x007B, r25
    236c:	80 93 7a 00 	sts	0x007A, r24
	if(TIMER0_f32CounterCTC==Local_u8Counter)
    2370:	80 91 7a 00 	lds	r24, 0x007A
    2374:	90 91 7b 00 	lds	r25, 0x007B
    2378:	9c 01       	movw	r18, r24
    237a:	40 e0       	ldi	r20, 0x00	; 0
    237c:	50 e0       	ldi	r21, 0x00	; 0
    237e:	80 91 a1 00 	lds	r24, 0x00A1
    2382:	90 91 a2 00 	lds	r25, 0x00A2
    2386:	a0 91 a3 00 	lds	r26, 0x00A3
    238a:	b0 91 a4 00 	lds	r27, 0x00A4
    238e:	28 17       	cp	r18, r24
    2390:	39 07       	cpc	r19, r25
    2392:	4a 07       	cpc	r20, r26
    2394:	5b 07       	cpc	r21, r27
    2396:	49 f4       	brne	.+18     	; 0x23aa <__vector_10+0x76>
	{
		Local_u8Counter=0;
    2398:	10 92 7b 00 	sts	0x007B, r1
    239c:	10 92 7a 00 	sts	0x007A, r1
		TIMER0_pSetCallBack();
    23a0:	e0 91 80 00 	lds	r30, 0x0080
    23a4:	f0 91 81 00 	lds	r31, 0x0081
    23a8:	09 95       	icall
	}
}
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	ff 91       	pop	r31
    23b0:	ef 91       	pop	r30
    23b2:	bf 91       	pop	r27
    23b4:	af 91       	pop	r26
    23b6:	9f 91       	pop	r25
    23b8:	8f 91       	pop	r24
    23ba:	7f 91       	pop	r23
    23bc:	6f 91       	pop	r22
    23be:	5f 91       	pop	r21
    23c0:	4f 91       	pop	r20
    23c2:	3f 91       	pop	r19
    23c4:	2f 91       	pop	r18
    23c6:	0f 90       	pop	r0
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	0f 90       	pop	r0
    23cc:	1f 90       	pop	r1
    23ce:	18 95       	reti

000023d0 <TIMER_voidTimer2Init>:
f32 TIMER2_u16Prescaller;
u32 TIMER2_f32CounterCTC;
/**********************************************************************************/

void TIMER_voidTimer2Init(void)
{
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE2);
	CLR_BIT(TIMSK,TIMSK_OCIE2);

	TCNT2=TIMER2_f32PreloodValue;
#elif TIMER2_MODE  == TIMER2_MODE_PWM_PHASE_CORRECT
	SET_BIT(TCCR2,TCCR2_WGM20);
    23d8:	a5 e4       	ldi	r26, 0x45	; 69
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	e5 e4       	ldi	r30, 0x45	; 69
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	80 64       	ori	r24, 0x40	; 64
    23e4:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_WGM21);
    23e6:	a5 e4       	ldi	r26, 0x45	; 69
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	e5 e4       	ldi	r30, 0x45	; 69
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	87 7f       	andi	r24, 0xF7	; 247
    23f2:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_COM21);
#elif  TIMER2_COMPARE_OUTPUT_MODE==TIMER2_MODE_TOGGLE
	SET_BIT(TCCR2,TCCR2_COM20);
	CLR_BIT(TCCR2,TCCR2_COM21);
#elif  TIMER2_COMPARE_OUTPUT_MODE==TIMER2_MODE_CLEAR_OC2
	CLR_BIT(TCCR2,TCCR2_COM20);
    23f4:	a5 e4       	ldi	r26, 0x45	; 69
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e5 e4       	ldi	r30, 0x45	; 69
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	8f 7e       	andi	r24, 0xEF	; 239
    2400:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_COM21);
    2402:	a5 e4       	ldi	r26, 0x45	; 69
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e5 e4       	ldi	r30, 0x45	; 69
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	80 62       	ori	r24, 0x20	; 32
    240e:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_CS20);
	CLR_BIT(TCCR2,TCCR2_CS21);
	SET_BIT(TCCR2,TCCR2_CS22);
	TIMER2_u16Prescaller=256;
#elif  TIMER2_CLOCK_SELECT == TIMER2_SELECT_CLK_DIV_1024
	SET_BIT(TCCR2,TCCR2_CS20);
    2410:	a5 e4       	ldi	r26, 0x45	; 69
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	e5 e4       	ldi	r30, 0x45	; 69
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	81 60       	ori	r24, 0x01	; 1
    241c:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_CS21);
    241e:	a5 e4       	ldi	r26, 0x45	; 69
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	e5 e4       	ldi	r30, 0x45	; 69
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	8d 7f       	andi	r24, 0xFD	; 253
    242a:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_CS22);
    242c:	a5 e4       	ldi	r26, 0x45	; 69
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	e5 e4       	ldi	r30, 0x45	; 69
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	84 60       	ori	r24, 0x04	; 4
    2438:	8c 93       	st	X, r24
	TIMER2_u16Prescaller=1024;
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	a0 e8       	ldi	r26, 0x80	; 128
    2440:	b4 e4       	ldi	r27, 0x44	; 68
    2442:	80 93 9d 00 	sts	0x009D, r24
    2446:	90 93 9e 00 	sts	0x009E, r25
    244a:	a0 93 9f 00 	sts	0x009F, r26
    244e:	b0 93 a0 00 	sts	0x00A0, r27
	SET_BIT(TCCR2,TCCR2_CS20);
	SET_BIT(TCCR2,TCCR2_CS21);
	SET_BIT(TCCR2,TCCR2_CS22);
	TIMER2_u16Prescaller=0;
#endif
}
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <TIMER_voidTimer2Delay>:
/**********************************************************************************/
void TIMER_voidTimer2Delay(u32 Copy_u32DTime,void(*Copy_pFun)(void))
{
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	00 d0       	rcall	.+0      	; 0x245e <TIMER_voidTimer2Delay+0x6>
    245e:	00 d0       	rcall	.+0      	; 0x2460 <TIMER_voidTimer2Delay+0x8>
    2460:	00 d0       	rcall	.+0      	; 0x2462 <TIMER_voidTimer2Delay+0xa>
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	69 83       	std	Y+1, r22	; 0x01
    2468:	7a 83       	std	Y+2, r23	; 0x02
    246a:	8b 83       	std	Y+3, r24	; 0x03
    246c:	9c 83       	std	Y+4, r25	; 0x04
    246e:	5e 83       	std	Y+6, r21	; 0x06
    2470:	4d 83       	std	Y+5, r20	; 0x05
#elif TIMER2_MODE  == TIMER2_MODE_CTC
	f32 Local_f32TCTC=((TIMER2_CTC_OCR2_VALUE)*(TIMER2_u16Prescaller/8000UL));
	TIMER2_f32CounterCTC=((f32)Copy_u32DTime/Local_f32TCTC);
	TIMER2_pSetCallBack=Copy_pFun;
#endif
}
    2472:	26 96       	adiw	r28, 0x06	; 6
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	f8 94       	cli
    2478:	de bf       	out	0x3e, r29	; 62
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	cd bf       	out	0x3d, r28	; 61
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	08 95       	ret

00002484 <TIMER_voidTimer2GeneratePWM>:
/**********************************************************************************/
void TIMER_voidTimer2GeneratePWM(f32 Copy_u8Intensity)
{
    2484:	0f 93       	push	r16
    2486:	1f 93       	push	r17
    2488:	df 93       	push	r29
    248a:	cf 93       	push	r28
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
    2490:	28 97       	sbiw	r28, 0x08	; 8
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	cd bf       	out	0x3d, r28	; 61
    249c:	6d 83       	std	Y+5, r22	; 0x05
    249e:	7e 83       	std	Y+6, r23	; 0x06
    24a0:	8f 83       	std	Y+7, r24	; 0x07
    24a2:	98 87       	std	Y+8, r25	; 0x08
#if TIMER2_MODE  == TIMER2_MODE_PWM_PHASE_CORRECT
	f32 Copy_u8OCRValue;
	Copy_u8OCRValue=(511*Copy_u8Intensity/100);
    24a4:	6d 81       	ldd	r22, Y+5	; 0x05
    24a6:	7e 81       	ldd	r23, Y+6	; 0x06
    24a8:	8f 81       	ldd	r24, Y+7	; 0x07
    24aa:	98 85       	ldd	r25, Y+8	; 0x08
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e8       	ldi	r19, 0x80	; 128
    24b0:	4f ef       	ldi	r20, 0xFF	; 255
    24b2:	53 e4       	ldi	r21, 0x43	; 67
    24b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	bc 01       	movw	r22, r24
    24be:	cd 01       	movw	r24, r26
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	48 ec       	ldi	r20, 0xC8	; 200
    24c6:	52 e4       	ldi	r21, 0x42	; 66
    24c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	89 83       	std	Y+1, r24	; 0x01
    24d2:	9a 83       	std	Y+2, r25	; 0x02
    24d4:	ab 83       	std	Y+3, r26	; 0x03
    24d6:	bc 83       	std	Y+4, r27	; 0x04
	OCR2=Copy_u8OCRValue;
    24d8:	03 e4       	ldi	r16, 0x43	; 67
    24da:	10 e0       	ldi	r17, 0x00	; 0
    24dc:	69 81       	ldd	r22, Y+1	; 0x01
    24de:	7a 81       	ldd	r23, Y+2	; 0x02
    24e0:	8b 81       	ldd	r24, Y+3	; 0x03
    24e2:	9c 81       	ldd	r25, Y+4	; 0x04
    24e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	f8 01       	movw	r30, r16
    24ee:	80 83       	st	Z, r24
#elif TIMER2_MODE  == TIMER2_MODE_FAST_PWM
	f32 Copy_u8OCRValue;
	Copy_u8OCRValue=(256*Copy_u8Intensity/100);
	OCR2=Copy_u8OCRValue;
#endif
}
    24f0:	28 96       	adiw	r28, 0x08	; 8
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
    24fc:	cf 91       	pop	r28
    24fe:	df 91       	pop	r29
    2500:	1f 91       	pop	r17
    2502:	0f 91       	pop	r16
    2504:	08 95       	ret

00002506 <__vector_4>:
/**********************************************************************************/
void __vector_4 (void)
{
    2506:	1f 92       	push	r1
    2508:	0f 92       	push	r0
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	0f 92       	push	r0
    250e:	11 24       	eor	r1, r1
    2510:	2f 93       	push	r18
    2512:	3f 93       	push	r19
    2514:	4f 93       	push	r20
    2516:	5f 93       	push	r21
    2518:	6f 93       	push	r22
    251a:	7f 93       	push	r23
    251c:	8f 93       	push	r24
    251e:	9f 93       	push	r25
    2520:	af 93       	push	r26
    2522:	bf 93       	push	r27
    2524:	ef 93       	push	r30
    2526:	ff 93       	push	r31
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter=0;
	Local_u16Counter++;
    2530:	80 91 7c 00 	lds	r24, 0x007C
    2534:	90 91 7d 00 	lds	r25, 0x007D
    2538:	01 96       	adiw	r24, 0x01	; 1
    253a:	90 93 7d 00 	sts	0x007D, r25
    253e:	80 93 7c 00 	sts	0x007C, r24
	if(TIMER2_f32OVCounter==Local_u16Counter)
    2542:	80 91 7c 00 	lds	r24, 0x007C
    2546:	90 91 7d 00 	lds	r25, 0x007D
    254a:	9c 01       	movw	r18, r24
    254c:	40 e0       	ldi	r20, 0x00	; 0
    254e:	50 e0       	ldi	r21, 0x00	; 0
    2550:	80 91 99 00 	lds	r24, 0x0099
    2554:	90 91 9a 00 	lds	r25, 0x009A
    2558:	a0 91 9b 00 	lds	r26, 0x009B
    255c:	b0 91 9c 00 	lds	r27, 0x009C
    2560:	28 17       	cp	r18, r24
    2562:	39 07       	cpc	r19, r25
    2564:	4a 07       	cpc	r20, r26
    2566:	5b 07       	cpc	r21, r27
    2568:	a1 f4       	brne	.+40     	; 0x2592 <__vector_4+0x8c>
	{
		TCNT2=TIMER2_f32PreloodValue;
    256a:	e4 e4       	ldi	r30, 0x44	; 68
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 91 a9 00 	lds	r24, 0x00A9
    2572:	90 91 aa 00 	lds	r25, 0x00AA
    2576:	a0 91 ab 00 	lds	r26, 0x00AB
    257a:	b0 91 ac 00 	lds	r27, 0x00AC
    257e:	80 83       	st	Z, r24
		TIMER2_pSetCallBack();
    2580:	e0 91 84 00 	lds	r30, 0x0084
    2584:	f0 91 85 00 	lds	r31, 0x0085
    2588:	09 95       	icall
		Local_u16Counter=0;
    258a:	10 92 7d 00 	sts	0x007D, r1
    258e:	10 92 7c 00 	sts	0x007C, r1
	}
}
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	ff 91       	pop	r31
    2598:	ef 91       	pop	r30
    259a:	bf 91       	pop	r27
    259c:	af 91       	pop	r26
    259e:	9f 91       	pop	r25
    25a0:	8f 91       	pop	r24
    25a2:	7f 91       	pop	r23
    25a4:	6f 91       	pop	r22
    25a6:	5f 91       	pop	r21
    25a8:	4f 91       	pop	r20
    25aa:	3f 91       	pop	r19
    25ac:	2f 91       	pop	r18
    25ae:	0f 90       	pop	r0
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	0f 90       	pop	r0
    25b4:	1f 90       	pop	r1
    25b6:	18 95       	reti

000025b8 <__vector_3>:
void __vector_3 (void)
{
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u8Counter=0;
	Local_u8Counter++;
    25c0:	80 91 7e 00 	lds	r24, 0x007E
    25c4:	90 91 7f 00 	lds	r25, 0x007F
    25c8:	01 96       	adiw	r24, 0x01	; 1
    25ca:	90 93 7f 00 	sts	0x007F, r25
    25ce:	80 93 7e 00 	sts	0x007E, r24
	if(TIMER2_f32CounterCTC==Local_u8Counter)
    25d2:	80 91 7e 00 	lds	r24, 0x007E
    25d6:	90 91 7f 00 	lds	r25, 0x007F
    25da:	9c 01       	movw	r18, r24
    25dc:	40 e0       	ldi	r20, 0x00	; 0
    25de:	50 e0       	ldi	r21, 0x00	; 0
    25e0:	80 91 a5 00 	lds	r24, 0x00A5
    25e4:	90 91 a6 00 	lds	r25, 0x00A6
    25e8:	a0 91 a7 00 	lds	r26, 0x00A7
    25ec:	b0 91 a8 00 	lds	r27, 0x00A8
    25f0:	28 17       	cp	r18, r24
    25f2:	39 07       	cpc	r19, r25
    25f4:	4a 07       	cpc	r20, r26
    25f6:	5b 07       	cpc	r21, r27
    25f8:	49 f4       	brne	.+18     	; 0x260c <__vector_3+0x54>
	{
		TIMER2_pSetCallBack();
    25fa:	e0 91 84 00 	lds	r30, 0x0084
    25fe:	f0 91 85 00 	lds	r31, 0x0085
    2602:	09 95       	icall
		Local_u8Counter=0;
    2604:	10 92 7f 00 	sts	0x007F, r1
    2608:	10 92 7e 00 	sts	0x007E, r1
	}
}
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <TIMER_voidTimer1Enable>:
 *                                                               Timer 1                                                              *
 **************************************************************************************************************************************/
u8 TIMER1_u8MODEPWM;
/************************************************************************************************************************************/
void TIMER_voidTimer1Enable(u8 Copy_u8Timer1Mode,u8 Copy_u8Timer1ModeChannelA,u8 Copy_u8Timer1ModeChannelB)
{
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	29 97       	sbiw	r28, 0x09	; 9
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	89 83       	std	Y+1, r24	; 0x01
    2628:	6a 83       	std	Y+2, r22	; 0x02
    262a:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8Timer1Mode)
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	39 87       	std	Y+9, r19	; 0x09
    2634:	28 87       	std	Y+8, r18	; 0x08
    2636:	88 85       	ldd	r24, Y+8	; 0x08
    2638:	99 85       	ldd	r25, Y+9	; 0x09
    263a:	87 30       	cpi	r24, 0x07	; 7
    263c:	91 05       	cpc	r25, r1
    263e:	09 f4       	brne	.+2      	; 0x2642 <TIMER_voidTimer1Enable+0x30>
    2640:	6b c1       	rjmp	.+726    	; 0x2918 <TIMER_voidTimer1Enable+0x306>
    2642:	28 85       	ldd	r18, Y+8	; 0x08
    2644:	39 85       	ldd	r19, Y+9	; 0x09
    2646:	28 30       	cpi	r18, 0x08	; 8
    2648:	31 05       	cpc	r19, r1
    264a:	4c f5       	brge	.+82     	; 0x269e <TIMER_voidTimer1Enable+0x8c>
    264c:	88 85       	ldd	r24, Y+8	; 0x08
    264e:	99 85       	ldd	r25, Y+9	; 0x09
    2650:	83 30       	cpi	r24, 0x03	; 3
    2652:	91 05       	cpc	r25, r1
    2654:	09 f4       	brne	.+2      	; 0x2658 <TIMER_voidTimer1Enable+0x46>
    2656:	c7 c0       	rjmp	.+398    	; 0x27e6 <TIMER_voidTimer1Enable+0x1d4>
    2658:	28 85       	ldd	r18, Y+8	; 0x08
    265a:	39 85       	ldd	r19, Y+9	; 0x09
    265c:	24 30       	cpi	r18, 0x04	; 4
    265e:	31 05       	cpc	r19, r1
    2660:	8c f4       	brge	.+34     	; 0x2684 <TIMER_voidTimer1Enable+0x72>
    2662:	88 85       	ldd	r24, Y+8	; 0x08
    2664:	99 85       	ldd	r25, Y+9	; 0x09
    2666:	81 30       	cpi	r24, 0x01	; 1
    2668:	91 05       	cpc	r25, r1
    266a:	09 f4       	brne	.+2      	; 0x266e <TIMER_voidTimer1Enable+0x5c>
    266c:	7c c0       	rjmp	.+248    	; 0x2766 <TIMER_voidTimer1Enable+0x154>
    266e:	28 85       	ldd	r18, Y+8	; 0x08
    2670:	39 85       	ldd	r19, Y+9	; 0x09
    2672:	22 30       	cpi	r18, 0x02	; 2
    2674:	31 05       	cpc	r19, r1
    2676:	0c f0       	brlt	.+2      	; 0x267a <TIMER_voidTimer1Enable+0x68>
    2678:	96 c0       	rjmp	.+300    	; 0x27a6 <TIMER_voidTimer1Enable+0x194>
    267a:	88 85       	ldd	r24, Y+8	; 0x08
    267c:	99 85       	ldd	r25, Y+9	; 0x09
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	c9 f1       	breq	.+114    	; 0x26f4 <TIMER_voidTimer1Enable+0xe2>
    2682:	50 c2       	rjmp	.+1184   	; 0x2b24 <TIMER_voidTimer1Enable+0x512>
    2684:	28 85       	ldd	r18, Y+8	; 0x08
    2686:	39 85       	ldd	r19, Y+9	; 0x09
    2688:	25 30       	cpi	r18, 0x05	; 5
    268a:	31 05       	cpc	r19, r1
    268c:	09 f4       	brne	.+2      	; 0x2690 <TIMER_voidTimer1Enable+0x7e>
    268e:	04 c1       	rjmp	.+520    	; 0x2898 <TIMER_voidTimer1Enable+0x286>
    2690:	88 85       	ldd	r24, Y+8	; 0x08
    2692:	99 85       	ldd	r25, Y+9	; 0x09
    2694:	86 30       	cpi	r24, 0x06	; 6
    2696:	91 05       	cpc	r25, r1
    2698:	0c f0       	brlt	.+2      	; 0x269c <TIMER_voidTimer1Enable+0x8a>
    269a:	1e c1       	rjmp	.+572    	; 0x28d8 <TIMER_voidTimer1Enable+0x2c6>
    269c:	c4 c0       	rjmp	.+392    	; 0x2826 <TIMER_voidTimer1Enable+0x214>
    269e:	28 85       	ldd	r18, Y+8	; 0x08
    26a0:	39 85       	ldd	r19, Y+9	; 0x09
    26a2:	2b 30       	cpi	r18, 0x0B	; 11
    26a4:	31 05       	cpc	r19, r1
    26a6:	09 f4       	brne	.+2      	; 0x26aa <TIMER_voidTimer1Enable+0x98>
    26a8:	ae c1       	rjmp	.+860    	; 0x2a06 <TIMER_voidTimer1Enable+0x3f4>
    26aa:	88 85       	ldd	r24, Y+8	; 0x08
    26ac:	99 85       	ldd	r25, Y+9	; 0x09
    26ae:	8c 30       	cpi	r24, 0x0C	; 12
    26b0:	91 05       	cpc	r25, r1
    26b2:	6c f4       	brge	.+26     	; 0x26ce <TIMER_voidTimer1Enable+0xbc>
    26b4:	28 85       	ldd	r18, Y+8	; 0x08
    26b6:	39 85       	ldd	r19, Y+9	; 0x09
    26b8:	29 30       	cpi	r18, 0x09	; 9
    26ba:	31 05       	cpc	r19, r1
    26bc:	09 f4       	brne	.+2      	; 0x26c0 <TIMER_voidTimer1Enable+0xae>
    26be:	69 c1       	rjmp	.+722    	; 0x2992 <TIMER_voidTimer1Enable+0x380>
    26c0:	88 85       	ldd	r24, Y+8	; 0x08
    26c2:	99 85       	ldd	r25, Y+9	; 0x09
    26c4:	8a 30       	cpi	r24, 0x0A	; 10
    26c6:	91 05       	cpc	r25, r1
    26c8:	0c f0       	brlt	.+2      	; 0x26cc <TIMER_voidTimer1Enable+0xba>
    26ca:	80 c1       	rjmp	.+768    	; 0x29cc <TIMER_voidTimer1Enable+0x3ba>
    26cc:	45 c1       	rjmp	.+650    	; 0x2958 <TIMER_voidTimer1Enable+0x346>
    26ce:	28 85       	ldd	r18, Y+8	; 0x08
    26d0:	39 85       	ldd	r19, Y+9	; 0x09
    26d2:	2e 30       	cpi	r18, 0x0E	; 14
    26d4:	31 05       	cpc	r19, r1
    26d6:	09 f4       	brne	.+2      	; 0x26da <TIMER_voidTimer1Enable+0xc8>
    26d8:	ec c1       	rjmp	.+984    	; 0x2ab2 <TIMER_voidTimer1Enable+0x4a0>
    26da:	88 85       	ldd	r24, Y+8	; 0x08
    26dc:	99 85       	ldd	r25, Y+9	; 0x09
    26de:	8f 30       	cpi	r24, 0x0F	; 15
    26e0:	91 05       	cpc	r25, r1
    26e2:	09 f4       	brne	.+2      	; 0x26e6 <TIMER_voidTimer1Enable+0xd4>
    26e4:	03 c2       	rjmp	.+1030   	; 0x2aec <TIMER_voidTimer1Enable+0x4da>
    26e6:	28 85       	ldd	r18, Y+8	; 0x08
    26e8:	39 85       	ldd	r19, Y+9	; 0x09
    26ea:	2c 30       	cpi	r18, 0x0C	; 12
    26ec:	31 05       	cpc	r19, r1
    26ee:	09 f4       	brne	.+2      	; 0x26f2 <TIMER_voidTimer1Enable+0xe0>
    26f0:	a7 c1       	rjmp	.+846    	; 0x2a40 <TIMER_voidTimer1Enable+0x42e>
    26f2:	18 c2       	rjmp	.+1072   	; 0x2b24 <TIMER_voidTimer1Enable+0x512>
	{
	case  TIMER1_MODE_NORMAL :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    26f4:	af e4       	ldi	r26, 0x4F	; 79
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	ef e4       	ldi	r30, 0x4F	; 79
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	8e 7f       	andi	r24, 0xFE	; 254
    2700:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2702:	af e4       	ldi	r26, 0x4F	; 79
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	ef e4       	ldi	r30, 0x4F	; 79
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	8d 7f       	andi	r24, 0xFD	; 253
    270e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2710:	ae e4       	ldi	r26, 0x4E	; 78
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	ee e4       	ldi	r30, 0x4E	; 78
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	87 7f       	andi	r24, 0xF7	; 247
    271c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    271e:	ae e4       	ldi	r26, 0x4E	; 78
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	ee e4       	ldi	r30, 0x4E	; 78
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	8f 7e       	andi	r24, 0xEF	; 239
    272a:	8c 93       	st	X, r24

		SET_BIT(TIMSK,TIMSK_TOIE1);
    272c:	a9 e5       	ldi	r26, 0x59	; 89
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	e9 e5       	ldi	r30, 0x59	; 89
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	84 60       	ori	r24, 0x04	; 4
    2738:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_OCIE1B);
    273a:	a9 e5       	ldi	r26, 0x59	; 89
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e9 e5       	ldi	r30, 0x59	; 89
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	87 7f       	andi	r24, 0xF7	; 247
    2746:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_OCIE1A);
    2748:	a9 e5       	ldi	r26, 0x59	; 89
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	e9 e5       	ldi	r30, 0x59	; 89
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	8f 7e       	andi	r24, 0xEF	; 239
    2754:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    2756:	a9 e5       	ldi	r26, 0x59	; 89
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e9 e5       	ldi	r30, 0x59	; 89
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	8f 7d       	andi	r24, 0xDF	; 223
    2762:	8c 93       	st	X, r24
    2764:	df c1       	rjmp	.+958    	; 0x2b24 <TIMER_voidTimer1Enable+0x512>

		//TIMER_u16_TCNT1=TIMER_f32Timer1PreloodValue;
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_8 :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    2766:	af e4       	ldi	r26, 0x4F	; 79
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	ef e4       	ldi	r30, 0x4F	; 79
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	80 81       	ld	r24, Z
    2770:	81 60       	ori	r24, 0x01	; 1
    2772:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2774:	af e4       	ldi	r26, 0x4F	; 79
    2776:	b0 e0       	ldi	r27, 0x00	; 0
    2778:	ef e4       	ldi	r30, 0x4F	; 79
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	80 81       	ld	r24, Z
    277e:	8d 7f       	andi	r24, 0xFD	; 253
    2780:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2782:	ae e4       	ldi	r26, 0x4E	; 78
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	ee e4       	ldi	r30, 0x4E	; 78
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	87 7f       	andi	r24, 0xF7	; 247
    278e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2790:	ae e4       	ldi	r26, 0x4E	; 78
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	ee e4       	ldi	r30, 0x4E	; 78
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	8f 7e       	andi	r24, 0xEF	; 239
    279c:	8c 93       	st	X, r24
		TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_8;
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	80 93 8c 00 	sts	0x008C, r24
    27a4:	bf c1       	rjmp	.+894    	; 0x2b24 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_9 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    27a6:	af e4       	ldi	r26, 0x4F	; 79
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	ef e4       	ldi	r30, 0x4F	; 79
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	8e 7f       	andi	r24, 0xFE	; 254
    27b2:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    27b4:	af e4       	ldi	r26, 0x4F	; 79
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	ef e4       	ldi	r30, 0x4F	; 79
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	82 60       	ori	r24, 0x02	; 2
    27c0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    27c2:	ae e4       	ldi	r26, 0x4E	; 78
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	ee e4       	ldi	r30, 0x4E	; 78
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	87 7f       	andi	r24, 0xF7	; 247
    27ce:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    27d0:	ae e4       	ldi	r26, 0x4E	; 78
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	ee e4       	ldi	r30, 0x4E	; 78
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	8f 7e       	andi	r24, 0xEF	; 239
    27dc:	8c 93       	st	X, r24
		TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_9;
    27de:	82 e0       	ldi	r24, 0x02	; 2
    27e0:	80 93 8c 00 	sts	0x008C, r24
    27e4:	9f c1       	rjmp	.+830    	; 0x2b24 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_10 :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    27e6:	af e4       	ldi	r26, 0x4F	; 79
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	ef e4       	ldi	r30, 0x4F	; 79
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	81 60       	ori	r24, 0x01	; 1
    27f2:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    27f4:	af e4       	ldi	r26, 0x4F	; 79
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	ef e4       	ldi	r30, 0x4F	; 79
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	82 60       	ori	r24, 0x02	; 2
    2800:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2802:	ae e4       	ldi	r26, 0x4E	; 78
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	ee e4       	ldi	r30, 0x4E	; 78
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	87 7f       	andi	r24, 0xF7	; 247
    280e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2810:	ae e4       	ldi	r26, 0x4E	; 78
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	ee e4       	ldi	r30, 0x4E	; 78
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	8f 7e       	andi	r24, 0xEF	; 239
    281c:	8c 93       	st	X, r24
		TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_10;
    281e:	83 e0       	ldi	r24, 0x03	; 3
    2820:	80 93 8c 00 	sts	0x008C, r24
    2824:	7f c1       	rjmp	.+766    	; 0x2b24 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_CTC_OCR1A :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2826:	af e4       	ldi	r26, 0x4F	; 79
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	ef e4       	ldi	r30, 0x4F	; 79
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	8e 7f       	andi	r24, 0xFE	; 254
    2832:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2834:	af e4       	ldi	r26, 0x4F	; 79
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	ef e4       	ldi	r30, 0x4F	; 79
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	8d 7f       	andi	r24, 0xFD	; 253
    2840:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    2842:	ae e4       	ldi	r26, 0x4E	; 78
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	ee e4       	ldi	r30, 0x4E	; 78
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	80 81       	ld	r24, Z
    284c:	88 60       	ori	r24, 0x08	; 8
    284e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2850:	ae e4       	ldi	r26, 0x4E	; 78
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	ee e4       	ldi	r30, 0x4E	; 78
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z
    285a:	8f 7e       	andi	r24, 0xEF	; 239
    285c:	8c 93       	st	X, r24

		CLR_BIT(TIMSK,TIMSK_TOIE1);
    285e:	a9 e5       	ldi	r26, 0x59	; 89
    2860:	b0 e0       	ldi	r27, 0x00	; 0
    2862:	e9 e5       	ldi	r30, 0x59	; 89
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	80 81       	ld	r24, Z
    2868:	8b 7f       	andi	r24, 0xFB	; 251
    286a:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_OCIE1B);
    286c:	a9 e5       	ldi	r26, 0x59	; 89
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	e9 e5       	ldi	r30, 0x59	; 89
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	87 7f       	andi	r24, 0xF7	; 247
    2878:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TIMSK_OCIE1A);
    287a:	a9 e5       	ldi	r26, 0x59	; 89
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	e9 e5       	ldi	r30, 0x59	; 89
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	80 61       	ori	r24, 0x10	; 16
    2886:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    2888:	a9 e5       	ldi	r26, 0x59	; 89
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	e9 e5       	ldi	r30, 0x59	; 89
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	80 81       	ld	r24, Z
    2892:	8f 7d       	andi	r24, 0xDF	; 223
    2894:	8c 93       	st	X, r24
    2896:	46 c1       	rjmp	.+652    	; 0x2b24 <TIMER_voidTimer1Enable+0x512>

		break;
	case TIMER1_MODE_FAST_PWM_8 :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    2898:	af e4       	ldi	r26, 0x4F	; 79
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	ef e4       	ldi	r30, 0x4F	; 79
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	81 60       	ori	r24, 0x01	; 1
    28a4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    28a6:	af e4       	ldi	r26, 0x4F	; 79
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	ef e4       	ldi	r30, 0x4F	; 79
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	8d 7f       	andi	r24, 0xFD	; 253
    28b2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    28b4:	ae e4       	ldi	r26, 0x4E	; 78
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	ee e4       	ldi	r30, 0x4E	; 78
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	80 81       	ld	r24, Z
    28be:	88 60       	ori	r24, 0x08	; 8
    28c0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    28c2:	ae e4       	ldi	r26, 0x4E	; 78
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	ee e4       	ldi	r30, 0x4E	; 78
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	8f 7e       	andi	r24, 0xEF	; 239
    28ce:	8c 93       	st	X, r24
		TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_8;
    28d0:	85 e0       	ldi	r24, 0x05	; 5
    28d2:	80 93 8c 00 	sts	0x008C, r24
    28d6:	26 c1       	rjmp	.+588    	; 0x2b24 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_FAST_PWM_9 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    28d8:	af e4       	ldi	r26, 0x4F	; 79
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	ef e4       	ldi	r30, 0x4F	; 79
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	8e 7f       	andi	r24, 0xFE	; 254
    28e4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    28e6:	af e4       	ldi	r26, 0x4F	; 79
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	ef e4       	ldi	r30, 0x4F	; 79
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	82 60       	ori	r24, 0x02	; 2
    28f2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    28f4:	ae e4       	ldi	r26, 0x4E	; 78
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	ee e4       	ldi	r30, 0x4E	; 78
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	88 60       	ori	r24, 0x08	; 8
    2900:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2902:	ae e4       	ldi	r26, 0x4E	; 78
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	ee e4       	ldi	r30, 0x4E	; 78
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	8f 7e       	andi	r24, 0xEF	; 239
    290e:	8c 93       	st	X, r24
		TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_9;
    2910:	86 e0       	ldi	r24, 0x06	; 6
    2912:	80 93 8c 00 	sts	0x008C, r24
    2916:	06 c1       	rjmp	.+524    	; 0x2b24 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_FAST_PWM_10 :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    2918:	af e4       	ldi	r26, 0x4F	; 79
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	ef e4       	ldi	r30, 0x4F	; 79
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	81 60       	ori	r24, 0x01	; 1
    2924:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    2926:	af e4       	ldi	r26, 0x4F	; 79
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	ef e4       	ldi	r30, 0x4F	; 79
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	82 60       	ori	r24, 0x02	; 2
    2932:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    2934:	ae e4       	ldi	r26, 0x4E	; 78
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	ee e4       	ldi	r30, 0x4E	; 78
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	88 60       	ori	r24, 0x08	; 8
    2940:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2942:	ae e4       	ldi	r26, 0x4E	; 78
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	ee e4       	ldi	r30, 0x4E	; 78
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	8f 7e       	andi	r24, 0xEF	; 239
    294e:	8c 93       	st	X, r24
		TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_10;
    2950:	87 e0       	ldi	r24, 0x07	; 7
    2952:	80 93 8c 00 	sts	0x008C, r24
    2956:	e6 c0       	rjmp	.+460    	; 0x2b24 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_PWM_PHASE_AND_FRQUENCY_CORRECT_ICR1 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2958:	af e4       	ldi	r26, 0x4F	; 79
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	ef e4       	ldi	r30, 0x4F	; 79
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	8e 7f       	andi	r24, 0xFE	; 254
    2964:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2966:	af e4       	ldi	r26, 0x4F	; 79
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	ef e4       	ldi	r30, 0x4F	; 79
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
    2970:	8d 7f       	andi	r24, 0xFD	; 253
    2972:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2974:	ae e4       	ldi	r26, 0x4E	; 78
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	ee e4       	ldi	r30, 0x4E	; 78
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	87 7f       	andi	r24, 0xF7	; 247
    2980:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    2982:	ae e4       	ldi	r26, 0x4E	; 78
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	ee e4       	ldi	r30, 0x4E	; 78
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	80 61       	ori	r24, 0x10	; 16
    298e:	8c 93       	st	X, r24
    2990:	c9 c0       	rjmp	.+402    	; 0x2b24 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_PWM_PHASE_AND_FRQUENCY_CORRECT_OCR1A :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    2992:	af e4       	ldi	r26, 0x4F	; 79
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	ef e4       	ldi	r30, 0x4F	; 79
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	81 60       	ori	r24, 0x01	; 1
    299e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    29a0:	af e4       	ldi	r26, 0x4F	; 79
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	ef e4       	ldi	r30, 0x4F	; 79
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	8d 7f       	andi	r24, 0xFD	; 253
    29ac:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    29ae:	ae e4       	ldi	r26, 0x4E	; 78
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	ee e4       	ldi	r30, 0x4E	; 78
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	80 81       	ld	r24, Z
    29b8:	87 7f       	andi	r24, 0xF7	; 247
    29ba:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    29bc:	ae e4       	ldi	r26, 0x4E	; 78
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	ee e4       	ldi	r30, 0x4E	; 78
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	80 81       	ld	r24, Z
    29c6:	80 61       	ori	r24, 0x10	; 16
    29c8:	8c 93       	st	X, r24
    29ca:	ac c0       	rjmp	.+344    	; 0x2b24 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_PWM_PHASE_CORRECT_ICR1 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    29cc:	af e4       	ldi	r26, 0x4F	; 79
    29ce:	b0 e0       	ldi	r27, 0x00	; 0
    29d0:	ef e4       	ldi	r30, 0x4F	; 79
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	8e 7f       	andi	r24, 0xFE	; 254
    29d8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    29da:	af e4       	ldi	r26, 0x4F	; 79
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
    29de:	ef e4       	ldi	r30, 0x4F	; 79
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	80 81       	ld	r24, Z
    29e4:	82 60       	ori	r24, 0x02	; 2
    29e6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    29e8:	ae e4       	ldi	r26, 0x4E	; 78
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	ee e4       	ldi	r30, 0x4E	; 78
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	87 7f       	andi	r24, 0xF7	; 247
    29f4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    29f6:	ae e4       	ldi	r26, 0x4E	; 78
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	ee e4       	ldi	r30, 0x4E	; 78
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	80 61       	ori	r24, 0x10	; 16
    2a02:	8c 93       	st	X, r24
    2a04:	8f c0       	rjmp	.+286    	; 0x2b24 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_PWM_PHASE_CORRECT_OCR1A :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    2a06:	af e4       	ldi	r26, 0x4F	; 79
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	ef e4       	ldi	r30, 0x4F	; 79
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
    2a10:	81 60       	ori	r24, 0x01	; 1
    2a12:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    2a14:	af e4       	ldi	r26, 0x4F	; 79
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	ef e4       	ldi	r30, 0x4F	; 79
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	82 60       	ori	r24, 0x02	; 2
    2a20:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    2a22:	ae e4       	ldi	r26, 0x4E	; 78
    2a24:	b0 e0       	ldi	r27, 0x00	; 0
    2a26:	ee e4       	ldi	r30, 0x4E	; 78
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	87 7f       	andi	r24, 0xF7	; 247
    2a2e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    2a30:	ae e4       	ldi	r26, 0x4E	; 78
    2a32:	b0 e0       	ldi	r27, 0x00	; 0
    2a34:	ee e4       	ldi	r30, 0x4E	; 78
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	80 81       	ld	r24, Z
    2a3a:	80 61       	ori	r24, 0x10	; 16
    2a3c:	8c 93       	st	X, r24
    2a3e:	72 c0       	rjmp	.+228    	; 0x2b24 <TIMER_voidTimer1Enable+0x512>
		break;
	case TIMER1_MODE_CTC_ICR1 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2a40:	af e4       	ldi	r26, 0x4F	; 79
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	ef e4       	ldi	r30, 0x4F	; 79
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	8e 7f       	andi	r24, 0xFE	; 254
    2a4c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    2a4e:	af e4       	ldi	r26, 0x4F	; 79
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	ef e4       	ldi	r30, 0x4F	; 79
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	82 60       	ori	r24, 0x02	; 2
    2a5a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    2a5c:	ae e4       	ldi	r26, 0x4E	; 78
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	ee e4       	ldi	r30, 0x4E	; 78
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	88 60       	ori	r24, 0x08	; 8
    2a68:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2a6a:	ae e4       	ldi	r26, 0x4E	; 78
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	ee e4       	ldi	r30, 0x4E	; 78
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	8f 7e       	andi	r24, 0xEF	; 239
    2a76:	8c 93       	st	X, r24

		CLR_BIT(TIMSK,TIMSK_TOIE1);
    2a78:	a9 e5       	ldi	r26, 0x59	; 89
    2a7a:	b0 e0       	ldi	r27, 0x00	; 0
    2a7c:	e9 e5       	ldi	r30, 0x59	; 89
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	80 81       	ld	r24, Z
    2a82:	8b 7f       	andi	r24, 0xFB	; 251
    2a84:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TIMSK_OCIE1B);
    2a86:	a9 e5       	ldi	r26, 0x59	; 89
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	e9 e5       	ldi	r30, 0x59	; 89
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	80 81       	ld	r24, Z
    2a90:	88 60       	ori	r24, 0x08	; 8
    2a92:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TIMSK_OCIE1A);
    2a94:	a9 e5       	ldi	r26, 0x59	; 89
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	e9 e5       	ldi	r30, 0x59	; 89
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z
    2a9e:	80 61       	ori	r24, 0x10	; 16
    2aa0:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    2aa2:	a9 e5       	ldi	r26, 0x59	; 89
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	e9 e5       	ldi	r30, 0x59	; 89
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	8f 7d       	andi	r24, 0xDF	; 223
    2aae:	8c 93       	st	X, r24
    2ab0:	39 c0       	rjmp	.+114    	; 0x2b24 <TIMER_voidTimer1Enable+0x512>

		break;
	case  TIMER1_MODE_FAST_PWM_ICR1 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2ab2:	af e4       	ldi	r26, 0x4F	; 79
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	ef e4       	ldi	r30, 0x4F	; 79
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	8e 7f       	andi	r24, 0xFE	; 254
    2abe:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    2ac0:	af e4       	ldi	r26, 0x4F	; 79
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	ef e4       	ldi	r30, 0x4F	; 79
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	82 60       	ori	r24, 0x02	; 2
    2acc:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    2ace:	ae e4       	ldi	r26, 0x4E	; 78
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	ee e4       	ldi	r30, 0x4E	; 78
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	88 60       	ori	r24, 0x08	; 8
    2ada:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    2adc:	ae e4       	ldi	r26, 0x4E	; 78
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	ee e4       	ldi	r30, 0x4E	; 78
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	80 61       	ori	r24, 0x10	; 16
    2ae8:	8c 93       	st	X, r24
    2aea:	1c c0       	rjmp	.+56     	; 0x2b24 <TIMER_voidTimer1Enable+0x512>
		break;
	case  TIMER1_MODE_FAST_PWM_OCR1A :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    2aec:	af e4       	ldi	r26, 0x4F	; 79
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	ef e4       	ldi	r30, 0x4F	; 79
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	81 60       	ori	r24, 0x01	; 1
    2af8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    2afa:	af e4       	ldi	r26, 0x4F	; 79
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	ef e4       	ldi	r30, 0x4F	; 79
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	80 81       	ld	r24, Z
    2b04:	82 60       	ori	r24, 0x02	; 2
    2b06:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    2b08:	ae e4       	ldi	r26, 0x4E	; 78
    2b0a:	b0 e0       	ldi	r27, 0x00	; 0
    2b0c:	ee e4       	ldi	r30, 0x4E	; 78
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	80 81       	ld	r24, Z
    2b12:	88 60       	ori	r24, 0x08	; 8
    2b14:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    2b16:	ae e4       	ldi	r26, 0x4E	; 78
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	ee e4       	ldi	r30, 0x4E	; 78
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	80 61       	ori	r24, 0x10	; 16
    2b22:	8c 93       	st	X, r24
		break;
	}
	/***********************************************************************************************************/
	switch(Copy_u8Timer1ModeChannelA)
    2b24:	8a 81       	ldd	r24, Y+2	; 0x02
    2b26:	28 2f       	mov	r18, r24
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	3f 83       	std	Y+7, r19	; 0x07
    2b2c:	2e 83       	std	Y+6, r18	; 0x06
    2b2e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b30:	9f 81       	ldd	r25, Y+7	; 0x07
    2b32:	81 30       	cpi	r24, 0x01	; 1
    2b34:	91 05       	cpc	r25, r1
    2b36:	21 f1       	breq	.+72     	; 0x2b80 <TIMER_voidTimer1Enable+0x56e>
    2b38:	2e 81       	ldd	r18, Y+6	; 0x06
    2b3a:	3f 81       	ldd	r19, Y+7	; 0x07
    2b3c:	22 30       	cpi	r18, 0x02	; 2
    2b3e:	31 05       	cpc	r19, r1
    2b40:	2c f4       	brge	.+10     	; 0x2b4c <TIMER_voidTimer1Enable+0x53a>
    2b42:	8e 81       	ldd	r24, Y+6	; 0x06
    2b44:	9f 81       	ldd	r25, Y+7	; 0x07
    2b46:	00 97       	sbiw	r24, 0x00	; 0
    2b48:	61 f0       	breq	.+24     	; 0x2b62 <TIMER_voidTimer1Enable+0x550>
    2b4a:	46 c0       	rjmp	.+140    	; 0x2bd8 <TIMER_voidTimer1Enable+0x5c6>
    2b4c:	2e 81       	ldd	r18, Y+6	; 0x06
    2b4e:	3f 81       	ldd	r19, Y+7	; 0x07
    2b50:	22 30       	cpi	r18, 0x02	; 2
    2b52:	31 05       	cpc	r19, r1
    2b54:	21 f1       	breq	.+72     	; 0x2b9e <TIMER_voidTimer1Enable+0x58c>
    2b56:	8e 81       	ldd	r24, Y+6	; 0x06
    2b58:	9f 81       	ldd	r25, Y+7	; 0x07
    2b5a:	83 30       	cpi	r24, 0x03	; 3
    2b5c:	91 05       	cpc	r25, r1
    2b5e:	71 f1       	breq	.+92     	; 0x2bbc <TIMER_voidTimer1Enable+0x5aa>
    2b60:	3b c0       	rjmp	.+118    	; 0x2bd8 <TIMER_voidTimer1Enable+0x5c6>
	{
	case   TIMER1_MODE_CHANNEL_A_NORMAL :
		CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    2b62:	af e4       	ldi	r26, 0x4F	; 79
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	ef e4       	ldi	r30, 0x4F	; 79
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	80 81       	ld	r24, Z
    2b6c:	8f 7b       	andi	r24, 0xBF	; 191
    2b6e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    2b70:	af e4       	ldi	r26, 0x4F	; 79
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	ef e4       	ldi	r30, 0x4F	; 79
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	80 81       	ld	r24, Z
    2b7a:	8f 77       	andi	r24, 0x7F	; 127
    2b7c:	8c 93       	st	X, r24
    2b7e:	2c c0       	rjmp	.+88     	; 0x2bd8 <TIMER_voidTimer1Enable+0x5c6>
		break;
	case   TIMER1_MODE_CHANNEL_A_TOGGLE :
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2b80:	af e4       	ldi	r26, 0x4F	; 79
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	ef e4       	ldi	r30, 0x4F	; 79
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	80 81       	ld	r24, Z
    2b8a:	80 64       	ori	r24, 0x40	; 64
    2b8c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    2b8e:	af e4       	ldi	r26, 0x4F	; 79
    2b90:	b0 e0       	ldi	r27, 0x00	; 0
    2b92:	ef e4       	ldi	r30, 0x4F	; 79
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	80 81       	ld	r24, Z
    2b98:	8f 77       	andi	r24, 0x7F	; 127
    2b9a:	8c 93       	st	X, r24
    2b9c:	1d c0       	rjmp	.+58     	; 0x2bd8 <TIMER_voidTimer1Enable+0x5c6>
		break;
	case   TIMER1_MODE_CHANNEL_A_CLEAR_OC1A :
		CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    2b9e:	af e4       	ldi	r26, 0x4F	; 79
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	ef e4       	ldi	r30, 0x4F	; 79
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	8f 7b       	andi	r24, 0xBF	; 191
    2baa:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2bac:	af e4       	ldi	r26, 0x4F	; 79
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	ef e4       	ldi	r30, 0x4F	; 79
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	80 68       	ori	r24, 0x80	; 128
    2bb8:	8c 93       	st	X, r24
    2bba:	0e c0       	rjmp	.+28     	; 0x2bd8 <TIMER_voidTimer1Enable+0x5c6>
		break;
	case   TIMER1_MODE_CHANNEL_A_SET_OC1A :
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2bbc:	af e4       	ldi	r26, 0x4F	; 79
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	ef e4       	ldi	r30, 0x4F	; 79
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	80 81       	ld	r24, Z
    2bc6:	80 64       	ori	r24, 0x40	; 64
    2bc8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2bca:	af e4       	ldi	r26, 0x4F	; 79
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	ef e4       	ldi	r30, 0x4F	; 79
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	80 68       	ori	r24, 0x80	; 128
    2bd6:	8c 93       	st	X, r24
		break;
	}
	/***********************************************************************************************************/
	switch(Copy_u8Timer1ModeChannelB)
    2bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bda:	28 2f       	mov	r18, r24
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	3d 83       	std	Y+5, r19	; 0x05
    2be0:	2c 83       	std	Y+4, r18	; 0x04
    2be2:	8c 81       	ldd	r24, Y+4	; 0x04
    2be4:	9d 81       	ldd	r25, Y+5	; 0x05
    2be6:	81 30       	cpi	r24, 0x01	; 1
    2be8:	91 05       	cpc	r25, r1
    2bea:	21 f1       	breq	.+72     	; 0x2c34 <TIMER_voidTimer1Enable+0x622>
    2bec:	2c 81       	ldd	r18, Y+4	; 0x04
    2bee:	3d 81       	ldd	r19, Y+5	; 0x05
    2bf0:	22 30       	cpi	r18, 0x02	; 2
    2bf2:	31 05       	cpc	r19, r1
    2bf4:	2c f4       	brge	.+10     	; 0x2c00 <TIMER_voidTimer1Enable+0x5ee>
    2bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	61 f0       	breq	.+24     	; 0x2c16 <TIMER_voidTimer1Enable+0x604>
    2bfe:	46 c0       	rjmp	.+140    	; 0x2c8c <TIMER_voidTimer1Enable+0x67a>
    2c00:	2c 81       	ldd	r18, Y+4	; 0x04
    2c02:	3d 81       	ldd	r19, Y+5	; 0x05
    2c04:	22 30       	cpi	r18, 0x02	; 2
    2c06:	31 05       	cpc	r19, r1
    2c08:	21 f1       	breq	.+72     	; 0x2c52 <TIMER_voidTimer1Enable+0x640>
    2c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c0c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c0e:	83 30       	cpi	r24, 0x03	; 3
    2c10:	91 05       	cpc	r25, r1
    2c12:	71 f1       	breq	.+92     	; 0x2c70 <TIMER_voidTimer1Enable+0x65e>
    2c14:	3b c0       	rjmp	.+118    	; 0x2c8c <TIMER_voidTimer1Enable+0x67a>
	{
	case  TIMER1_MODE_CHANNEL_B_NORMAL :
		CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    2c16:	af e4       	ldi	r26, 0x4F	; 79
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	ef e4       	ldi	r30, 0x4F	; 79
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	8f 7e       	andi	r24, 0xEF	; 239
    2c22:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    2c24:	af e4       	ldi	r26, 0x4F	; 79
    2c26:	b0 e0       	ldi	r27, 0x00	; 0
    2c28:	ef e4       	ldi	r30, 0x4F	; 79
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	80 81       	ld	r24, Z
    2c2e:	8f 7d       	andi	r24, 0xDF	; 223
    2c30:	8c 93       	st	X, r24
    2c32:	2c c0       	rjmp	.+88     	; 0x2c8c <TIMER_voidTimer1Enable+0x67a>
		break;
	case    TIMER1_MODE_CHANNEL_B_TOGGLE :
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    2c34:	af e4       	ldi	r26, 0x4F	; 79
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	ef e4       	ldi	r30, 0x4F	; 79
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	80 61       	ori	r24, 0x10	; 16
    2c40:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    2c42:	af e4       	ldi	r26, 0x4F	; 79
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	ef e4       	ldi	r30, 0x4F	; 79
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	8f 7d       	andi	r24, 0xDF	; 223
    2c4e:	8c 93       	st	X, r24
    2c50:	1d c0       	rjmp	.+58     	; 0x2c8c <TIMER_voidTimer1Enable+0x67a>
		break;
	case    TIMER1_MODE_CHANNEL_B_CLEAR_OC1B :
		CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    2c52:	af e4       	ldi	r26, 0x4F	; 79
    2c54:	b0 e0       	ldi	r27, 0x00	; 0
    2c56:	ef e4       	ldi	r30, 0x4F	; 79
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	80 81       	ld	r24, Z
    2c5c:	8f 7e       	andi	r24, 0xEF	; 239
    2c5e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2c60:	af e4       	ldi	r26, 0x4F	; 79
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	ef e4       	ldi	r30, 0x4F	; 79
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	80 62       	ori	r24, 0x20	; 32
    2c6c:	8c 93       	st	X, r24
    2c6e:	0e c0       	rjmp	.+28     	; 0x2c8c <TIMER_voidTimer1Enable+0x67a>
		break;
	case    TIMER1_MODE_CHANNEL_B_SET_OC1B :
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    2c70:	af e4       	ldi	r26, 0x4F	; 79
    2c72:	b0 e0       	ldi	r27, 0x00	; 0
    2c74:	ef e4       	ldi	r30, 0x4F	; 79
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	80 81       	ld	r24, Z
    2c7a:	80 61       	ori	r24, 0x10	; 16
    2c7c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2c7e:	af e4       	ldi	r26, 0x4F	; 79
    2c80:	b0 e0       	ldi	r27, 0x00	; 0
    2c82:	ef e4       	ldi	r30, 0x4F	; 79
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	80 62       	ori	r24, 0x20	; 32
    2c8a:	8c 93       	st	X, r24
#elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_CLK_DIV_256
	CLR_BIT(TCCR1B,TCCR1B_CS10);
	CLR_BIT(TCCR1B,TCCR1B_CS11);
	SET_BIT(TCCR1B,TCCR1B_CS12);
#elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_CLK_DIV_1024
	SET_BIT(TCCR1B,TCCR1B_CS10);
    2c8c:	ae e4       	ldi	r26, 0x4E	; 78
    2c8e:	b0 e0       	ldi	r27, 0x00	; 0
    2c90:	ee e4       	ldi	r30, 0x4E	; 78
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	80 81       	ld	r24, Z
    2c96:	81 60       	ori	r24, 0x01	; 1
    2c98:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS11);
    2c9a:	ae e4       	ldi	r26, 0x4E	; 78
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
    2c9e:	ee e4       	ldi	r30, 0x4E	; 78
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	8d 7f       	andi	r24, 0xFD	; 253
    2ca6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS12);
    2ca8:	ae e4       	ldi	r26, 0x4E	; 78
    2caa:	b0 e0       	ldi	r27, 0x00	; 0
    2cac:	ee e4       	ldi	r30, 0x4E	; 78
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	80 81       	ld	r24, Z
    2cb2:	84 60       	ori	r24, 0x04	; 4
    2cb4:	8c 93       	st	X, r24
#elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_EXIT_CLK_T0_RISING
	SET_BIT(TCCR1B,TCCR1B_CS10);
	SET_BIT(TCCR1B,TCCR1B_CS11);
	SET_BIT(TCCR1B,TCCR1B_CS12);
#endif
}
    2cb6:	29 96       	adiw	r28, 0x09	; 9
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	f8 94       	cli
    2cbc:	de bf       	out	0x3e, r29	; 62
    2cbe:	0f be       	out	0x3f, r0	; 63
    2cc0:	cd bf       	out	0x3d, r28	; 61
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <TIMER_voidTimer1GeneratePWMOCR1A>:
/*******************************************************************************************************/
void TIMER_voidTimer1GeneratePWMOCR1A(u8 Copy_u8Intensity)
{
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	00 d0       	rcall	.+0      	; 0x2cce <TIMER_voidTimer1GeneratePWMOCR1A+0x6>
    2cce:	00 d0       	rcall	.+0      	; 0x2cd0 <TIMER_voidTimer1GeneratePWMOCR1A+0x8>
    2cd0:	0f 92       	push	r0
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
    2cd6:	8b 83       	std	Y+3, r24	; 0x03
	u16 Copy_u16OCR1AValue;
	switch(TIMER1_u8MODEPWM)
    2cd8:	80 91 8c 00 	lds	r24, 0x008C
    2cdc:	28 2f       	mov	r18, r24
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	3d 83       	std	Y+5, r19	; 0x05
    2ce2:	2c 83       	std	Y+4, r18	; 0x04
    2ce4:	4c 81       	ldd	r20, Y+4	; 0x04
    2ce6:	5d 81       	ldd	r21, Y+5	; 0x05
    2ce8:	43 30       	cpi	r20, 0x03	; 3
    2cea:	51 05       	cpc	r21, r1
    2cec:	09 f4       	brne	.+2      	; 0x2cf0 <TIMER_voidTimer1GeneratePWMOCR1A+0x28>
    2cee:	5b c0       	rjmp	.+182    	; 0x2da6 <TIMER_voidTimer1GeneratePWMOCR1A+0xde>
    2cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf2:	9d 81       	ldd	r25, Y+5	; 0x05
    2cf4:	84 30       	cpi	r24, 0x04	; 4
    2cf6:	91 05       	cpc	r25, r1
    2cf8:	5c f4       	brge	.+22     	; 0x2d10 <TIMER_voidTimer1GeneratePWMOCR1A+0x48>
    2cfa:	2c 81       	ldd	r18, Y+4	; 0x04
    2cfc:	3d 81       	ldd	r19, Y+5	; 0x05
    2cfe:	21 30       	cpi	r18, 0x01	; 1
    2d00:	31 05       	cpc	r19, r1
    2d02:	c9 f0       	breq	.+50     	; 0x2d36 <TIMER_voidTimer1GeneratePWMOCR1A+0x6e>
    2d04:	4c 81       	ldd	r20, Y+4	; 0x04
    2d06:	5d 81       	ldd	r21, Y+5	; 0x05
    2d08:	42 30       	cpi	r20, 0x02	; 2
    2d0a:	51 05       	cpc	r21, r1
    2d0c:	81 f1       	breq	.+96     	; 0x2d6e <TIMER_voidTimer1GeneratePWMOCR1A+0xa6>
    2d0e:	ab c0       	rjmp	.+342    	; 0x2e66 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
    2d10:	8c 81       	ldd	r24, Y+4	; 0x04
    2d12:	9d 81       	ldd	r25, Y+5	; 0x05
    2d14:	86 30       	cpi	r24, 0x06	; 6
    2d16:	91 05       	cpc	r25, r1
    2d18:	09 f4       	brne	.+2      	; 0x2d1c <TIMER_voidTimer1GeneratePWMOCR1A+0x54>
    2d1a:	75 c0       	rjmp	.+234    	; 0x2e06 <TIMER_voidTimer1GeneratePWMOCR1A+0x13e>
    2d1c:	2c 81       	ldd	r18, Y+4	; 0x04
    2d1e:	3d 81       	ldd	r19, Y+5	; 0x05
    2d20:	27 30       	cpi	r18, 0x07	; 7
    2d22:	31 05       	cpc	r19, r1
    2d24:	09 f4       	brne	.+2      	; 0x2d28 <TIMER_voidTimer1GeneratePWMOCR1A+0x60>
    2d26:	84 c0       	rjmp	.+264    	; 0x2e30 <TIMER_voidTimer1GeneratePWMOCR1A+0x168>
    2d28:	4c 81       	ldd	r20, Y+4	; 0x04
    2d2a:	5d 81       	ldd	r21, Y+5	; 0x05
    2d2c:	45 30       	cpi	r20, 0x05	; 5
    2d2e:	51 05       	cpc	r21, r1
    2d30:	09 f4       	brne	.+2      	; 0x2d34 <TIMER_voidTimer1GeneratePWMOCR1A+0x6c>
    2d32:	55 c0       	rjmp	.+170    	; 0x2dde <TIMER_voidTimer1GeneratePWMOCR1A+0x116>
    2d34:	98 c0       	rjmp	.+304    	; 0x2e66 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	{
	case TIMER1_MODE_PWM_PHASE_CORRECT_8 :
		Copy_u16OCR1AValue=((u16)510*Copy_u8Intensity/100);
    2d36:	8b 81       	ldd	r24, Y+3	; 0x03
    2d38:	28 2f       	mov	r18, r24
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	8e ef       	ldi	r24, 0xFE	; 254
    2d3e:	91 e0       	ldi	r25, 0x01	; 1
    2d40:	ac 01       	movw	r20, r24
    2d42:	24 9f       	mul	r18, r20
    2d44:	c0 01       	movw	r24, r0
    2d46:	25 9f       	mul	r18, r21
    2d48:	90 0d       	add	r25, r0
    2d4a:	34 9f       	mul	r19, r20
    2d4c:	90 0d       	add	r25, r0
    2d4e:	11 24       	eor	r1, r1
    2d50:	24 e6       	ldi	r18, 0x64	; 100
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	b9 01       	movw	r22, r18
    2d56:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodhi4>
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	9a 83       	std	Y+2, r25	; 0x02
    2d5e:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    2d60:	ea e4       	ldi	r30, 0x4A	; 74
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
    2d66:	9a 81       	ldd	r25, Y+2	; 0x02
    2d68:	91 83       	std	Z+1, r25	; 0x01
    2d6a:	80 83       	st	Z, r24
    2d6c:	7c c0       	rjmp	.+248    	; 0x2e66 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_9 :
		Copy_u16OCR1AValue=((u16)1022*Copy_u8Intensity/100);
    2d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d70:	28 2f       	mov	r18, r24
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	8e ef       	ldi	r24, 0xFE	; 254
    2d76:	93 e0       	ldi	r25, 0x03	; 3
    2d78:	ac 01       	movw	r20, r24
    2d7a:	24 9f       	mul	r18, r20
    2d7c:	c0 01       	movw	r24, r0
    2d7e:	25 9f       	mul	r18, r21
    2d80:	90 0d       	add	r25, r0
    2d82:	34 9f       	mul	r19, r20
    2d84:	90 0d       	add	r25, r0
    2d86:	11 24       	eor	r1, r1
    2d88:	24 e6       	ldi	r18, 0x64	; 100
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	b9 01       	movw	r22, r18
    2d8e:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodhi4>
    2d92:	cb 01       	movw	r24, r22
    2d94:	9a 83       	std	Y+2, r25	; 0x02
    2d96:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    2d98:	ea e4       	ldi	r30, 0x4A	; 74
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	89 81       	ldd	r24, Y+1	; 0x01
    2d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2da0:	91 83       	std	Z+1, r25	; 0x01
    2da2:	80 83       	st	Z, r24
    2da4:	60 c0       	rjmp	.+192    	; 0x2e66 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_10 :
		Copy_u16OCR1AValue=((u16)2046*Copy_u8Intensity/100);
    2da6:	8b 81       	ldd	r24, Y+3	; 0x03
    2da8:	28 2f       	mov	r18, r24
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	8e ef       	ldi	r24, 0xFE	; 254
    2dae:	97 e0       	ldi	r25, 0x07	; 7
    2db0:	ac 01       	movw	r20, r24
    2db2:	24 9f       	mul	r18, r20
    2db4:	c0 01       	movw	r24, r0
    2db6:	25 9f       	mul	r18, r21
    2db8:	90 0d       	add	r25, r0
    2dba:	34 9f       	mul	r19, r20
    2dbc:	90 0d       	add	r25, r0
    2dbe:	11 24       	eor	r1, r1
    2dc0:	24 e6       	ldi	r18, 0x64	; 100
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	b9 01       	movw	r22, r18
    2dc6:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodhi4>
    2dca:	cb 01       	movw	r24, r22
    2dcc:	9a 83       	std	Y+2, r25	; 0x02
    2dce:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    2dd0:	ea e4       	ldi	r30, 0x4A	; 74
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd8:	91 83       	std	Z+1, r25	; 0x01
    2dda:	80 83       	st	Z, r24
    2ddc:	44 c0       	rjmp	.+136    	; 0x2e66 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
		break;

	case TIMER1_MODE_FAST_PWM_8 :
		Copy_u16OCR1AValue=(256*Copy_u8Intensity/100);
    2dde:	8b 81       	ldd	r24, Y+3	; 0x03
    2de0:	88 2f       	mov	r24, r24
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	98 2f       	mov	r25, r24
    2de6:	88 27       	eor	r24, r24
    2de8:	24 e6       	ldi	r18, 0x64	; 100
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	b9 01       	movw	r22, r18
    2dee:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__divmodhi4>
    2df2:	cb 01       	movw	r24, r22
    2df4:	9a 83       	std	Y+2, r25	; 0x02
    2df6:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    2df8:	ea e4       	ldi	r30, 0x4A	; 74
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2e00:	91 83       	std	Z+1, r25	; 0x01
    2e02:	80 83       	st	Z, r24
    2e04:	30 c0       	rjmp	.+96     	; 0x2e66 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
		break;
	case TIMER1_MODE_FAST_PWM_9 :
		Copy_u16OCR1AValue=(512*Copy_u8Intensity/100);
    2e06:	8b 81       	ldd	r24, Y+3	; 0x03
    2e08:	88 2f       	mov	r24, r24
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	98 2f       	mov	r25, r24
    2e0e:	88 27       	eor	r24, r24
    2e10:	99 0f       	add	r25, r25
    2e12:	24 e6       	ldi	r18, 0x64	; 100
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	b9 01       	movw	r22, r18
    2e18:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__divmodhi4>
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	9a 83       	std	Y+2, r25	; 0x02
    2e20:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    2e22:	ea e4       	ldi	r30, 0x4A	; 74
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2a:	91 83       	std	Z+1, r25	; 0x01
    2e2c:	80 83       	st	Z, r24
    2e2e:	1b c0       	rjmp	.+54     	; 0x2e66 <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
		break;
	case TIMER1_MODE_FAST_PWM_10 :
		Copy_u16OCR1AValue=((u16)1023*Copy_u8Intensity/100);
    2e30:	8b 81       	ldd	r24, Y+3	; 0x03
    2e32:	28 2f       	mov	r18, r24
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	8f ef       	ldi	r24, 0xFF	; 255
    2e38:	93 e0       	ldi	r25, 0x03	; 3
    2e3a:	ac 01       	movw	r20, r24
    2e3c:	24 9f       	mul	r18, r20
    2e3e:	c0 01       	movw	r24, r0
    2e40:	25 9f       	mul	r18, r21
    2e42:	90 0d       	add	r25, r0
    2e44:	34 9f       	mul	r19, r20
    2e46:	90 0d       	add	r25, r0
    2e48:	11 24       	eor	r1, r1
    2e4a:	24 e6       	ldi	r18, 0x64	; 100
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	b9 01       	movw	r22, r18
    2e50:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodhi4>
    2e54:	cb 01       	movw	r24, r22
    2e56:	9a 83       	std	Y+2, r25	; 0x02
    2e58:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1A=Copy_u16OCR1AValue;
    2e5a:	ea e4       	ldi	r30, 0x4A	; 74
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	89 81       	ldd	r24, Y+1	; 0x01
    2e60:	9a 81       	ldd	r25, Y+2	; 0x02
    2e62:	91 83       	std	Z+1, r25	; 0x01
    2e64:	80 83       	st	Z, r24
		break;
	}
}
    2e66:	0f 90       	pop	r0
    2e68:	0f 90       	pop	r0
    2e6a:	0f 90       	pop	r0
    2e6c:	0f 90       	pop	r0
    2e6e:	0f 90       	pop	r0
    2e70:	cf 91       	pop	r28
    2e72:	df 91       	pop	r29
    2e74:	08 95       	ret

00002e76 <TIMER_voidTimer1GeneratePWMOCR1B>:
void TIMER_voidTimer1GeneratePWMOCR1B(u8 Copy_u8Intensity)
{
    2e76:	df 93       	push	r29
    2e78:	cf 93       	push	r28
    2e7a:	00 d0       	rcall	.+0      	; 0x2e7c <TIMER_voidTimer1GeneratePWMOCR1B+0x6>
    2e7c:	00 d0       	rcall	.+0      	; 0x2e7e <TIMER_voidTimer1GeneratePWMOCR1B+0x8>
    2e7e:	0f 92       	push	r0
    2e80:	cd b7       	in	r28, 0x3d	; 61
    2e82:	de b7       	in	r29, 0x3e	; 62
    2e84:	8b 83       	std	Y+3, r24	; 0x03
	u16 Copy_u16OCR1BValue;
	switch(TIMER1_u8MODEPWM)
    2e86:	80 91 8c 00 	lds	r24, 0x008C
    2e8a:	28 2f       	mov	r18, r24
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	3d 83       	std	Y+5, r19	; 0x05
    2e90:	2c 83       	std	Y+4, r18	; 0x04
    2e92:	4c 81       	ldd	r20, Y+4	; 0x04
    2e94:	5d 81       	ldd	r21, Y+5	; 0x05
    2e96:	43 30       	cpi	r20, 0x03	; 3
    2e98:	51 05       	cpc	r21, r1
    2e9a:	09 f4       	brne	.+2      	; 0x2e9e <TIMER_voidTimer1GeneratePWMOCR1B+0x28>
    2e9c:	5b c0       	rjmp	.+182    	; 0x2f54 <TIMER_voidTimer1GeneratePWMOCR1B+0xde>
    2e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ea2:	84 30       	cpi	r24, 0x04	; 4
    2ea4:	91 05       	cpc	r25, r1
    2ea6:	5c f4       	brge	.+22     	; 0x2ebe <TIMER_voidTimer1GeneratePWMOCR1B+0x48>
    2ea8:	2c 81       	ldd	r18, Y+4	; 0x04
    2eaa:	3d 81       	ldd	r19, Y+5	; 0x05
    2eac:	21 30       	cpi	r18, 0x01	; 1
    2eae:	31 05       	cpc	r19, r1
    2eb0:	c9 f0       	breq	.+50     	; 0x2ee4 <TIMER_voidTimer1GeneratePWMOCR1B+0x6e>
    2eb2:	4c 81       	ldd	r20, Y+4	; 0x04
    2eb4:	5d 81       	ldd	r21, Y+5	; 0x05
    2eb6:	42 30       	cpi	r20, 0x02	; 2
    2eb8:	51 05       	cpc	r21, r1
    2eba:	81 f1       	breq	.+96     	; 0x2f1c <TIMER_voidTimer1GeneratePWMOCR1B+0xa6>
    2ebc:	ab c0       	rjmp	.+342    	; 0x3014 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
    2ebe:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ec2:	86 30       	cpi	r24, 0x06	; 6
    2ec4:	91 05       	cpc	r25, r1
    2ec6:	09 f4       	brne	.+2      	; 0x2eca <TIMER_voidTimer1GeneratePWMOCR1B+0x54>
    2ec8:	75 c0       	rjmp	.+234    	; 0x2fb4 <TIMER_voidTimer1GeneratePWMOCR1B+0x13e>
    2eca:	2c 81       	ldd	r18, Y+4	; 0x04
    2ecc:	3d 81       	ldd	r19, Y+5	; 0x05
    2ece:	27 30       	cpi	r18, 0x07	; 7
    2ed0:	31 05       	cpc	r19, r1
    2ed2:	09 f4       	brne	.+2      	; 0x2ed6 <TIMER_voidTimer1GeneratePWMOCR1B+0x60>
    2ed4:	84 c0       	rjmp	.+264    	; 0x2fde <TIMER_voidTimer1GeneratePWMOCR1B+0x168>
    2ed6:	4c 81       	ldd	r20, Y+4	; 0x04
    2ed8:	5d 81       	ldd	r21, Y+5	; 0x05
    2eda:	45 30       	cpi	r20, 0x05	; 5
    2edc:	51 05       	cpc	r21, r1
    2ede:	09 f4       	brne	.+2      	; 0x2ee2 <TIMER_voidTimer1GeneratePWMOCR1B+0x6c>
    2ee0:	55 c0       	rjmp	.+170    	; 0x2f8c <TIMER_voidTimer1GeneratePWMOCR1B+0x116>
    2ee2:	98 c0       	rjmp	.+304    	; 0x3014 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	{
	case TIMER1_MODE_PWM_PHASE_CORRECT_8 :
		Copy_u16OCR1BValue=((u16)510*Copy_u8Intensity/100);
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	28 2f       	mov	r18, r24
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	8e ef       	ldi	r24, 0xFE	; 254
    2eec:	91 e0       	ldi	r25, 0x01	; 1
    2eee:	ac 01       	movw	r20, r24
    2ef0:	24 9f       	mul	r18, r20
    2ef2:	c0 01       	movw	r24, r0
    2ef4:	25 9f       	mul	r18, r21
    2ef6:	90 0d       	add	r25, r0
    2ef8:	34 9f       	mul	r19, r20
    2efa:	90 0d       	add	r25, r0
    2efc:	11 24       	eor	r1, r1
    2efe:	24 e6       	ldi	r18, 0x64	; 100
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	b9 01       	movw	r22, r18
    2f04:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodhi4>
    2f08:	cb 01       	movw	r24, r22
    2f0a:	9a 83       	std	Y+2, r25	; 0x02
    2f0c:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    2f0e:	e8 e4       	ldi	r30, 0x48	; 72
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	9a 81       	ldd	r25, Y+2	; 0x02
    2f16:	91 83       	std	Z+1, r25	; 0x01
    2f18:	80 83       	st	Z, r24
    2f1a:	7c c0       	rjmp	.+248    	; 0x3014 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_9 :
		Copy_u16OCR1BValue=((u16)1022*Copy_u8Intensity/100);
    2f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1e:	28 2f       	mov	r18, r24
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	8e ef       	ldi	r24, 0xFE	; 254
    2f24:	93 e0       	ldi	r25, 0x03	; 3
    2f26:	ac 01       	movw	r20, r24
    2f28:	24 9f       	mul	r18, r20
    2f2a:	c0 01       	movw	r24, r0
    2f2c:	25 9f       	mul	r18, r21
    2f2e:	90 0d       	add	r25, r0
    2f30:	34 9f       	mul	r19, r20
    2f32:	90 0d       	add	r25, r0
    2f34:	11 24       	eor	r1, r1
    2f36:	24 e6       	ldi	r18, 0x64	; 100
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	b9 01       	movw	r22, r18
    2f3c:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodhi4>
    2f40:	cb 01       	movw	r24, r22
    2f42:	9a 83       	std	Y+2, r25	; 0x02
    2f44:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    2f46:	e8 e4       	ldi	r30, 0x48	; 72
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4e:	91 83       	std	Z+1, r25	; 0x01
    2f50:	80 83       	st	Z, r24
    2f52:	60 c0       	rjmp	.+192    	; 0x3014 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
		break;
	case TIMER1_MODE_PWM_PHASE_CORRECT_10 :
		Copy_u16OCR1BValue=((u16)2046*Copy_u8Intensity/100);
    2f54:	8b 81       	ldd	r24, Y+3	; 0x03
    2f56:	28 2f       	mov	r18, r24
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	8e ef       	ldi	r24, 0xFE	; 254
    2f5c:	97 e0       	ldi	r25, 0x07	; 7
    2f5e:	ac 01       	movw	r20, r24
    2f60:	24 9f       	mul	r18, r20
    2f62:	c0 01       	movw	r24, r0
    2f64:	25 9f       	mul	r18, r21
    2f66:	90 0d       	add	r25, r0
    2f68:	34 9f       	mul	r19, r20
    2f6a:	90 0d       	add	r25, r0
    2f6c:	11 24       	eor	r1, r1
    2f6e:	24 e6       	ldi	r18, 0x64	; 100
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	b9 01       	movw	r22, r18
    2f74:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodhi4>
    2f78:	cb 01       	movw	r24, r22
    2f7a:	9a 83       	std	Y+2, r25	; 0x02
    2f7c:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    2f7e:	e8 e4       	ldi	r30, 0x48	; 72
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	9a 81       	ldd	r25, Y+2	; 0x02
    2f86:	91 83       	std	Z+1, r25	; 0x01
    2f88:	80 83       	st	Z, r24
    2f8a:	44 c0       	rjmp	.+136    	; 0x3014 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
		break;

	case TIMER1_MODE_FAST_PWM_8 :
		Copy_u16OCR1BValue=(256*Copy_u8Intensity/100);
    2f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8e:	88 2f       	mov	r24, r24
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	98 2f       	mov	r25, r24
    2f94:	88 27       	eor	r24, r24
    2f96:	24 e6       	ldi	r18, 0x64	; 100
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	b9 01       	movw	r22, r18
    2f9c:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__divmodhi4>
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	9a 83       	std	Y+2, r25	; 0x02
    2fa4:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    2fa6:	e8 e4       	ldi	r30, 0x48	; 72
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	89 81       	ldd	r24, Y+1	; 0x01
    2fac:	9a 81       	ldd	r25, Y+2	; 0x02
    2fae:	91 83       	std	Z+1, r25	; 0x01
    2fb0:	80 83       	st	Z, r24
    2fb2:	30 c0       	rjmp	.+96     	; 0x3014 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
		break;
	case TIMER1_MODE_FAST_PWM_9 :
		Copy_u16OCR1BValue=(512*Copy_u8Intensity/100);
    2fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb6:	88 2f       	mov	r24, r24
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	98 2f       	mov	r25, r24
    2fbc:	88 27       	eor	r24, r24
    2fbe:	99 0f       	add	r25, r25
    2fc0:	24 e6       	ldi	r18, 0x64	; 100
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	b9 01       	movw	r22, r18
    2fc6:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__divmodhi4>
    2fca:	cb 01       	movw	r24, r22
    2fcc:	9a 83       	std	Y+2, r25	; 0x02
    2fce:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    2fd0:	e8 e4       	ldi	r30, 0x48	; 72
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd8:	91 83       	std	Z+1, r25	; 0x01
    2fda:	80 83       	st	Z, r24
    2fdc:	1b c0       	rjmp	.+54     	; 0x3014 <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
		break;
	case TIMER1_MODE_FAST_PWM_10 :
		Copy_u16OCR1BValue=((u16)1023*Copy_u8Intensity/100);
    2fde:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe0:	28 2f       	mov	r18, r24
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	8f ef       	ldi	r24, 0xFF	; 255
    2fe6:	93 e0       	ldi	r25, 0x03	; 3
    2fe8:	ac 01       	movw	r20, r24
    2fea:	24 9f       	mul	r18, r20
    2fec:	c0 01       	movw	r24, r0
    2fee:	25 9f       	mul	r18, r21
    2ff0:	90 0d       	add	r25, r0
    2ff2:	34 9f       	mul	r19, r20
    2ff4:	90 0d       	add	r25, r0
    2ff6:	11 24       	eor	r1, r1
    2ff8:	24 e6       	ldi	r18, 0x64	; 100
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	b9 01       	movw	r22, r18
    2ffe:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodhi4>
    3002:	cb 01       	movw	r24, r22
    3004:	9a 83       	std	Y+2, r25	; 0x02
    3006:	89 83       	std	Y+1, r24	; 0x01
		TIMER_u16_OCR1B=Copy_u16OCR1BValue;
    3008:	e8 e4       	ldi	r30, 0x48	; 72
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	9a 81       	ldd	r25, Y+2	; 0x02
    3010:	91 83       	std	Z+1, r25	; 0x01
    3012:	80 83       	st	Z, r24
		break;
	}
}
    3014:	0f 90       	pop	r0
    3016:	0f 90       	pop	r0
    3018:	0f 90       	pop	r0
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	cf 91       	pop	r28
    3020:	df 91       	pop	r29
    3022:	08 95       	ret

00003024 <TIMER_voidTimer1SetOCR1A>:

/*************************************************************************************************************/
void TIMER_voidTimer1SetOCR1A(u16 Copy_u16OCR1A)
{
    3024:	df 93       	push	r29
    3026:	cf 93       	push	r28
    3028:	00 d0       	rcall	.+0      	; 0x302a <TIMER_voidTimer1SetOCR1A+0x6>
    302a:	cd b7       	in	r28, 0x3d	; 61
    302c:	de b7       	in	r29, 0x3e	; 62
    302e:	9a 83       	std	Y+2, r25	; 0x02
    3030:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH = (u8)(Copy_u16OCR1A>>8);
    3032:	eb e4       	ldi	r30, 0x4B	; 75
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	9a 81       	ldd	r25, Y+2	; 0x02
    303a:	89 2f       	mov	r24, r25
    303c:	99 27       	eor	r25, r25
    303e:	80 83       	st	Z, r24
	OCR1AL = (u8)(Copy_u16OCR1A);
    3040:	ea e4       	ldi	r30, 0x4A	; 74
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	89 81       	ldd	r24, Y+1	; 0x01
    3046:	80 83       	st	Z, r24
}
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	cf 91       	pop	r28
    304e:	df 91       	pop	r29
    3050:	08 95       	ret

00003052 <TIMER_voidTimer1SetOCR1B>:
void TIMER_voidTimer1SetOCR1B(u16 Copy_u16OCR1B)
{
    3052:	df 93       	push	r29
    3054:	cf 93       	push	r28
    3056:	00 d0       	rcall	.+0      	; 0x3058 <TIMER_voidTimer1SetOCR1B+0x6>
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    305c:	9a 83       	std	Y+2, r25	; 0x02
    305e:	89 83       	std	Y+1, r24	; 0x01
	OCR1BH = (u8)(Copy_u16OCR1B>>8);
    3060:	e9 e4       	ldi	r30, 0x49	; 73
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	89 81       	ldd	r24, Y+1	; 0x01
    3066:	9a 81       	ldd	r25, Y+2	; 0x02
    3068:	89 2f       	mov	r24, r25
    306a:	99 27       	eor	r25, r25
    306c:	80 83       	st	Z, r24
	OCR1BL = (u8)(Copy_u16OCR1B);
    306e:	e8 e4       	ldi	r30, 0x48	; 72
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	80 83       	st	Z, r24
}
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	cf 91       	pop	r28
    307c:	df 91       	pop	r29
    307e:	08 95       	ret

00003080 <TIMER_voidTimer1SetICR1>:
void TIMER_voidTimer1SetICR1(u16 Copy_u16ICR1)
{
    3080:	df 93       	push	r29
    3082:	cf 93       	push	r28
    3084:	00 d0       	rcall	.+0      	; 0x3086 <TIMER_voidTimer1SetICR1+0x6>
    3086:	cd b7       	in	r28, 0x3d	; 61
    3088:	de b7       	in	r29, 0x3e	; 62
    308a:	9a 83       	std	Y+2, r25	; 0x02
    308c:	89 83       	std	Y+1, r24	; 0x01
	ICR1H = (u8)(Copy_u16ICR1>>8);
    308e:	e7 e4       	ldi	r30, 0x47	; 71
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	89 81       	ldd	r24, Y+1	; 0x01
    3094:	9a 81       	ldd	r25, Y+2	; 0x02
    3096:	89 2f       	mov	r24, r25
    3098:	99 27       	eor	r25, r25
    309a:	80 83       	st	Z, r24
	ICR1L = (u8)(Copy_u16ICR1);
    309c:	e6 e4       	ldi	r30, 0x46	; 70
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	89 81       	ldd	r24, Y+1	; 0x01
    30a2:	80 83       	st	Z, r24
}
    30a4:	0f 90       	pop	r0
    30a6:	0f 90       	pop	r0
    30a8:	cf 91       	pop	r28
    30aa:	df 91       	pop	r29
    30ac:	08 95       	ret

000030ae <TIMER_voidTimer1Stop>:

void TIMER_voidTimer1Stop(void)
{
    30ae:	df 93       	push	r29
    30b0:	cf 93       	push	r28
    30b2:	cd b7       	in	r28, 0x3d	; 61
    30b4:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (TCCR1B & 0XF8) ;
    30b6:	ae e4       	ldi	r26, 0x4E	; 78
    30b8:	b0 e0       	ldi	r27, 0x00	; 0
    30ba:	ee e4       	ldi	r30, 0x4E	; 78
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	80 81       	ld	r24, Z
    30c0:	88 7f       	andi	r24, 0xF8	; 248
    30c2:	8c 93       	st	X, r24
}
    30c4:	cf 91       	pop	r28
    30c6:	df 91       	pop	r29
    30c8:	08 95       	ret

000030ca <TIMER_voidTimer1SetCallBack>:
void TIMER_voidTimer1SetCallBack(void (*Copy_pFun) (void))
{
    30ca:	df 93       	push	r29
    30cc:	cf 93       	push	r28
    30ce:	00 d0       	rcall	.+0      	; 0x30d0 <TIMER_voidTimer1SetCallBack+0x6>
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
    30d4:	9a 83       	std	Y+2, r25	; 0x02
    30d6:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_pSetCallBack = Copy_pFun;
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
    30da:	9a 81       	ldd	r25, Y+2	; 0x02
    30dc:	90 93 83 00 	sts	0x0083, r25
    30e0:	80 93 82 00 	sts	0x0082, r24
}
    30e4:	0f 90       	pop	r0
    30e6:	0f 90       	pop	r0
    30e8:	cf 91       	pop	r28
    30ea:	df 91       	pop	r29
    30ec:	08 95       	ret

000030ee <TIMER_voidTimer1ICUInit>:
 *                                                           ICU Timer 1                                                             *
 **************************************************************************************************************************************/
static void(*Timer1_pICUSetCallBack)(void);
/************************************************************************************************************************************/
void TIMER_voidTimer1ICUInit(void)
{
    30ee:	df 93       	push	r29
    30f0:	cf 93       	push	r28
    30f2:	cd b7       	in	r28, 0x3d	; 61
    30f4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    30f6:	ae e4       	ldi	r26, 0x4E	; 78
    30f8:	b0 e0       	ldi	r27, 0x00	; 0
    30fa:	ee e4       	ldi	r30, 0x4E	; 78
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	80 81       	ld	r24, Z
    3100:	80 64       	ori	r24, 0x40	; 64
    3102:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TIMSK_TICIE1);
    3104:	a9 e5       	ldi	r26, 0x59	; 89
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	e9 e5       	ldi	r30, 0x59	; 89
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	80 81       	ld	r24, Z
    310e:	80 62       	ori	r24, 0x20	; 32
    3110:	8c 93       	st	X, r24

	CLR_BIT(TCCR1B,TCCR1B_CS10);
    3112:	ae e4       	ldi	r26, 0x4E	; 78
    3114:	b0 e0       	ldi	r27, 0x00	; 0
    3116:	ee e4       	ldi	r30, 0x4E	; 78
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	80 81       	ld	r24, Z
    311c:	8e 7f       	andi	r24, 0xFE	; 254
    311e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    3120:	ae e4       	ldi	r26, 0x4E	; 78
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	ee e4       	ldi	r30, 0x4E	; 78
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	82 60       	ori	r24, 0x02	; 2
    312c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    312e:	ae e4       	ldi	r26, 0x4E	; 78
    3130:	b0 e0       	ldi	r27, 0x00	; 0
    3132:	ee e4       	ldi	r30, 0x4E	; 78
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	80 81       	ld	r24, Z
    3138:	8b 7f       	andi	r24, 0xFB	; 251
    313a:	8c 93       	st	X, r24
}
    313c:	cf 91       	pop	r28
    313e:	df 91       	pop	r29
    3140:	08 95       	ret

00003142 <TIMER_voidTimer1ICUSetTriggerEdge>:
void TIMER_voidTimer1ICUSetTriggerEdge(u8 Copy_u8ICUEdgeType)
{
    3142:	df 93       	push	r29
    3144:	cf 93       	push	r28
    3146:	0f 92       	push	r0
    3148:	cd b7       	in	r28, 0x3d	; 61
    314a:	de b7       	in	r29, 0x3e	; 62
    314c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8ICUEdgeType==TIMER1_ICU_RISING_EDGY_TYPE_MODE)
    314e:	89 81       	ldd	r24, Y+1	; 0x01
    3150:	81 30       	cpi	r24, 0x01	; 1
    3152:	41 f4       	brne	.+16     	; 0x3164 <TIMER_voidTimer1ICUSetTriggerEdge+0x22>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    3154:	ae e4       	ldi	r26, 0x4E	; 78
    3156:	b0 e0       	ldi	r27, 0x00	; 0
    3158:	ee e4       	ldi	r30, 0x4E	; 78
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
    315e:	80 64       	ori	r24, 0x40	; 64
    3160:	8c 93       	st	X, r24
    3162:	0a c0       	rjmp	.+20     	; 0x3178 <TIMER_voidTimer1ICUSetTriggerEdge+0x36>
	}
	else if(Copy_u8ICUEdgeType==TIMER1_ICU_FALLING_EDGY_TYPE_MODE)
    3164:	89 81       	ldd	r24, Y+1	; 0x01
    3166:	88 23       	and	r24, r24
    3168:	39 f4       	brne	.+14     	; 0x3178 <TIMER_voidTimer1ICUSetTriggerEdge+0x36>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    316a:	ae e4       	ldi	r26, 0x4E	; 78
    316c:	b0 e0       	ldi	r27, 0x00	; 0
    316e:	ee e4       	ldi	r30, 0x4E	; 78
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	80 81       	ld	r24, Z
    3174:	8f 7b       	andi	r24, 0xBF	; 191
    3176:	8c 93       	st	X, r24
	}
}
    3178:	0f 90       	pop	r0
    317a:	cf 91       	pop	r28
    317c:	df 91       	pop	r29
    317e:	08 95       	ret

00003180 <TIMER_voidTimer1ICUGetInputCaptureValue>:
u16 TIMER_voidTimer1ICUGetInputCaptureValue(void)
{
    3180:	df 93       	push	r29
    3182:	cf 93       	push	r28
    3184:	cd b7       	in	r28, 0x3d	; 61
    3186:	de b7       	in	r29, 0x3e	; 62
	return TIMER_u16_ICR1;
    3188:	e6 e4       	ldi	r30, 0x46	; 70
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	80 81       	ld	r24, Z
    318e:	91 81       	ldd	r25, Z+1	; 0x01
}
    3190:	cf 91       	pop	r28
    3192:	df 91       	pop	r29
    3194:	08 95       	ret

00003196 <TIMER_voidTimer1ICUSetCallBack>:
void TIMER_voidTimer1ICUSetCallBack(void (*Copy_pFun) (void))
{
    3196:	df 93       	push	r29
    3198:	cf 93       	push	r28
    319a:	00 d0       	rcall	.+0      	; 0x319c <TIMER_voidTimer1ICUSetCallBack+0x6>
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62
    31a0:	9a 83       	std	Y+2, r25	; 0x02
    31a2:	89 83       	std	Y+1, r24	; 0x01
	Timer1_pICUSetCallBack = Copy_pFun;
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
    31a6:	9a 81       	ldd	r25, Y+2	; 0x02
    31a8:	90 93 87 00 	sts	0x0087, r25
    31ac:	80 93 86 00 	sts	0x0086, r24
}
    31b0:	0f 90       	pop	r0
    31b2:	0f 90       	pop	r0
    31b4:	cf 91       	pop	r28
    31b6:	df 91       	pop	r29
    31b8:	08 95       	ret

000031ba <TIMER_voidClearTimer1Value>:
void TIMER_voidClearTimer1Value(void)
{
    31ba:	df 93       	push	r29
    31bc:	cf 93       	push	r28
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
	TIMER_u16_TCNT1 = 0;
    31c2:	ec e4       	ldi	r30, 0x4C	; 76
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	11 82       	std	Z+1, r1	; 0x01
    31c8:	10 82       	st	Z, r1
}
    31ca:	cf 91       	pop	r28
    31cc:	df 91       	pop	r29
    31ce:	08 95       	ret

000031d0 <__vector_5>:

void __vector_5 (void)
{
    31d0:	1f 92       	push	r1
    31d2:	0f 92       	push	r0
    31d4:	0f b6       	in	r0, 0x3f	; 63
    31d6:	0f 92       	push	r0
    31d8:	11 24       	eor	r1, r1
    31da:	2f 93       	push	r18
    31dc:	3f 93       	push	r19
    31de:	4f 93       	push	r20
    31e0:	5f 93       	push	r21
    31e2:	6f 93       	push	r22
    31e4:	7f 93       	push	r23
    31e6:	8f 93       	push	r24
    31e8:	9f 93       	push	r25
    31ea:	af 93       	push	r26
    31ec:	bf 93       	push	r27
    31ee:	ef 93       	push	r30
    31f0:	ff 93       	push	r31
    31f2:	df 93       	push	r29
    31f4:	cf 93       	push	r28
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_pICUSetCallBack!=NULL)
    31fa:	80 91 86 00 	lds	r24, 0x0086
    31fe:	90 91 87 00 	lds	r25, 0x0087
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	29 f0       	breq	.+10     	; 0x3210 <__vector_5+0x40>
	{
		Timer1_pICUSetCallBack();
    3206:	e0 91 86 00 	lds	r30, 0x0086
    320a:	f0 91 87 00 	lds	r31, 0x0087
    320e:	09 95       	icall
	}
}
    3210:	cf 91       	pop	r28
    3212:	df 91       	pop	r29
    3214:	ff 91       	pop	r31
    3216:	ef 91       	pop	r30
    3218:	bf 91       	pop	r27
    321a:	af 91       	pop	r26
    321c:	9f 91       	pop	r25
    321e:	8f 91       	pop	r24
    3220:	7f 91       	pop	r23
    3222:	6f 91       	pop	r22
    3224:	5f 91       	pop	r21
    3226:	4f 91       	pop	r20
    3228:	3f 91       	pop	r19
    322a:	2f 91       	pop	r18
    322c:	0f 90       	pop	r0
    322e:	0f be       	out	0x3f, r0	; 63
    3230:	0f 90       	pop	r0
    3232:	1f 90       	pop	r1
    3234:	18 95       	reti

00003236 <__vector_6>:

void __vector_6 (void)
{
    3236:	1f 92       	push	r1
    3238:	0f 92       	push	r0
    323a:	0f b6       	in	r0, 0x3f	; 63
    323c:	0f 92       	push	r0
    323e:	11 24       	eor	r1, r1
    3240:	2f 93       	push	r18
    3242:	3f 93       	push	r19
    3244:	4f 93       	push	r20
    3246:	5f 93       	push	r21
    3248:	6f 93       	push	r22
    324a:	7f 93       	push	r23
    324c:	8f 93       	push	r24
    324e:	9f 93       	push	r25
    3250:	af 93       	push	r26
    3252:	bf 93       	push	r27
    3254:	ef 93       	push	r30
    3256:	ff 93       	push	r31
    3258:	df 93       	push	r29
    325a:	cf 93       	push	r28
    325c:	cd b7       	in	r28, 0x3d	; 61
    325e:	de b7       	in	r29, 0x3e	; 62
	if (TIMER1_pSetCallBack!=NULL)
    3260:	80 91 82 00 	lds	r24, 0x0082
    3264:	90 91 83 00 	lds	r25, 0x0083
    3268:	00 97       	sbiw	r24, 0x00	; 0
    326a:	29 f0       	breq	.+10     	; 0x3276 <__vector_6+0x40>
	{
		TIMER1_pSetCallBack();
    326c:	e0 91 82 00 	lds	r30, 0x0082
    3270:	f0 91 83 00 	lds	r31, 0x0083
    3274:	09 95       	icall
	}
}
    3276:	cf 91       	pop	r28
    3278:	df 91       	pop	r29
    327a:	ff 91       	pop	r31
    327c:	ef 91       	pop	r30
    327e:	bf 91       	pop	r27
    3280:	af 91       	pop	r26
    3282:	9f 91       	pop	r25
    3284:	8f 91       	pop	r24
    3286:	7f 91       	pop	r23
    3288:	6f 91       	pop	r22
    328a:	5f 91       	pop	r21
    328c:	4f 91       	pop	r20
    328e:	3f 91       	pop	r19
    3290:	2f 91       	pop	r18
    3292:	0f 90       	pop	r0
    3294:	0f be       	out	0x3f, r0	; 63
    3296:	0f 90       	pop	r0
    3298:	1f 90       	pop	r1
    329a:	18 95       	reti

0000329c <main>:
void Resume_StopWatch(void);

void Detect_Seconds(void);

void main(void)
{
    329c:	0f 93       	push	r16
    329e:	1f 93       	push	r17
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62
    32a8:	c4 55       	subi	r28, 0x54	; 84
    32aa:	d0 40       	sbci	r29, 0x00	; 0
    32ac:	0f b6       	in	r0, 0x3f	; 63
    32ae:	f8 94       	cli
    32b0:	de bf       	out	0x3e, r29	; 62
    32b2:	0f be       	out	0x3f, r0	; 63
    32b4:	cd bf       	out	0x3d, r28	; 61
	StopWatch_Init();
    32b6:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <StopWatch_Init>
	EXTI_u8Int0SetCallBack(Reset_StopWatch);
    32ba:	81 ea       	ldi	r24, 0xA1	; 161
    32bc:	9d e1       	ldi	r25, 0x1D	; 29
    32be:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <EXTI_u8Int0SetCallBack>
	EXTI_u8Int1SetCallBack(Stop_stopWatch);
    32c2:	80 eb       	ldi	r24, 0xB0	; 176
    32c4:	9d e1       	ldi	r25, 0x1D	; 29
    32c6:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <EXTI_u8Int1SetCallBack>
	EXTI_u8Int2SetCallBack(Resume_StopWatch);
    32ca:	87 eb       	ldi	r24, 0xB7	; 183
    32cc:	9d e1       	ldi	r25, 0x1D	; 29
    32ce:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <EXTI_u8Int2SetCallBack>
	TIMER_voidTimer1SetCallBack(Detect_Seconds);
    32d2:	83 ec       	ldi	r24, 0xC3	; 195
    32d4:	9d e1       	ldi	r25, 0x1D	; 29
    32d6:	0e 94 65 18 	call	0x30ca	; 0x30ca <TIMER_voidTimer1SetCallBack>

	for(;;)
	{
		//Sec0
		DIO_u8SetPortValue(DIO_u8PORTA,DIO_u8PORT_LOW);
    32da:	80 e0       	ldi	r24, 0x00	; 0
    32dc:	60 e0       	ldi	r22, 0x00	; 0
    32de:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_HIGH);
    32e2:	80 e0       	ldi	r24, 0x00	; 0
    32e4:	60 e0       	ldi	r22, 0x00	; 0
    32e6:	41 e0       	ldi	r20, 0x01	; 1
    32e8:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>

		DIO_u8SetPortValue(DIO_u8PORTC,DIO_u8PORT_LOW);
    32ec:	82 e0       	ldi	r24, 0x02	; 2
    32ee:	60 e0       	ldi	r22, 0x00	; 0
    32f0:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
		DIO_u8SetPortValue(DIO_u8PORTC,(Global_u8Second%10) & 0X0F);
    32f4:	80 91 89 00 	lds	r24, 0x0089
    32f8:	9a e0       	ldi	r25, 0x0A	; 10
    32fa:	69 2f       	mov	r22, r25
    32fc:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__udivmodqi4>
    3300:	89 2f       	mov	r24, r25
    3302:	98 2f       	mov	r25, r24
    3304:	9f 70       	andi	r25, 0x0F	; 15
    3306:	82 e0       	ldi	r24, 0x02	; 2
    3308:	69 2f       	mov	r22, r25
    330a:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    330e:	fe 01       	movw	r30, r28
    3310:	ef 5a       	subi	r30, 0xAF	; 175
    3312:	ff 4f       	sbci	r31, 0xFF	; 255
    3314:	80 e0       	ldi	r24, 0x00	; 0
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	a0 e8       	ldi	r26, 0x80	; 128
    331a:	bf e3       	ldi	r27, 0x3F	; 63
    331c:	80 83       	st	Z, r24
    331e:	91 83       	std	Z+1, r25	; 0x01
    3320:	a2 83       	std	Z+2, r26	; 0x02
    3322:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3324:	8e 01       	movw	r16, r28
    3326:	03 5b       	subi	r16, 0xB3	; 179
    3328:	1f 4f       	sbci	r17, 0xFF	; 255
    332a:	fe 01       	movw	r30, r28
    332c:	ef 5a       	subi	r30, 0xAF	; 175
    332e:	ff 4f       	sbci	r31, 0xFF	; 255
    3330:	60 81       	ld	r22, Z
    3332:	71 81       	ldd	r23, Z+1	; 0x01
    3334:	82 81       	ldd	r24, Z+2	; 0x02
    3336:	93 81       	ldd	r25, Z+3	; 0x03
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	4a e7       	ldi	r20, 0x7A	; 122
    333e:	53 e4       	ldi	r21, 0x43	; 67
    3340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3344:	dc 01       	movw	r26, r24
    3346:	cb 01       	movw	r24, r22
    3348:	f8 01       	movw	r30, r16
    334a:	80 83       	st	Z, r24
    334c:	91 83       	std	Z+1, r25	; 0x01
    334e:	a2 83       	std	Z+2, r26	; 0x02
    3350:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3352:	fe 01       	movw	r30, r28
    3354:	e3 5b       	subi	r30, 0xB3	; 179
    3356:	ff 4f       	sbci	r31, 0xFF	; 255
    3358:	60 81       	ld	r22, Z
    335a:	71 81       	ldd	r23, Z+1	; 0x01
    335c:	82 81       	ldd	r24, Z+2	; 0x02
    335e:	93 81       	ldd	r25, Z+3	; 0x03
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	40 e8       	ldi	r20, 0x80	; 128
    3366:	5f e3       	ldi	r21, 0x3F	; 63
    3368:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    336c:	88 23       	and	r24, r24
    336e:	44 f4       	brge	.+16     	; 0x3380 <main+0xe4>
		__ticks = 1;
    3370:	fe 01       	movw	r30, r28
    3372:	e5 5b       	subi	r30, 0xB5	; 181
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	91 83       	std	Z+1, r25	; 0x01
    337c:	80 83       	st	Z, r24
    337e:	64 c0       	rjmp	.+200    	; 0x3448 <main+0x1ac>
	else if (__tmp > 65535)
    3380:	fe 01       	movw	r30, r28
    3382:	e3 5b       	subi	r30, 0xB3	; 179
    3384:	ff 4f       	sbci	r31, 0xFF	; 255
    3386:	60 81       	ld	r22, Z
    3388:	71 81       	ldd	r23, Z+1	; 0x01
    338a:	82 81       	ldd	r24, Z+2	; 0x02
    338c:	93 81       	ldd	r25, Z+3	; 0x03
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	3f ef       	ldi	r19, 0xFF	; 255
    3392:	4f e7       	ldi	r20, 0x7F	; 127
    3394:	57 e4       	ldi	r21, 0x47	; 71
    3396:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    339a:	18 16       	cp	r1, r24
    339c:	0c f0       	brlt	.+2      	; 0x33a0 <main+0x104>
    339e:	43 c0       	rjmp	.+134    	; 0x3426 <main+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a0:	fe 01       	movw	r30, r28
    33a2:	ef 5a       	subi	r30, 0xAF	; 175
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	60 81       	ld	r22, Z
    33a8:	71 81       	ldd	r23, Z+1	; 0x01
    33aa:	82 81       	ldd	r24, Z+2	; 0x02
    33ac:	93 81       	ldd	r25, Z+3	; 0x03
    33ae:	20 e0       	ldi	r18, 0x00	; 0
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	40 e2       	ldi	r20, 0x20	; 32
    33b4:	51 e4       	ldi	r21, 0x41	; 65
    33b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ba:	dc 01       	movw	r26, r24
    33bc:	cb 01       	movw	r24, r22
    33be:	8e 01       	movw	r16, r28
    33c0:	05 5b       	subi	r16, 0xB5	; 181
    33c2:	1f 4f       	sbci	r17, 0xFF	; 255
    33c4:	bc 01       	movw	r22, r24
    33c6:	cd 01       	movw	r24, r26
    33c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33cc:	dc 01       	movw	r26, r24
    33ce:	cb 01       	movw	r24, r22
    33d0:	f8 01       	movw	r30, r16
    33d2:	91 83       	std	Z+1, r25	; 0x01
    33d4:	80 83       	st	Z, r24
    33d6:	1f c0       	rjmp	.+62     	; 0x3416 <main+0x17a>
    33d8:	fe 01       	movw	r30, r28
    33da:	e7 5b       	subi	r30, 0xB7	; 183
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	89 e1       	ldi	r24, 0x19	; 25
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	91 83       	std	Z+1, r25	; 0x01
    33e4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33e6:	fe 01       	movw	r30, r28
    33e8:	e7 5b       	subi	r30, 0xB7	; 183
    33ea:	ff 4f       	sbci	r31, 0xFF	; 255
    33ec:	80 81       	ld	r24, Z
    33ee:	91 81       	ldd	r25, Z+1	; 0x01
    33f0:	01 97       	sbiw	r24, 0x01	; 1
    33f2:	f1 f7       	brne	.-4      	; 0x33f0 <main+0x154>
    33f4:	fe 01       	movw	r30, r28
    33f6:	e7 5b       	subi	r30, 0xB7	; 183
    33f8:	ff 4f       	sbci	r31, 0xFF	; 255
    33fa:	91 83       	std	Z+1, r25	; 0x01
    33fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33fe:	de 01       	movw	r26, r28
    3400:	a5 5b       	subi	r26, 0xB5	; 181
    3402:	bf 4f       	sbci	r27, 0xFF	; 255
    3404:	fe 01       	movw	r30, r28
    3406:	e5 5b       	subi	r30, 0xB5	; 181
    3408:	ff 4f       	sbci	r31, 0xFF	; 255
    340a:	80 81       	ld	r24, Z
    340c:	91 81       	ldd	r25, Z+1	; 0x01
    340e:	01 97       	sbiw	r24, 0x01	; 1
    3410:	11 96       	adiw	r26, 0x01	; 1
    3412:	9c 93       	st	X, r25
    3414:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3416:	fe 01       	movw	r30, r28
    3418:	e5 5b       	subi	r30, 0xB5	; 181
    341a:	ff 4f       	sbci	r31, 0xFF	; 255
    341c:	80 81       	ld	r24, Z
    341e:	91 81       	ldd	r25, Z+1	; 0x01
    3420:	00 97       	sbiw	r24, 0x00	; 0
    3422:	d1 f6       	brne	.-76     	; 0x33d8 <main+0x13c>
    3424:	27 c0       	rjmp	.+78     	; 0x3474 <main+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3426:	8e 01       	movw	r16, r28
    3428:	05 5b       	subi	r16, 0xB5	; 181
    342a:	1f 4f       	sbci	r17, 0xFF	; 255
    342c:	fe 01       	movw	r30, r28
    342e:	e3 5b       	subi	r30, 0xB3	; 179
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	60 81       	ld	r22, Z
    3434:	71 81       	ldd	r23, Z+1	; 0x01
    3436:	82 81       	ldd	r24, Z+2	; 0x02
    3438:	93 81       	ldd	r25, Z+3	; 0x03
    343a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	f8 01       	movw	r30, r16
    3444:	91 83       	std	Z+1, r25	; 0x01
    3446:	80 83       	st	Z, r24
    3448:	de 01       	movw	r26, r28
    344a:	a9 5b       	subi	r26, 0xB9	; 185
    344c:	bf 4f       	sbci	r27, 0xFF	; 255
    344e:	fe 01       	movw	r30, r28
    3450:	e5 5b       	subi	r30, 0xB5	; 181
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	80 81       	ld	r24, Z
    3456:	91 81       	ldd	r25, Z+1	; 0x01
    3458:	8d 93       	st	X+, r24
    345a:	9c 93       	st	X, r25
    345c:	fe 01       	movw	r30, r28
    345e:	e9 5b       	subi	r30, 0xB9	; 185
    3460:	ff 4f       	sbci	r31, 0xFF	; 255
    3462:	80 81       	ld	r24, Z
    3464:	91 81       	ldd	r25, Z+1	; 0x01
    3466:	01 97       	sbiw	r24, 0x01	; 1
    3468:	f1 f7       	brne	.-4      	; 0x3466 <main+0x1ca>
    346a:	fe 01       	movw	r30, r28
    346c:	e9 5b       	subi	r30, 0xB9	; 185
    346e:	ff 4f       	sbci	r31, 0xFF	; 255
    3470:	91 83       	std	Z+1, r25	; 0x01
    3472:	80 83       	st	Z, r24

		_delay_ms(1);

		//**********************************************************************************************
		//Sec1
		DIO_u8SetPortValue(DIO_u8PORTA,DIO_u8PORT_LOW);
    3474:	80 e0       	ldi	r24, 0x00	; 0
    3476:	60 e0       	ldi	r22, 0x00	; 0
    3478:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN1,DIO_u8PIN_HIGH);
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	61 e0       	ldi	r22, 0x01	; 1
    3480:	41 e0       	ldi	r20, 0x01	; 1
    3482:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>

		DIO_u8SetPortValue(DIO_u8PORTC,DIO_u8PORT_LOW);
    3486:	82 e0       	ldi	r24, 0x02	; 2
    3488:	60 e0       	ldi	r22, 0x00	; 0
    348a:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
		DIO_u8SetPortValue(DIO_u8PORTC,(Global_u8Second/10) & 0X0F);
    348e:	80 91 89 00 	lds	r24, 0x0089
    3492:	9a e0       	ldi	r25, 0x0A	; 10
    3494:	69 2f       	mov	r22, r25
    3496:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__udivmodqi4>
    349a:	98 2f       	mov	r25, r24
    349c:	9f 70       	andi	r25, 0x0F	; 15
    349e:	82 e0       	ldi	r24, 0x02	; 2
    34a0:	69 2f       	mov	r22, r25
    34a2:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    34a6:	fe 01       	movw	r30, r28
    34a8:	ed 5b       	subi	r30, 0xBD	; 189
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	80 e0       	ldi	r24, 0x00	; 0
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	a0 e8       	ldi	r26, 0x80	; 128
    34b2:	bf e3       	ldi	r27, 0x3F	; 63
    34b4:	80 83       	st	Z, r24
    34b6:	91 83       	std	Z+1, r25	; 0x01
    34b8:	a2 83       	std	Z+2, r26	; 0x02
    34ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34bc:	8e 01       	movw	r16, r28
    34be:	01 5c       	subi	r16, 0xC1	; 193
    34c0:	1f 4f       	sbci	r17, 0xFF	; 255
    34c2:	fe 01       	movw	r30, r28
    34c4:	ed 5b       	subi	r30, 0xBD	; 189
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	60 81       	ld	r22, Z
    34ca:	71 81       	ldd	r23, Z+1	; 0x01
    34cc:	82 81       	ldd	r24, Z+2	; 0x02
    34ce:	93 81       	ldd	r25, Z+3	; 0x03
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	4a e7       	ldi	r20, 0x7A	; 122
    34d6:	53 e4       	ldi	r21, 0x43	; 67
    34d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	f8 01       	movw	r30, r16
    34e2:	80 83       	st	Z, r24
    34e4:	91 83       	std	Z+1, r25	; 0x01
    34e6:	a2 83       	std	Z+2, r26	; 0x02
    34e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34ea:	fe 01       	movw	r30, r28
    34ec:	ff 96       	adiw	r30, 0x3f	; 63
    34ee:	60 81       	ld	r22, Z
    34f0:	71 81       	ldd	r23, Z+1	; 0x01
    34f2:	82 81       	ldd	r24, Z+2	; 0x02
    34f4:	93 81       	ldd	r25, Z+3	; 0x03
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	40 e8       	ldi	r20, 0x80	; 128
    34fc:	5f e3       	ldi	r21, 0x3F	; 63
    34fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3502:	88 23       	and	r24, r24
    3504:	2c f4       	brge	.+10     	; 0x3510 <main+0x274>
		__ticks = 1;
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	9e af       	std	Y+62, r25	; 0x3e
    350c:	8d af       	std	Y+61, r24	; 0x3d
    350e:	46 c0       	rjmp	.+140    	; 0x359c <main+0x300>
	else if (__tmp > 65535)
    3510:	fe 01       	movw	r30, r28
    3512:	ff 96       	adiw	r30, 0x3f	; 63
    3514:	60 81       	ld	r22, Z
    3516:	71 81       	ldd	r23, Z+1	; 0x01
    3518:	82 81       	ldd	r24, Z+2	; 0x02
    351a:	93 81       	ldd	r25, Z+3	; 0x03
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	3f ef       	ldi	r19, 0xFF	; 255
    3520:	4f e7       	ldi	r20, 0x7F	; 127
    3522:	57 e4       	ldi	r21, 0x47	; 71
    3524:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3528:	18 16       	cp	r1, r24
    352a:	64 f5       	brge	.+88     	; 0x3584 <main+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    352c:	fe 01       	movw	r30, r28
    352e:	ed 5b       	subi	r30, 0xBD	; 189
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	60 81       	ld	r22, Z
    3534:	71 81       	ldd	r23, Z+1	; 0x01
    3536:	82 81       	ldd	r24, Z+2	; 0x02
    3538:	93 81       	ldd	r25, Z+3	; 0x03
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	40 e2       	ldi	r20, 0x20	; 32
    3540:	51 e4       	ldi	r21, 0x41	; 65
    3542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3546:	dc 01       	movw	r26, r24
    3548:	cb 01       	movw	r24, r22
    354a:	bc 01       	movw	r22, r24
    354c:	cd 01       	movw	r24, r26
    354e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	9e af       	std	Y+62, r25	; 0x3e
    3558:	8d af       	std	Y+61, r24	; 0x3d
    355a:	0f c0       	rjmp	.+30     	; 0x357a <main+0x2de>
    355c:	89 e1       	ldi	r24, 0x19	; 25
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	9c af       	std	Y+60, r25	; 0x3c
    3562:	8b af       	std	Y+59, r24	; 0x3b
    3564:	8b ad       	ldd	r24, Y+59	; 0x3b
    3566:	9c ad       	ldd	r25, Y+60	; 0x3c
    3568:	01 97       	sbiw	r24, 0x01	; 1
    356a:	f1 f7       	brne	.-4      	; 0x3568 <main+0x2cc>
    356c:	9c af       	std	Y+60, r25	; 0x3c
    356e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3570:	8d ad       	ldd	r24, Y+61	; 0x3d
    3572:	9e ad       	ldd	r25, Y+62	; 0x3e
    3574:	01 97       	sbiw	r24, 0x01	; 1
    3576:	9e af       	std	Y+62, r25	; 0x3e
    3578:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    357a:	8d ad       	ldd	r24, Y+61	; 0x3d
    357c:	9e ad       	ldd	r25, Y+62	; 0x3e
    357e:	00 97       	sbiw	r24, 0x00	; 0
    3580:	69 f7       	brne	.-38     	; 0x355c <main+0x2c0>
    3582:	16 c0       	rjmp	.+44     	; 0x35b0 <main+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3584:	fe 01       	movw	r30, r28
    3586:	ff 96       	adiw	r30, 0x3f	; 63
    3588:	60 81       	ld	r22, Z
    358a:	71 81       	ldd	r23, Z+1	; 0x01
    358c:	82 81       	ldd	r24, Z+2	; 0x02
    358e:	93 81       	ldd	r25, Z+3	; 0x03
    3590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	9e af       	std	Y+62, r25	; 0x3e
    359a:	8d af       	std	Y+61, r24	; 0x3d
    359c:	8d ad       	ldd	r24, Y+61	; 0x3d
    359e:	9e ad       	ldd	r25, Y+62	; 0x3e
    35a0:	9a af       	std	Y+58, r25	; 0x3a
    35a2:	89 af       	std	Y+57, r24	; 0x39
    35a4:	89 ad       	ldd	r24, Y+57	; 0x39
    35a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	f1 f7       	brne	.-4      	; 0x35a8 <main+0x30c>
    35ac:	9a af       	std	Y+58, r25	; 0x3a
    35ae:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);

		//**********************************************************************************************
		//Min0
		DIO_u8SetPortValue(DIO_u8PORTA,DIO_u8PORT_LOW);
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	60 e0       	ldi	r22, 0x00	; 0
    35b4:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN2,DIO_u8PIN_HIGH);
    35b8:	80 e0       	ldi	r24, 0x00	; 0
    35ba:	62 e0       	ldi	r22, 0x02	; 2
    35bc:	41 e0       	ldi	r20, 0x01	; 1
    35be:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>

		DIO_u8SetPortValue(DIO_u8PORTC,DIO_u8PORT_LOW);
    35c2:	82 e0       	ldi	r24, 0x02	; 2
    35c4:	60 e0       	ldi	r22, 0x00	; 0
    35c6:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
		DIO_u8SetPortValue(DIO_u8PORTC,(Global_u8Minute%10) & 0X0F);
    35ca:	80 91 8a 00 	lds	r24, 0x008A
    35ce:	9a e0       	ldi	r25, 0x0A	; 10
    35d0:	69 2f       	mov	r22, r25
    35d2:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__udivmodqi4>
    35d6:	89 2f       	mov	r24, r25
    35d8:	98 2f       	mov	r25, r24
    35da:	9f 70       	andi	r25, 0x0F	; 15
    35dc:	82 e0       	ldi	r24, 0x02	; 2
    35de:	69 2f       	mov	r22, r25
    35e0:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    35e4:	80 e0       	ldi	r24, 0x00	; 0
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	a0 e8       	ldi	r26, 0x80	; 128
    35ea:	bf e3       	ldi	r27, 0x3F	; 63
    35ec:	8d ab       	std	Y+53, r24	; 0x35
    35ee:	9e ab       	std	Y+54, r25	; 0x36
    35f0:	af ab       	std	Y+55, r26	; 0x37
    35f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f4:	6d a9       	ldd	r22, Y+53	; 0x35
    35f6:	7e a9       	ldd	r23, Y+54	; 0x36
    35f8:	8f a9       	ldd	r24, Y+55	; 0x37
    35fa:	98 ad       	ldd	r25, Y+56	; 0x38
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	4a e7       	ldi	r20, 0x7A	; 122
    3602:	53 e4       	ldi	r21, 0x43	; 67
    3604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	89 ab       	std	Y+49, r24	; 0x31
    360e:	9a ab       	std	Y+50, r25	; 0x32
    3610:	ab ab       	std	Y+51, r26	; 0x33
    3612:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3614:	69 a9       	ldd	r22, Y+49	; 0x31
    3616:	7a a9       	ldd	r23, Y+50	; 0x32
    3618:	8b a9       	ldd	r24, Y+51	; 0x33
    361a:	9c a9       	ldd	r25, Y+52	; 0x34
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	40 e8       	ldi	r20, 0x80	; 128
    3622:	5f e3       	ldi	r21, 0x3F	; 63
    3624:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3628:	88 23       	and	r24, r24
    362a:	2c f4       	brge	.+10     	; 0x3636 <main+0x39a>
		__ticks = 1;
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	98 ab       	std	Y+48, r25	; 0x30
    3632:	8f a7       	std	Y+47, r24	; 0x2f
    3634:	3f c0       	rjmp	.+126    	; 0x36b4 <main+0x418>
	else if (__tmp > 65535)
    3636:	69 a9       	ldd	r22, Y+49	; 0x31
    3638:	7a a9       	ldd	r23, Y+50	; 0x32
    363a:	8b a9       	ldd	r24, Y+51	; 0x33
    363c:	9c a9       	ldd	r25, Y+52	; 0x34
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	3f ef       	ldi	r19, 0xFF	; 255
    3642:	4f e7       	ldi	r20, 0x7F	; 127
    3644:	57 e4       	ldi	r21, 0x47	; 71
    3646:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    364a:	18 16       	cp	r1, r24
    364c:	4c f5       	brge	.+82     	; 0x36a0 <main+0x404>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    364e:	6d a9       	ldd	r22, Y+53	; 0x35
    3650:	7e a9       	ldd	r23, Y+54	; 0x36
    3652:	8f a9       	ldd	r24, Y+55	; 0x37
    3654:	98 ad       	ldd	r25, Y+56	; 0x38
    3656:	20 e0       	ldi	r18, 0x00	; 0
    3658:	30 e0       	ldi	r19, 0x00	; 0
    365a:	40 e2       	ldi	r20, 0x20	; 32
    365c:	51 e4       	ldi	r21, 0x41	; 65
    365e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	bc 01       	movw	r22, r24
    3668:	cd 01       	movw	r24, r26
    366a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366e:	dc 01       	movw	r26, r24
    3670:	cb 01       	movw	r24, r22
    3672:	98 ab       	std	Y+48, r25	; 0x30
    3674:	8f a7       	std	Y+47, r24	; 0x2f
    3676:	0f c0       	rjmp	.+30     	; 0x3696 <main+0x3fa>
    3678:	89 e1       	ldi	r24, 0x19	; 25
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	9e a7       	std	Y+46, r25	; 0x2e
    367e:	8d a7       	std	Y+45, r24	; 0x2d
    3680:	8d a5       	ldd	r24, Y+45	; 0x2d
    3682:	9e a5       	ldd	r25, Y+46	; 0x2e
    3684:	01 97       	sbiw	r24, 0x01	; 1
    3686:	f1 f7       	brne	.-4      	; 0x3684 <main+0x3e8>
    3688:	9e a7       	std	Y+46, r25	; 0x2e
    368a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    368c:	8f a5       	ldd	r24, Y+47	; 0x2f
    368e:	98 a9       	ldd	r25, Y+48	; 0x30
    3690:	01 97       	sbiw	r24, 0x01	; 1
    3692:	98 ab       	std	Y+48, r25	; 0x30
    3694:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3696:	8f a5       	ldd	r24, Y+47	; 0x2f
    3698:	98 a9       	ldd	r25, Y+48	; 0x30
    369a:	00 97       	sbiw	r24, 0x00	; 0
    369c:	69 f7       	brne	.-38     	; 0x3678 <main+0x3dc>
    369e:	14 c0       	rjmp	.+40     	; 0x36c8 <main+0x42c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a0:	69 a9       	ldd	r22, Y+49	; 0x31
    36a2:	7a a9       	ldd	r23, Y+50	; 0x32
    36a4:	8b a9       	ldd	r24, Y+51	; 0x33
    36a6:	9c a9       	ldd	r25, Y+52	; 0x34
    36a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	98 ab       	std	Y+48, r25	; 0x30
    36b2:	8f a7       	std	Y+47, r24	; 0x2f
    36b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    36b6:	98 a9       	ldd	r25, Y+48	; 0x30
    36b8:	9c a7       	std	Y+44, r25	; 0x2c
    36ba:	8b a7       	std	Y+43, r24	; 0x2b
    36bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    36be:	9c a5       	ldd	r25, Y+44	; 0x2c
    36c0:	01 97       	sbiw	r24, 0x01	; 1
    36c2:	f1 f7       	brne	.-4      	; 0x36c0 <main+0x424>
    36c4:	9c a7       	std	Y+44, r25	; 0x2c
    36c6:	8b a7       	std	Y+43, r24	; 0x2b

		_delay_ms(1);

		//**********************************************************************************************
		//Min1
		DIO_u8SetPortValue(DIO_u8PORTA,DIO_u8PORT_LOW);
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	60 e0       	ldi	r22, 0x00	; 0
    36cc:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN2,DIO_u8PIN_HIGH);
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	62 e0       	ldi	r22, 0x02	; 2
    36d4:	41 e0       	ldi	r20, 0x01	; 1
    36d6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>

		DIO_u8SetPortValue(DIO_u8PORTC,DIO_u8PORT_LOW);
    36da:	82 e0       	ldi	r24, 0x02	; 2
    36dc:	60 e0       	ldi	r22, 0x00	; 0
    36de:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
		DIO_u8SetPortValue(DIO_u8PORTC,(Global_u8Minute/10) & 0X0F);
    36e2:	80 91 8a 00 	lds	r24, 0x008A
    36e6:	9a e0       	ldi	r25, 0x0A	; 10
    36e8:	69 2f       	mov	r22, r25
    36ea:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__udivmodqi4>
    36ee:	98 2f       	mov	r25, r24
    36f0:	9f 70       	andi	r25, 0x0F	; 15
    36f2:	82 e0       	ldi	r24, 0x02	; 2
    36f4:	69 2f       	mov	r22, r25
    36f6:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    36fa:	80 e0       	ldi	r24, 0x00	; 0
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	a0 e8       	ldi	r26, 0x80	; 128
    3700:	bf e3       	ldi	r27, 0x3F	; 63
    3702:	8f a3       	std	Y+39, r24	; 0x27
    3704:	98 a7       	std	Y+40, r25	; 0x28
    3706:	a9 a7       	std	Y+41, r26	; 0x29
    3708:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    370a:	6f a1       	ldd	r22, Y+39	; 0x27
    370c:	78 a5       	ldd	r23, Y+40	; 0x28
    370e:	89 a5       	ldd	r24, Y+41	; 0x29
    3710:	9a a5       	ldd	r25, Y+42	; 0x2a
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	4a e7       	ldi	r20, 0x7A	; 122
    3718:	53 e4       	ldi	r21, 0x43	; 67
    371a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	8b a3       	std	Y+35, r24	; 0x23
    3724:	9c a3       	std	Y+36, r25	; 0x24
    3726:	ad a3       	std	Y+37, r26	; 0x25
    3728:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    372a:	6b a1       	ldd	r22, Y+35	; 0x23
    372c:	7c a1       	ldd	r23, Y+36	; 0x24
    372e:	8d a1       	ldd	r24, Y+37	; 0x25
    3730:	9e a1       	ldd	r25, Y+38	; 0x26
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	40 e8       	ldi	r20, 0x80	; 128
    3738:	5f e3       	ldi	r21, 0x3F	; 63
    373a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    373e:	88 23       	and	r24, r24
    3740:	2c f4       	brge	.+10     	; 0x374c <main+0x4b0>
		__ticks = 1;
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	9a a3       	std	Y+34, r25	; 0x22
    3748:	89 a3       	std	Y+33, r24	; 0x21
    374a:	3f c0       	rjmp	.+126    	; 0x37ca <main+0x52e>
	else if (__tmp > 65535)
    374c:	6b a1       	ldd	r22, Y+35	; 0x23
    374e:	7c a1       	ldd	r23, Y+36	; 0x24
    3750:	8d a1       	ldd	r24, Y+37	; 0x25
    3752:	9e a1       	ldd	r25, Y+38	; 0x26
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	3f ef       	ldi	r19, 0xFF	; 255
    3758:	4f e7       	ldi	r20, 0x7F	; 127
    375a:	57 e4       	ldi	r21, 0x47	; 71
    375c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3760:	18 16       	cp	r1, r24
    3762:	4c f5       	brge	.+82     	; 0x37b6 <main+0x51a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3764:	6f a1       	ldd	r22, Y+39	; 0x27
    3766:	78 a5       	ldd	r23, Y+40	; 0x28
    3768:	89 a5       	ldd	r24, Y+41	; 0x29
    376a:	9a a5       	ldd	r25, Y+42	; 0x2a
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	40 e2       	ldi	r20, 0x20	; 32
    3772:	51 e4       	ldi	r21, 0x41	; 65
    3774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	bc 01       	movw	r22, r24
    377e:	cd 01       	movw	r24, r26
    3780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3784:	dc 01       	movw	r26, r24
    3786:	cb 01       	movw	r24, r22
    3788:	9a a3       	std	Y+34, r25	; 0x22
    378a:	89 a3       	std	Y+33, r24	; 0x21
    378c:	0f c0       	rjmp	.+30     	; 0x37ac <main+0x510>
    378e:	89 e1       	ldi	r24, 0x19	; 25
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	98 a3       	std	Y+32, r25	; 0x20
    3794:	8f 8f       	std	Y+31, r24	; 0x1f
    3796:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3798:	98 a1       	ldd	r25, Y+32	; 0x20
    379a:	01 97       	sbiw	r24, 0x01	; 1
    379c:	f1 f7       	brne	.-4      	; 0x379a <main+0x4fe>
    379e:	98 a3       	std	Y+32, r25	; 0x20
    37a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37a2:	89 a1       	ldd	r24, Y+33	; 0x21
    37a4:	9a a1       	ldd	r25, Y+34	; 0x22
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	9a a3       	std	Y+34, r25	; 0x22
    37aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ac:	89 a1       	ldd	r24, Y+33	; 0x21
    37ae:	9a a1       	ldd	r25, Y+34	; 0x22
    37b0:	00 97       	sbiw	r24, 0x00	; 0
    37b2:	69 f7       	brne	.-38     	; 0x378e <main+0x4f2>
    37b4:	14 c0       	rjmp	.+40     	; 0x37de <main+0x542>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37b6:	6b a1       	ldd	r22, Y+35	; 0x23
    37b8:	7c a1       	ldd	r23, Y+36	; 0x24
    37ba:	8d a1       	ldd	r24, Y+37	; 0x25
    37bc:	9e a1       	ldd	r25, Y+38	; 0x26
    37be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	9a a3       	std	Y+34, r25	; 0x22
    37c8:	89 a3       	std	Y+33, r24	; 0x21
    37ca:	89 a1       	ldd	r24, Y+33	; 0x21
    37cc:	9a a1       	ldd	r25, Y+34	; 0x22
    37ce:	9e 8f       	std	Y+30, r25	; 0x1e
    37d0:	8d 8f       	std	Y+29, r24	; 0x1d
    37d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37d6:	01 97       	sbiw	r24, 0x01	; 1
    37d8:	f1 f7       	brne	.-4      	; 0x37d6 <main+0x53a>
    37da:	9e 8f       	std	Y+30, r25	; 0x1e
    37dc:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(1);

		//**********************************************************************************************
		//Hour0
		DIO_u8SetPortValue(DIO_u8PORTA,DIO_u8PORT_LOW);
    37de:	80 e0       	ldi	r24, 0x00	; 0
    37e0:	60 e0       	ldi	r22, 0x00	; 0
    37e2:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN3,DIO_u8PIN_HIGH);
    37e6:	80 e0       	ldi	r24, 0x00	; 0
    37e8:	63 e0       	ldi	r22, 0x03	; 3
    37ea:	41 e0       	ldi	r20, 0x01	; 1
    37ec:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>

		DIO_u8SetPortValue(DIO_u8PORTC,DIO_u8PORT_LOW);
    37f0:	82 e0       	ldi	r24, 0x02	; 2
    37f2:	60 e0       	ldi	r22, 0x00	; 0
    37f4:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
		DIO_u8SetPortValue(DIO_u8PORTC,(Global_u8Hour%10) & 0X0F);
    37f8:	80 91 8b 00 	lds	r24, 0x008B
    37fc:	9a e0       	ldi	r25, 0x0A	; 10
    37fe:	69 2f       	mov	r22, r25
    3800:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__udivmodqi4>
    3804:	89 2f       	mov	r24, r25
    3806:	98 2f       	mov	r25, r24
    3808:	9f 70       	andi	r25, 0x0F	; 15
    380a:	82 e0       	ldi	r24, 0x02	; 2
    380c:	69 2f       	mov	r22, r25
    380e:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    3812:	80 e0       	ldi	r24, 0x00	; 0
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	a0 e8       	ldi	r26, 0x80	; 128
    3818:	bf e3       	ldi	r27, 0x3F	; 63
    381a:	89 8f       	std	Y+25, r24	; 0x19
    381c:	9a 8f       	std	Y+26, r25	; 0x1a
    381e:	ab 8f       	std	Y+27, r26	; 0x1b
    3820:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3822:	69 8d       	ldd	r22, Y+25	; 0x19
    3824:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3826:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3828:	9c 8d       	ldd	r25, Y+28	; 0x1c
    382a:	20 e0       	ldi	r18, 0x00	; 0
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	4a e7       	ldi	r20, 0x7A	; 122
    3830:	53 e4       	ldi	r21, 0x43	; 67
    3832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3836:	dc 01       	movw	r26, r24
    3838:	cb 01       	movw	r24, r22
    383a:	8d 8b       	std	Y+21, r24	; 0x15
    383c:	9e 8b       	std	Y+22, r25	; 0x16
    383e:	af 8b       	std	Y+23, r26	; 0x17
    3840:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3842:	6d 89       	ldd	r22, Y+21	; 0x15
    3844:	7e 89       	ldd	r23, Y+22	; 0x16
    3846:	8f 89       	ldd	r24, Y+23	; 0x17
    3848:	98 8d       	ldd	r25, Y+24	; 0x18
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	40 e8       	ldi	r20, 0x80	; 128
    3850:	5f e3       	ldi	r21, 0x3F	; 63
    3852:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3856:	88 23       	and	r24, r24
    3858:	2c f4       	brge	.+10     	; 0x3864 <main+0x5c8>
		__ticks = 1;
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	9c 8b       	std	Y+20, r25	; 0x14
    3860:	8b 8b       	std	Y+19, r24	; 0x13
    3862:	3f c0       	rjmp	.+126    	; 0x38e2 <main+0x646>
	else if (__tmp > 65535)
    3864:	6d 89       	ldd	r22, Y+21	; 0x15
    3866:	7e 89       	ldd	r23, Y+22	; 0x16
    3868:	8f 89       	ldd	r24, Y+23	; 0x17
    386a:	98 8d       	ldd	r25, Y+24	; 0x18
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	3f ef       	ldi	r19, 0xFF	; 255
    3870:	4f e7       	ldi	r20, 0x7F	; 127
    3872:	57 e4       	ldi	r21, 0x47	; 71
    3874:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3878:	18 16       	cp	r1, r24
    387a:	4c f5       	brge	.+82     	; 0x38ce <main+0x632>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    387c:	69 8d       	ldd	r22, Y+25	; 0x19
    387e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3880:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3882:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3884:	20 e0       	ldi	r18, 0x00	; 0
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	40 e2       	ldi	r20, 0x20	; 32
    388a:	51 e4       	ldi	r21, 0x41	; 65
    388c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3890:	dc 01       	movw	r26, r24
    3892:	cb 01       	movw	r24, r22
    3894:	bc 01       	movw	r22, r24
    3896:	cd 01       	movw	r24, r26
    3898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    389c:	dc 01       	movw	r26, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	9c 8b       	std	Y+20, r25	; 0x14
    38a2:	8b 8b       	std	Y+19, r24	; 0x13
    38a4:	0f c0       	rjmp	.+30     	; 0x38c4 <main+0x628>
    38a6:	89 e1       	ldi	r24, 0x19	; 25
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	9a 8b       	std	Y+18, r25	; 0x12
    38ac:	89 8b       	std	Y+17, r24	; 0x11
    38ae:	89 89       	ldd	r24, Y+17	; 0x11
    38b0:	9a 89       	ldd	r25, Y+18	; 0x12
    38b2:	01 97       	sbiw	r24, 0x01	; 1
    38b4:	f1 f7       	brne	.-4      	; 0x38b2 <main+0x616>
    38b6:	9a 8b       	std	Y+18, r25	; 0x12
    38b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ba:	8b 89       	ldd	r24, Y+19	; 0x13
    38bc:	9c 89       	ldd	r25, Y+20	; 0x14
    38be:	01 97       	sbiw	r24, 0x01	; 1
    38c0:	9c 8b       	std	Y+20, r25	; 0x14
    38c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c4:	8b 89       	ldd	r24, Y+19	; 0x13
    38c6:	9c 89       	ldd	r25, Y+20	; 0x14
    38c8:	00 97       	sbiw	r24, 0x00	; 0
    38ca:	69 f7       	brne	.-38     	; 0x38a6 <main+0x60a>
    38cc:	14 c0       	rjmp	.+40     	; 0x38f6 <main+0x65a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ce:	6d 89       	ldd	r22, Y+21	; 0x15
    38d0:	7e 89       	ldd	r23, Y+22	; 0x16
    38d2:	8f 89       	ldd	r24, Y+23	; 0x17
    38d4:	98 8d       	ldd	r25, Y+24	; 0x18
    38d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38da:	dc 01       	movw	r26, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	9c 8b       	std	Y+20, r25	; 0x14
    38e0:	8b 8b       	std	Y+19, r24	; 0x13
    38e2:	8b 89       	ldd	r24, Y+19	; 0x13
    38e4:	9c 89       	ldd	r25, Y+20	; 0x14
    38e6:	98 8b       	std	Y+16, r25	; 0x10
    38e8:	8f 87       	std	Y+15, r24	; 0x0f
    38ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    38ec:	98 89       	ldd	r25, Y+16	; 0x10
    38ee:	01 97       	sbiw	r24, 0x01	; 1
    38f0:	f1 f7       	brne	.-4      	; 0x38ee <main+0x652>
    38f2:	98 8b       	std	Y+16, r25	; 0x10
    38f4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		//**********************************************************************************************
		//Hour1
		DIO_u8SetPortValue(DIO_u8PORTA,DIO_u8PORT_LOW);
    38f6:	80 e0       	ldi	r24, 0x00	; 0
    38f8:	60 e0       	ldi	r22, 0x00	; 0
    38fa:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN3,DIO_u8PIN_HIGH);
    38fe:	80 e0       	ldi	r24, 0x00	; 0
    3900:	63 e0       	ldi	r22, 0x03	; 3
    3902:	41 e0       	ldi	r20, 0x01	; 1
    3904:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>

		DIO_u8SetPortValue(DIO_u8PORTC,DIO_u8PORT_LOW);
    3908:	82 e0       	ldi	r24, 0x02	; 2
    390a:	60 e0       	ldi	r22, 0x00	; 0
    390c:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
		DIO_u8SetPortValue(DIO_u8PORTC,(Global_u8Hour/10) & 0X0F);
    3910:	80 91 8b 00 	lds	r24, 0x008B
    3914:	9a e0       	ldi	r25, 0x0A	; 10
    3916:	69 2f       	mov	r22, r25
    3918:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__udivmodqi4>
    391c:	98 2f       	mov	r25, r24
    391e:	9f 70       	andi	r25, 0x0F	; 15
    3920:	82 e0       	ldi	r24, 0x02	; 2
    3922:	69 2f       	mov	r22, r25
    3924:	0e 94 80 09 	call	0x1300	; 0x1300 <DIO_u8SetPortValue>
    3928:	80 e0       	ldi	r24, 0x00	; 0
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	a0 e8       	ldi	r26, 0x80	; 128
    392e:	bf e3       	ldi	r27, 0x3F	; 63
    3930:	8b 87       	std	Y+11, r24	; 0x0b
    3932:	9c 87       	std	Y+12, r25	; 0x0c
    3934:	ad 87       	std	Y+13, r26	; 0x0d
    3936:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3938:	6b 85       	ldd	r22, Y+11	; 0x0b
    393a:	7c 85       	ldd	r23, Y+12	; 0x0c
    393c:	8d 85       	ldd	r24, Y+13	; 0x0d
    393e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3940:	20 e0       	ldi	r18, 0x00	; 0
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	4a e7       	ldi	r20, 0x7A	; 122
    3946:	53 e4       	ldi	r21, 0x43	; 67
    3948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	8f 83       	std	Y+7, r24	; 0x07
    3952:	98 87       	std	Y+8, r25	; 0x08
    3954:	a9 87       	std	Y+9, r26	; 0x09
    3956:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3958:	6f 81       	ldd	r22, Y+7	; 0x07
    395a:	78 85       	ldd	r23, Y+8	; 0x08
    395c:	89 85       	ldd	r24, Y+9	; 0x09
    395e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	40 e8       	ldi	r20, 0x80	; 128
    3966:	5f e3       	ldi	r21, 0x3F	; 63
    3968:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    396c:	88 23       	and	r24, r24
    396e:	2c f4       	brge	.+10     	; 0x397a <main+0x6de>
		__ticks = 1;
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	9e 83       	std	Y+6, r25	; 0x06
    3976:	8d 83       	std	Y+5, r24	; 0x05
    3978:	3f c0       	rjmp	.+126    	; 0x39f8 <main+0x75c>
	else if (__tmp > 65535)
    397a:	6f 81       	ldd	r22, Y+7	; 0x07
    397c:	78 85       	ldd	r23, Y+8	; 0x08
    397e:	89 85       	ldd	r24, Y+9	; 0x09
    3980:	9a 85       	ldd	r25, Y+10	; 0x0a
    3982:	20 e0       	ldi	r18, 0x00	; 0
    3984:	3f ef       	ldi	r19, 0xFF	; 255
    3986:	4f e7       	ldi	r20, 0x7F	; 127
    3988:	57 e4       	ldi	r21, 0x47	; 71
    398a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    398e:	18 16       	cp	r1, r24
    3990:	4c f5       	brge	.+82     	; 0x39e4 <main+0x748>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3992:	6b 85       	ldd	r22, Y+11	; 0x0b
    3994:	7c 85       	ldd	r23, Y+12	; 0x0c
    3996:	8d 85       	ldd	r24, Y+13	; 0x0d
    3998:	9e 85       	ldd	r25, Y+14	; 0x0e
    399a:	20 e0       	ldi	r18, 0x00	; 0
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	40 e2       	ldi	r20, 0x20	; 32
    39a0:	51 e4       	ldi	r21, 0x41	; 65
    39a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a6:	dc 01       	movw	r26, r24
    39a8:	cb 01       	movw	r24, r22
    39aa:	bc 01       	movw	r22, r24
    39ac:	cd 01       	movw	r24, r26
    39ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b2:	dc 01       	movw	r26, r24
    39b4:	cb 01       	movw	r24, r22
    39b6:	9e 83       	std	Y+6, r25	; 0x06
    39b8:	8d 83       	std	Y+5, r24	; 0x05
    39ba:	0f c0       	rjmp	.+30     	; 0x39da <main+0x73e>
    39bc:	89 e1       	ldi	r24, 0x19	; 25
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	9c 83       	std	Y+4, r25	; 0x04
    39c2:	8b 83       	std	Y+3, r24	; 0x03
    39c4:	8b 81       	ldd	r24, Y+3	; 0x03
    39c6:	9c 81       	ldd	r25, Y+4	; 0x04
    39c8:	01 97       	sbiw	r24, 0x01	; 1
    39ca:	f1 f7       	brne	.-4      	; 0x39c8 <main+0x72c>
    39cc:	9c 83       	std	Y+4, r25	; 0x04
    39ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d0:	8d 81       	ldd	r24, Y+5	; 0x05
    39d2:	9e 81       	ldd	r25, Y+6	; 0x06
    39d4:	01 97       	sbiw	r24, 0x01	; 1
    39d6:	9e 83       	std	Y+6, r25	; 0x06
    39d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39da:	8d 81       	ldd	r24, Y+5	; 0x05
    39dc:	9e 81       	ldd	r25, Y+6	; 0x06
    39de:	00 97       	sbiw	r24, 0x00	; 0
    39e0:	69 f7       	brne	.-38     	; 0x39bc <main+0x720>
    39e2:	7b cc       	rjmp	.-1802   	; 0x32da <main+0x3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39e4:	6f 81       	ldd	r22, Y+7	; 0x07
    39e6:	78 85       	ldd	r23, Y+8	; 0x08
    39e8:	89 85       	ldd	r24, Y+9	; 0x09
    39ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f0:	dc 01       	movw	r26, r24
    39f2:	cb 01       	movw	r24, r22
    39f4:	9e 83       	std	Y+6, r25	; 0x06
    39f6:	8d 83       	std	Y+5, r24	; 0x05
    39f8:	8d 81       	ldd	r24, Y+5	; 0x05
    39fa:	9e 81       	ldd	r25, Y+6	; 0x06
    39fc:	9a 83       	std	Y+2, r25	; 0x02
    39fe:	89 83       	std	Y+1, r24	; 0x01
    3a00:	89 81       	ldd	r24, Y+1	; 0x01
    3a02:	9a 81       	ldd	r25, Y+2	; 0x02
    3a04:	01 97       	sbiw	r24, 0x01	; 1
    3a06:	f1 f7       	brne	.-4      	; 0x3a04 <main+0x768>
    3a08:	9a 83       	std	Y+2, r25	; 0x02
    3a0a:	89 83       	std	Y+1, r24	; 0x01
    3a0c:	66 cc       	rjmp	.-1844   	; 0x32da <main+0x3e>

00003a0e <StopWatch_Init>:
	}
}


void StopWatch_Init(void)
{
    3a0e:	df 93       	push	r29
    3a10:	cf 93       	push	r28
    3a12:	cd b7       	in	r28, 0x3d	; 61
    3a14:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN2,DIO_u8PIN_INPUT);
    3a16:	83 e0       	ldi	r24, 0x03	; 3
    3a18:	62 e0       	ldi	r22, 0x02	; 2
    3a1a:	40 e0       	ldi	r20, 0x00	; 0
    3a1c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN3,DIO_u8PIN_INPUT);
    3a20:	83 e0       	ldi	r24, 0x03	; 3
    3a22:	63 e0       	ldi	r22, 0x03	; 3
    3a24:	40 e0       	ldi	r20, 0x00	; 0
    3a26:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN2,DIO_u8PIN_INPUT);
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
    3a2c:	62 e0       	ldi	r22, 0x02	; 2
    3a2e:	40 e0       	ldi	r20, 0x00	; 0
    3a30:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN2,DIO_u8PIN_HIGH);
    3a34:	83 e0       	ldi	r24, 0x03	; 3
    3a36:	62 e0       	ldi	r22, 0x02	; 2
    3a38:	41 e0       	ldi	r20, 0x01	; 1
    3a3a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN3,DIO_u8PIN_HIGH);
    3a3e:	83 e0       	ldi	r24, 0x03	; 3
    3a40:	63 e0       	ldi	r22, 0x03	; 3
    3a42:	41 e0       	ldi	r20, 0x01	; 1
    3a44:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN2,DIO_u8PIN_HIGH);
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	62 e0       	ldi	r22, 0x02	; 2
    3a4c:	41 e0       	ldi	r20, 0x01	; 1
    3a4e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>

	/* Configure first 4 pins in PORTC as output pins (Data Lines) */
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_OUTPUT);
    3a52:	82 e0       	ldi	r24, 0x02	; 2
    3a54:	60 e0       	ldi	r22, 0x00	; 0
    3a56:	41 e0       	ldi	r20, 0x01	; 1
    3a58:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_OUTPUT);
    3a5c:	82 e0       	ldi	r24, 0x02	; 2
    3a5e:	61 e0       	ldi	r22, 0x01	; 1
    3a60:	41 e0       	ldi	r20, 0x01	; 1
    3a62:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN2,DIO_u8PIN_OUTPUT);
    3a66:	82 e0       	ldi	r24, 0x02	; 2
    3a68:	62 e0       	ldi	r22, 0x02	; 2
    3a6a:	41 e0       	ldi	r20, 0x01	; 1
    3a6c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_OUTPUT);
    3a70:	82 e0       	ldi	r24, 0x02	; 2
    3a72:	63 e0       	ldi	r22, 0x03	; 3
    3a74:	41 e0       	ldi	r20, 0x01	; 1
    3a76:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>

	/* configure first 6 pins in PORTA As output pins(control lines) */
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_OUTPUT);
    3a7a:	80 e0       	ldi	r24, 0x00	; 0
    3a7c:	60 e0       	ldi	r22, 0x00	; 0
    3a7e:	41 e0       	ldi	r20, 0x01	; 1
    3a80:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN1,DIO_u8PIN_OUTPUT);
    3a84:	80 e0       	ldi	r24, 0x00	; 0
    3a86:	61 e0       	ldi	r22, 0x01	; 1
    3a88:	41 e0       	ldi	r20, 0x01	; 1
    3a8a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN2,DIO_u8PIN_OUTPUT);
    3a8e:	80 e0       	ldi	r24, 0x00	; 0
    3a90:	62 e0       	ldi	r22, 0x02	; 2
    3a92:	41 e0       	ldi	r20, 0x01	; 1
    3a94:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN3,DIO_u8PIN_OUTPUT);
    3a98:	80 e0       	ldi	r24, 0x00	; 0
    3a9a:	63 e0       	ldi	r22, 0x03	; 3
    3a9c:	41 e0       	ldi	r20, 0x01	; 1
    3a9e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_OUTPUT);
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	64 e0       	ldi	r22, 0x04	; 4
    3aa6:	41 e0       	ldi	r20, 0x01	; 1
    3aa8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_OUTPUT);
    3aac:	80 e0       	ldi	r24, 0x00	; 0
    3aae:	65 e0       	ldi	r22, 0x05	; 5
    3ab0:	41 e0       	ldi	r20, 0x01	; 1
    3ab2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>

	/* initial value 5 volt to display all segments in the same time for the first time */
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_HIGH);
    3ab6:	80 e0       	ldi	r24, 0x00	; 0
    3ab8:	60 e0       	ldi	r22, 0x00	; 0
    3aba:	41 e0       	ldi	r20, 0x01	; 1
    3abc:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN1,DIO_u8PIN_HIGH);
    3ac0:	80 e0       	ldi	r24, 0x00	; 0
    3ac2:	61 e0       	ldi	r22, 0x01	; 1
    3ac4:	41 e0       	ldi	r20, 0x01	; 1
    3ac6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN2,DIO_u8PIN_HIGH);
    3aca:	80 e0       	ldi	r24, 0x00	; 0
    3acc:	62 e0       	ldi	r22, 0x02	; 2
    3ace:	41 e0       	ldi	r20, 0x01	; 1
    3ad0:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN3,DIO_u8PIN_HIGH);
    3ad4:	80 e0       	ldi	r24, 0x00	; 0
    3ad6:	63 e0       	ldi	r22, 0x03	; 3
    3ad8:	41 e0       	ldi	r20, 0x01	; 1
    3ada:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_HIGH);
    3ade:	80 e0       	ldi	r24, 0x00	; 0
    3ae0:	64 e0       	ldi	r22, 0x04	; 4
    3ae2:	41 e0       	ldi	r20, 0x01	; 1
    3ae4:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_HIGH);
    3ae8:	80 e0       	ldi	r24, 0x00	; 0
    3aea:	65 e0       	ldi	r22, 0x05	; 5
    3aec:	41 e0       	ldi	r20, 0x01	; 1
    3aee:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>

	/* Initial value for the begin of the 7 segment all segments = 0 in the first */
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_HIGH);
    3af2:	82 e0       	ldi	r24, 0x02	; 2
    3af4:	60 e0       	ldi	r22, 0x00	; 0
    3af6:	41 e0       	ldi	r20, 0x01	; 1
    3af8:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_HIGH);
    3afc:	82 e0       	ldi	r24, 0x02	; 2
    3afe:	61 e0       	ldi	r22, 0x01	; 1
    3b00:	41 e0       	ldi	r20, 0x01	; 1
    3b02:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN2,DIO_u8PIN_HIGH);
    3b06:	82 e0       	ldi	r24, 0x02	; 2
    3b08:	62 e0       	ldi	r22, 0x02	; 2
    3b0a:	41 e0       	ldi	r20, 0x01	; 1
    3b0c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_HIGH);
    3b10:	82 e0       	ldi	r24, 0x02	; 2
    3b12:	63 e0       	ldi	r22, 0x03	; 3
    3b14:	41 e0       	ldi	r20, 0x01	; 1
    3b16:	0e 94 6e 08 	call	0x10dc	; 0x10dc <DIO_u8SetPinValue>

	/* Enable Global Interrupt */
	GIE_voidEnable();
    3b1a:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <GIE_voidEnable>

	/* initialize the configure structure of external interrup0 in the FALLING_EDGE */
	EXTI_voidInt0Init();
    3b1e:	0e 94 41 0b 	call	0x1682	; 0x1682 <EXTI_voidInt0Init>

	/* initialize the configure structure of external interrup1 in the RISING_EDGE */
	EXTI_voidInt1Init();
    3b22:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <EXTI_voidInt1Init>

	/* initialize the configure structure of external interrup2 in the FALLING_EDGE */
	EXTI_voidInt2Init();
    3b26:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <EXTI_voidInt2Init>

	TIMER_voidTimer1Enable(TIMER1_MODE_CTC_OCR1A,TIMER1_MODE_CHANNEL_A_SET_OC1A,TIMER1_MODE_CHANNEL_B_NORMAL);
    3b2a:	84 e0       	ldi	r24, 0x04	; 4
    3b2c:	63 e0       	ldi	r22, 0x03	; 3
    3b2e:	40 e0       	ldi	r20, 0x00	; 0
    3b30:	0e 94 09 13 	call	0x2612	; 0x2612 <TIMER_voidTimer1Enable>

	TIMER_voidTimer1SetOCR1A(1000);
    3b34:	88 ee       	ldi	r24, 0xE8	; 232
    3b36:	93 e0       	ldi	r25, 0x03	; 3
    3b38:	0e 94 12 18 	call	0x3024	; 0x3024 <TIMER_voidTimer1SetOCR1A>
}
    3b3c:	cf 91       	pop	r28
    3b3e:	df 91       	pop	r29
    3b40:	08 95       	ret

00003b42 <Reset_StopWatch>:

void Reset_StopWatch(void)
{
    3b42:	df 93       	push	r29
    3b44:	cf 93       	push	r28
    3b46:	cd b7       	in	r28, 0x3d	; 61
    3b48:	de b7       	in	r29, 0x3e	; 62
	Global_u8Tick=0;
    3b4a:	10 92 88 00 	sts	0x0088, r1
	Global_u8Second=0;
    3b4e:	10 92 89 00 	sts	0x0089, r1
	Global_u8Minute=0;
    3b52:	10 92 8a 00 	sts	0x008A, r1
	Global_u8Hour=0;
    3b56:	10 92 8b 00 	sts	0x008B, r1
}
    3b5a:	cf 91       	pop	r28
    3b5c:	df 91       	pop	r29
    3b5e:	08 95       	ret

00003b60 <Stop_stopWatch>:

void Stop_stopWatch(void)
{
    3b60:	df 93       	push	r29
    3b62:	cf 93       	push	r28
    3b64:	cd b7       	in	r28, 0x3d	; 61
    3b66:	de b7       	in	r29, 0x3e	; 62
	void TIMER_voidTimer1Stop(void);
}
    3b68:	cf 91       	pop	r28
    3b6a:	df 91       	pop	r29
    3b6c:	08 95       	ret

00003b6e <Resume_StopWatch>:

void Resume_StopWatch(void)
{
    3b6e:	df 93       	push	r29
    3b70:	cf 93       	push	r28
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
	TIMER_voidTimer1Enable(TIMER1_MODE_CTC_OCR1A,TIMER1_MODE_CHANNEL_A_SET_OC1A,TIMER1_MODE_CHANNEL_B_NORMAL);
    3b76:	84 e0       	ldi	r24, 0x04	; 4
    3b78:	63 e0       	ldi	r22, 0x03	; 3
    3b7a:	40 e0       	ldi	r20, 0x00	; 0
    3b7c:	0e 94 09 13 	call	0x2612	; 0x2612 <TIMER_voidTimer1Enable>
}
    3b80:	cf 91       	pop	r28
    3b82:	df 91       	pop	r29
    3b84:	08 95       	ret

00003b86 <Detect_Seconds>:

void Detect_Seconds(void)
{
    3b86:	df 93       	push	r29
    3b88:	cf 93       	push	r28
    3b8a:	cd b7       	in	r28, 0x3d	; 61
    3b8c:	de b7       	in	r29, 0x3e	; 62
	//Set time counters
	Global_u8Second++;
    3b8e:	80 91 89 00 	lds	r24, 0x0089
    3b92:	8f 5f       	subi	r24, 0xFF	; 255
    3b94:	80 93 89 00 	sts	0x0089, r24

	if(59==Global_u8Second)//Seconds
    3b98:	80 91 89 00 	lds	r24, 0x0089
    3b9c:	8b 33       	cpi	r24, 0x3B	; 59
    3b9e:	39 f4       	brne	.+14     	; 0x3bae <Detect_Seconds+0x28>
	{
		Global_u8Second=0;
    3ba0:	10 92 89 00 	sts	0x0089, r1
		Global_u8Minute++;
    3ba4:	80 91 8a 00 	lds	r24, 0x008A
    3ba8:	8f 5f       	subi	r24, 0xFF	; 255
    3baa:	80 93 8a 00 	sts	0x008A, r24
	}


	if(59==Global_u8Minute)//Minutes
    3bae:	80 91 8a 00 	lds	r24, 0x008A
    3bb2:	8b 33       	cpi	r24, 0x3B	; 59
    3bb4:	39 f4       	brne	.+14     	; 0x3bc4 <Detect_Seconds+0x3e>
	{
		Global_u8Minute=0;
    3bb6:	10 92 8a 00 	sts	0x008A, r1
		Global_u8Hour++;
    3bba:	80 91 8b 00 	lds	r24, 0x008B
    3bbe:	8f 5f       	subi	r24, 0xFF	; 255
    3bc0:	80 93 8b 00 	sts	0x008B, r24
	}


	if(24==Global_u8Hour)//Hours
    3bc4:	80 91 8b 00 	lds	r24, 0x008B
    3bc8:	88 31       	cpi	r24, 0x18	; 24
    3bca:	31 f4       	brne	.+12     	; 0x3bd8 <Detect_Seconds+0x52>
	{
		Global_u8Second=0;
    3bcc:	10 92 89 00 	sts	0x0089, r1
		Global_u8Minute=0;
    3bd0:	10 92 8a 00 	sts	0x008A, r1
		Global_u8Hour=0;
    3bd4:	10 92 8b 00 	sts	0x008B, r1
	}

}
    3bd8:	cf 91       	pop	r28
    3bda:	df 91       	pop	r29
    3bdc:	08 95       	ret

00003bde <__udivmodqi4>:
    3bde:	99 1b       	sub	r25, r25
    3be0:	79 e0       	ldi	r23, 0x09	; 9
    3be2:	04 c0       	rjmp	.+8      	; 0x3bec <__udivmodqi4_ep>

00003be4 <__udivmodqi4_loop>:
    3be4:	99 1f       	adc	r25, r25
    3be6:	96 17       	cp	r25, r22
    3be8:	08 f0       	brcs	.+2      	; 0x3bec <__udivmodqi4_ep>
    3bea:	96 1b       	sub	r25, r22

00003bec <__udivmodqi4_ep>:
    3bec:	88 1f       	adc	r24, r24
    3bee:	7a 95       	dec	r23
    3bf0:	c9 f7       	brne	.-14     	; 0x3be4 <__udivmodqi4_loop>
    3bf2:	80 95       	com	r24
    3bf4:	08 95       	ret

00003bf6 <__udivmodhi4>:
    3bf6:	aa 1b       	sub	r26, r26
    3bf8:	bb 1b       	sub	r27, r27
    3bfa:	51 e1       	ldi	r21, 0x11	; 17
    3bfc:	07 c0       	rjmp	.+14     	; 0x3c0c <__udivmodhi4_ep>

00003bfe <__udivmodhi4_loop>:
    3bfe:	aa 1f       	adc	r26, r26
    3c00:	bb 1f       	adc	r27, r27
    3c02:	a6 17       	cp	r26, r22
    3c04:	b7 07       	cpc	r27, r23
    3c06:	10 f0       	brcs	.+4      	; 0x3c0c <__udivmodhi4_ep>
    3c08:	a6 1b       	sub	r26, r22
    3c0a:	b7 0b       	sbc	r27, r23

00003c0c <__udivmodhi4_ep>:
    3c0c:	88 1f       	adc	r24, r24
    3c0e:	99 1f       	adc	r25, r25
    3c10:	5a 95       	dec	r21
    3c12:	a9 f7       	brne	.-22     	; 0x3bfe <__udivmodhi4_loop>
    3c14:	80 95       	com	r24
    3c16:	90 95       	com	r25
    3c18:	bc 01       	movw	r22, r24
    3c1a:	cd 01       	movw	r24, r26
    3c1c:	08 95       	ret

00003c1e <__divmodhi4>:
    3c1e:	97 fb       	bst	r25, 7
    3c20:	09 2e       	mov	r0, r25
    3c22:	07 26       	eor	r0, r23
    3c24:	0a d0       	rcall	.+20     	; 0x3c3a <__divmodhi4_neg1>
    3c26:	77 fd       	sbrc	r23, 7
    3c28:	04 d0       	rcall	.+8      	; 0x3c32 <__divmodhi4_neg2>
    3c2a:	e5 df       	rcall	.-54     	; 0x3bf6 <__udivmodhi4>
    3c2c:	06 d0       	rcall	.+12     	; 0x3c3a <__divmodhi4_neg1>
    3c2e:	00 20       	and	r0, r0
    3c30:	1a f4       	brpl	.+6      	; 0x3c38 <__divmodhi4_exit>

00003c32 <__divmodhi4_neg2>:
    3c32:	70 95       	com	r23
    3c34:	61 95       	neg	r22
    3c36:	7f 4f       	sbci	r23, 0xFF	; 255

00003c38 <__divmodhi4_exit>:
    3c38:	08 95       	ret

00003c3a <__divmodhi4_neg1>:
    3c3a:	f6 f7       	brtc	.-4      	; 0x3c38 <__divmodhi4_exit>
    3c3c:	90 95       	com	r25
    3c3e:	81 95       	neg	r24
    3c40:	9f 4f       	sbci	r25, 0xFF	; 255
    3c42:	08 95       	ret

00003c44 <__prologue_saves__>:
    3c44:	2f 92       	push	r2
    3c46:	3f 92       	push	r3
    3c48:	4f 92       	push	r4
    3c4a:	5f 92       	push	r5
    3c4c:	6f 92       	push	r6
    3c4e:	7f 92       	push	r7
    3c50:	8f 92       	push	r8
    3c52:	9f 92       	push	r9
    3c54:	af 92       	push	r10
    3c56:	bf 92       	push	r11
    3c58:	cf 92       	push	r12
    3c5a:	df 92       	push	r13
    3c5c:	ef 92       	push	r14
    3c5e:	ff 92       	push	r15
    3c60:	0f 93       	push	r16
    3c62:	1f 93       	push	r17
    3c64:	cf 93       	push	r28
    3c66:	df 93       	push	r29
    3c68:	cd b7       	in	r28, 0x3d	; 61
    3c6a:	de b7       	in	r29, 0x3e	; 62
    3c6c:	ca 1b       	sub	r28, r26
    3c6e:	db 0b       	sbc	r29, r27
    3c70:	0f b6       	in	r0, 0x3f	; 63
    3c72:	f8 94       	cli
    3c74:	de bf       	out	0x3e, r29	; 62
    3c76:	0f be       	out	0x3f, r0	; 63
    3c78:	cd bf       	out	0x3d, r28	; 61
    3c7a:	09 94       	ijmp

00003c7c <__epilogue_restores__>:
    3c7c:	2a 88       	ldd	r2, Y+18	; 0x12
    3c7e:	39 88       	ldd	r3, Y+17	; 0x11
    3c80:	48 88       	ldd	r4, Y+16	; 0x10
    3c82:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c84:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c86:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c88:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c8e:	b9 84       	ldd	r11, Y+9	; 0x09
    3c90:	c8 84       	ldd	r12, Y+8	; 0x08
    3c92:	df 80       	ldd	r13, Y+7	; 0x07
    3c94:	ee 80       	ldd	r14, Y+6	; 0x06
    3c96:	fd 80       	ldd	r15, Y+5	; 0x05
    3c98:	0c 81       	ldd	r16, Y+4	; 0x04
    3c9a:	1b 81       	ldd	r17, Y+3	; 0x03
    3c9c:	aa 81       	ldd	r26, Y+2	; 0x02
    3c9e:	b9 81       	ldd	r27, Y+1	; 0x01
    3ca0:	ce 0f       	add	r28, r30
    3ca2:	d1 1d       	adc	r29, r1
    3ca4:	0f b6       	in	r0, 0x3f	; 63
    3ca6:	f8 94       	cli
    3ca8:	de bf       	out	0x3e, r29	; 62
    3caa:	0f be       	out	0x3f, r0	; 63
    3cac:	cd bf       	out	0x3d, r28	; 61
    3cae:	ed 01       	movw	r28, r26
    3cb0:	08 95       	ret

00003cb2 <_exit>:
    3cb2:	f8 94       	cli

00003cb4 <__stop_program>:
    3cb4:	ff cf       	rjmp	.-2      	; 0x3cb4 <__stop_program>
